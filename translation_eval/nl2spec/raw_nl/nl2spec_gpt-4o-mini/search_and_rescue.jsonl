{"id": 4249, "sentence": ["If", "every", "record", "flood", "is", "eventually", "followed", "by", "talking", "to", "the", "safe", "victim,", "then", "avoid", "the", "impending", "debris", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(flood)", "implies", "finally", "communicate(safe_victim)", ")", "implies", "globally", "finally", "avoid(impending_debris)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["record(flood)"], ["communicate(safe_victim)", "avoid(impending_debris)"]], "bad_trace": [["record(flood)"], ["communicate(safe_victim)"]], "prediction": "(\"If every record flood is eventually followed by talking to the safe victim\") and the consequent (\"then avoid the impending debris must occur infinitely often\"). The antecedent can be expressed as a globally quantified statement that if a record flood occurs, it will eventually lead to talking to the safe victim. The consequent states that avoiding the impending debris must happen infinitely often, which can be expressed using the \"globally\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"If every record flood is eventually followed by talking to the safe victim\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"then avoid the impending debris must occur infinitely often\" : \"G prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 7765, "sentence": ["This", "controller", "must", "always", "avoid", "begining", "recording", "fire", "source."], "tl": ["globally", "(", "not", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [[], [], []], "bad_trace": [["record(fire_source)"], [], []], "prediction": "(G)"}
{"id": 8523, "sentence": ["The", "robot", "must", "always", "avoid", "give", "aid", "to", "the", "safe", "victim."], "tl": ["globally", "(", "not", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["deliver_aid(safe_victim)"], [], []], "prediction": "(G), and \"avoid give aid\" can be represented as the negation of the proposition that indicates giving aid to the safe victim (not prop_1)"}
{"id": 7657, "sentence": ["From", "some", "point", "onwards,", "take", "a", "photo", "of", "unsafe", "civilian", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(unsafe_civilian)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(unsafe_civilian)"], [], []], "bad_trace": [["photo(unsafe_civilian)"], [], ["photo(unsafe_civilian)"]], "prediction": "(representing \"take a photo of unsafe civilian\")"}
{"id": 9494, "sentence": ["If", "every", "stay", "away", "from", "the", "inactive", "fire", "source", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "rescuer,", "then", "go", "back", "to", "base", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(inactive_fire_source)", "implies", "finally", "communicate(injured_rescuer)", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(inactive_fire_source)"], ["communicate(injured_rescuer)", "go_home"]], "bad_trace": [["avoid(inactive_fire_source)"], ["communicate(injured_rescuer)"]], "prediction": "(prop_1 \u2192 F prop_2)\", where prop_1 represents \"stay away from the inactive fire source\" and prop_2 represents \"establishing communication with the injured rescuer\".\n   - The consequence can be expressed as: \"G F prop_3\", where prop_3 represents \"go back to base\".\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"stay away from the inactive fire source\": \"prop_1\",\n  \"establishing communication with the injured rescuer\": \"prop_2\",\n  \"go back to base\": \"prop_3\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 2879, "sentence": ["In", "this", "task,", "take", "a", "photo", "of", "flood,", "then", "return", "home."], "tl": ["(", "photo(flood)", "until", "go_home", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)", "go_home"]], "bad_trace": [[], [], []], "prediction": "(prop_1) and \"returning home\" with another proposition placeholder (prop_2)"}
{"id": 5144, "sentence": ["If", "get", "help", "holds", "and", "talk", "to", "the", "safe", "hostile", "holds", "next,", "then", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "communicate(safe_hostile)", "implies", "next", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["get_help"], ["communicate(safe_hostile)"], []], "prediction": "3. *FINAL:* (prop_1 and prop_2) \u2192 X prop_3 FINISH"}
{"id": 9557, "sentence": ["If", "give", "aid", "to", "the", "injured", "victim", "holds", "and", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "next,", "then", "go", "home", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "and", "next", "deliver_aid(safe_hostile)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(safe_hostile)"], ["go_home"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(safe_hostile)"], []], "prediction": "(let's denote it as prop_1 for giving aid and prop_2 for providing assistance).\n   - \"then go home holds in the step after that\" indicates that if the condition is satisfied, then in the next step (X), we should have another proposition (let's denote it as prop_3 for going home) that holds in the step after that (X prop_3).\n\n2. *Explanation dictionary*:\n   {\n     \"give aid to the injured victim holds\": \"prop_1\",\n     \"provide assistance to the safe hostile holds next\": \"prop_2\",\n     \"go home holds in the step after that\": \"X prop_3\"\n   }\n\n3. *FINAL:* (prop_1 and X prop_2)"}
{"id": 3920, "sentence": ["Either", "take", "a", "picture", "of", "flood", "or", "deliver", "aid", "to", "the", "safe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "photo(flood)", "or", "globally", "finally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(flood)"]], "bad_trace": [[]], "prediction": "(prop_1 or prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 9945, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "hostile", "nor", "talk", "to", "the", "safe", "rescuer", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "communicate(safe_rescuer)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_hostile)", "communicate(safe_rescuer)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not(prop_1) and not(prop_2)) \u2192 F(prop_3) FINISH"}
{"id": 7422, "sentence": ["If", "every", "stay", "away", "from", "the", "probable", "fire", "source", "is", "eventually", "followed", "by", "taking", "a", "video", "of", "gas", "leak,", "then", "take", "a", "video", "of", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(probable_fire_source)", "implies", "finally", "record(gas_leak)", ")", "implies", "globally", "finally", "record(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["avoid(probable_fire_source)"], ["record(gas_leak)", "record(safe_victim)"]], "bad_trace": [["avoid(probable_fire_source)"], ["record(gas_leak)"]], "prediction": "(F) for the eventual occurrence and \"globally\" (G) for the infinite occurrence.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n    \"every stay away from the probable fire source is eventually followed by taking a video of gas leak\": \"G (prop_1 \u2192 F prop_2)\",\n    \"take a video of safe victim must occur infinitely often\": \"G prop_3\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9673, "sentence": ["If", "begin", "recording", "injured", "civilian", "ever", "holds,", "call", "for", "help", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "record(injured_civilian)", ")", "implies", "(", "not", "record(injured_civilian)", "until", "(", "get_help", "and", "not", "record(injured_civilian)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help"], ["record(injured_civilian)"]], "bad_trace": [["record(injured_civilian)"]], "prediction": "(if the recording holds) and the consequence (the call for help must have occurred before that). The phrase \"ever holds\" indicates that we are looking for an eventual occurrence of the recording, which can be represented using the \"finally\" operator (F). The phrase \"must have held beforehand\" indicates that the call for help should have occurred at some point before the recording, which can be represented using the \"until\" operator (U).\n\n2. *Explanation dictionary* \u2013\n{\n    \"If begin recording injured civilian ever holds\": \"F(prop_1)\",\n    \"call for help must have held beforehand\": \"G(prop_2 \u2192 F(prop_1 U prop_2))\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(prop_2 U prop_1)"}
{"id": 9232, "sentence": ["Whenever", "take", "a", "video", "of", "fire", "source", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "take", "a", "photo", "of", "safe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(fire_source)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "photo(safe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(fire_source)", "get_help", "photo(safe_civilian)"]], "bad_trace": [["record(fire_source)", "get_help"]], "prediction": "(taking a video of a fire source and calling for help), then two other actions (calling for help and taking a photo of a safe civilian) should also be equal. This can be expressed in temporal logic using the \"globally\" operator to indicate that this condition holds at all times.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever take a video of fire source and call for help are equal\": \"prop_1\",\n    \"call for help and take a photo of safe civilian are equal\": \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 6272, "sentence": ["Record", "fire", "source", "and", "take", "a", "photo", "of", "unsafe", "person", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "record(fire_source)", "and", "finally", "photo(unsafe_person)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(fire_source)"], ["photo(unsafe_person)"]], "bad_trace": [[], [], []], "prediction": "(F) to indicate that each action will eventually occur.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Record fire source\" : prop_1,\n  \"take a photo of unsafe person\" : prop_2,\n  \"will each happen at some point\" : F(prop_1) and F(prop_2)\n}\n\n3. *FINAL:* F(prop_1) and F(prop_2)"}
{"id": 342, "sentence": ["Take", "a", "photo", "of", "injured", "victim", "and", "call", "for", "help", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "photo(injured_victim)", "and", "get_help", ")", ")", "and", "globally", "(", "photo(injured_victim)", "or", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_victim)"], ["get_help"], ["photo(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 2964, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "begin", "recording", "gas", "leak", "holds,", "give", "aid", "to", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "record(gas_leak)", ")", "implies", "finally", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "record(gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 F prop_3 FINISH"}
{"id": 2020, "sentence": ["This", "controller", "must", "eventually", "deliver", "aid", "to", "the", "safe", "victim", "and", "go", "home."], "tl": ["finally", "(", "deliver_aid(safe_victim)", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["deliver_aid(safe_victim)"], ["deliver_aid(safe_victim)", "go_home"]], "bad_trace": [[], ["deliver_aid(safe_victim)"], []], "prediction": "(F)"}
{"id": 6678, "sentence": ["You", "must", "always", "have", "either", "return", "to", "base", "or", "talk", "to", "the", "injured", "hostile."], "tl": ["globally", "(", "go_home", "or", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["go_home"]], "bad_trace": [["go_home"], [], []], "prediction": "(G), indicating that the condition must hold at all times. The phrase \"either return to base or talk to the injured hostile\" translates to a disjunction (or) of two propositions: \"return to base\" (prop_1) and \"talk to the injured hostile\" (prop_2). Therefore, the entire command can be expressed as \"G (prop_1 or prop_2)\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"You must always have either return to base or talk to the injured hostile.\" : \"G (prop_1 or prop_2)\",\n  \"return to base\" : \"prop_1\",\n  \"talk to the injured hostile\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 6056, "sentence": ["This", "controller", "must", "Please", "deliver", "aid", "to", "the", "injured", "rescuer", "and", "then", "begin", "recording", "unsafe", "civilian."], "tl": ["(", "deliver_aid(injured_rescuer)", "until", "record(unsafe_civilian)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "record(unsafe_civilian)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* prop_1 U prop_2 FINISH"}
{"id": 4855, "sentence": ["Whenever", "neither", "call", "for", "help", "nor", "avoid", "the", "nearest", "fire", "source", "holds,", "return", "to", "base", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "avoid(nearest_fire_source)", ")", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "avoid(nearest_fire_source)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not (prop_1 or prop_2) \u2192 F(prop_3)) FINISH"}
{"id": 9741, "sentence": ["Return", "home", "can", "only", "happen", "after", "avoid", "the", "active", "debris."], "tl": ["not", "go_home", "until", "avoid(active_debris)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [[], [], ["avoid(active_debris)"]], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(represented by a placeholder like prop_1) can only happen after \"avoid the active debris\" (represented by another placeholder like prop_2)"}
{"id": 8152, "sentence": ["Whenever", "provide", "assistance", "to", "the", "safe", "victim", "and", "get", "help", "are", "equal,", "get", "help", "and", "begin", "recording", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["deliver_aid(safe_victim)", "get_help", "record(unstable_beam)"]], "bad_trace": [["deliver_aid(safe_victim)", "get_help"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 1973, "sentence": ["Whenever", "go", "back", "to", "base", "holds,", "call", "for", "help", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "get_help"], ["get_help"]], "bad_trace": [["go_home"], []], "prediction": "(go back to base \u2192 call for help)\".\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever go back to base holds\" : \"go_back_to_base\",\n    \"call for help holds as well\" : \"call_for_help\",\n    \"G (go back to base \u2192 call for help)\" : \"G (go_back_to_base \u2192 call_for_help)\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 318, "sentence": ["If", "take", "a", "picture", "of", "injured", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "injured", "victim."], "tl": ["globally", "finally", "photo(injured_civilian)", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[]], "bad_trace": [["photo(injured_civilian)"]], "prediction": "(prop_1)\" where prop_1 is the proposition that a picture is taken. The phrase \"then so does deliver aid to the injured victim\" can be represented as \"F(prop_2)\" where prop_2 is the proposition that aid is delivered. The entire command can be expressed as \"F(prop_1) \u2192 F(prop_2)\", indicating that if the first event occurs infinitely often, then the second event must also occur infinitely often.\n\n2. *Explanation dictionary* \u2013\n{\n    \"take a picture of injured civilian happens infinitely often\": \"F(prop_1)\",\n    \"deliver aid to the injured victim\": \"F(prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 F(prop_2)"}
{"id": 5065, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G)"}
{"id": 2547, "sentence": ["From", "some", "point", "onwards,", "take", "a", "photo", "of", "flood", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(flood)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(flood)"], [], []], "bad_trace": [["photo(flood)"], [], ["photo(flood)"]], "prediction": "(represented by a proposition placeholder) never occurs again. This can be expressed using the \"globally\" operator (G) to indicate that the condition must hold true at all times after that point. The phrase \"never occurs again\" translates to \"not prop_2\" (where prop_2 represents the occurrence of a flood).\n\n2. *Explanation dictionary* \u2013\n{\n    \"some point onwards\" : \"X\",\n    \"take a photo of flood\" : \"prop_1\",\n    \"never occurs again\" : \"not prop_2\"\n}\n\n3. *FINAL:* X (prop_1 \u2192 G (not prop_2))"}
{"id": 6746, "sentence": ["If", "take", "a", "photo", "of", "unsafe", "rescuer", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "unsafe", "civilian", "persists", "until", "photographing", "unstable", "beam", "holds,", "or", "else", "take", "a", "picture", "of", "unsafe", "civilian", "holds", "forever."], "tl": ["photo(unsafe_rescuer)", "implies", "next", "(", "(", "photo(unsafe_civilian)", "until", "photo(unstable_beam)", ")", "or", "globally", "photo(unsafe_civilian)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(unsafe_rescuer)"], ["photo(unsafe_civilian)"], ["photo(unsafe_civilian)"], ["photo(unstable_beam)"]], "bad_trace": [["photo(unsafe_rescuer)"], []], "prediction": "(where prop_1 represents the condition of taking a photo of an unsafe rescuer).\n   - \"then in the next step take a picture of unsafe civilian persists\" translates to \"X prop_2\" (where prop_2 represents the condition of taking a picture of an unsafe civilian).\n   - \"until photographing unstable beam holds\" translates to \"U prop_3\" (where prop_3 represents the condition of photographing an unstable beam).\n   - \"or else take a picture of unsafe civilian holds forever\" translates to \"G prop_2\" (indicating that the condition of taking a picture of an unsafe civilian holds globally)"}
{"id": 2385, "sentence": ["Whenever", "neither", "do", "not", "go", "near", "the", "inactive", "flood", "nor", "do", "not", "go", "near", "the", "nearest", "debris", "holds,", "talk", "to", "the", "safe", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(inactive_flood)", "and", "avoid(nearest_debris)", ")", "implies", "finally", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["avoid(inactive_flood)", "avoid(nearest_debris)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G ((not prop_1) and (not prop_2) \u2192 F prop_3) FINISH"}
{"id": 1542, "sentence": ["If", "call", "for", "help", "holds", "and", "establish", "communication", "with", "the", "injured", "hostile", "holds", "next,", "then", "establish", "communication", "with", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "communicate(injured_hostile)", "implies", "next", "next", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["communicate(injured_hostile)"], ["communicate(safe_rescuer)"]], "bad_trace": [["get_help"], ["communicate(injured_hostile)"], []], "prediction": "(prop_1) and \"establish communication with the injured hostile\" (prop_2) must hold. The consequence states that if the condition is met in the next step (X), then \"establish communication with the safe rescuer\" (prop_3) must hold in the step after that (X X).\n\n2. *Explanation dictionary* \u2013\n{\n  \"call for help holds\": \"prop_1\",\n  \"establish communication with the injured hostile holds\": \"prop_2\",\n  \"establish communication with the safe rescuer holds\": \"prop_3\"\n}\n\n3. *FINAL:* (prop_1 and prop_2)"}
{"id": 7957, "sentence": ["Provide", "assistance", "to", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(safe_victim)"]], "bad_trace": [["deliver_aid(safe_victim)"], []], "prediction": "(let's say prop_1) should hold globally (at all times)"}
{"id": 5668, "sentence": ["The", "system", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F) to denote that the condition will be satisfied at some point in the future. We can represent \"avoid going home\" as \"not going home,\" which we can denote with a placeholder like prop_1. Therefore, the complete formula will be F(not prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"eventually avoid going home\" : \"F(not prop_1)\"\n}\n\n3. *FINAL:* F(not prop_1)"}
{"id": 2597, "sentence": ["The", "robot", "must", "do", "not", "go", "near", "the", "nearest", "flood", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "avoid(nearest_flood)", "and", "next", "avoid(nearest_flood)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["The", "robot", "must", "prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["avoid(nearest_flood)"], [], ["avoid(nearest_flood)"]], "bad_trace": [["avoid(nearest_flood)"], [], [], []], "prediction": "(i.e., not be near the flood) within two steps. Therefore, we can express this as: if the robot goes near the flood (prop_1), then it must not go near the flood in the next two steps.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The robot must do not go near the nearest flood\" : not prop_1,\n  \"should always hold\" : G,\n  \"with at most a two-step grace period for recovery\" : (prop_1 \u2192 (X not prop_1 U X X not prop_1))\n}\n\n3. *FINAL:* G (not prop_1) U (prop_1 \u2192 (X not prop_1 U X X not prop_1))"}
{"id": 7000, "sentence": ["Once", "request", "assistance", "has", "occurred,", "deliver", "aid", "to", "the", "injured", "hostile", "will", "never", "occur", "again."], "tl": ["globally", "(", "get_help", "implies", "next", "globally", "not", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["deliver_aid(injured_hostile)"]], "prediction": "3. *FINAL:* F(prop_1) \u2192 (prop_2 U G(not prop_3)) FINISH"}
{"id": 2570, "sentence": ["Stay", "away", "from", "the", "nearest", "debris", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "go", "home", "holds", "infinitely", "often."], "tl": ["avoid(nearest_debris)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_debris)"], ["avoid(nearest_debris)"], ["go_home"]], "bad_trace": [["avoid(nearest_debris)"], ["avoid(nearest_debris)"], ["avoid(nearest_debris)"]], "prediction": "(let's say prop_1). The second part indicates that this state must continue \"until, from some point on, go home holds infinitely often,\" which can be represented as \"prop_2 holds infinitely often.\" Therefore, we can express this as \"stay away from the nearest debris until go home holds infinitely often.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"stay away from the nearest debris\" : \"prop_1\",\n  \"go home holds infinitely often\" : \"F(prop_2)\"\n}\n\n3. *FINAL:* prop_1 U F(prop_2)"}
{"id": 3275, "sentence": ["Whenever", "communicate", "with", "the", "injured", "hostile", "holds,", "eventually", "take", "a", "picture", "of", "injured", "civilian", "will", "hold."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "finally", "photo(injured_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["communicate(injured_hostile)"], [], ["photo(injured_civilian)"]], "bad_trace": [["communicate(injured_hostile)"], [], []], "prediction": "(prop_1)\" where \"prop_1\" represents the condition of communicating with the injured hostile. The phrase \"eventually take a picture of injured civilian will hold\" indicates that at some point in the future, a certain condition (taking a picture of the injured civilian) must be true. This can be represented as \"F(prop_2)\" where \"prop_2\" represents the action of taking a picture of the injured civilian. The entire command can be expressed as \"G(prop_1) \u2192 F(prop_2)\", meaning that if the condition of communicating with the injured hostile holds, then eventually the action of taking a picture of the injured civilian will occur.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever communicate with the injured hostile holds\" : \"G(prop_1)\",\n  \"eventually take a picture of injured civilian will hold\" : \"F(prop_2)\"\n}\n\n3. *FINAL:* G(prop_1) \u2192 F(prop_2)"}
{"id": 8561, "sentence": ["Either", "avoid", "the", "inactive", "gas", "leak", "or", "record", "unsafe", "person", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(inactive_gas_leak)", "or", "globally", "finally", "record(unsafe_person)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["avoid(inactive_gas_leak)"]], "bad_trace": [[]], "prediction": "(F) for the recording of the unsafe person, and the \"or\" operator (or) to combine the two options.\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the inactive gas leak\" : prop_1,\n  \"record unsafe person happens infinitely often\" : F(prop_2)\n}\n\n3. *FINAL:* prop_1 or F(prop_2)"}
{"id": 2587, "sentence": ["Our", "agent", "must", "eventually", "call", "for", "help", "or", "provide", "assistance", "to", "the", "safe", "rescuer."], "tl": ["finally", "(", "get_help", "or", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "    \"or\": \"or\""}
{"id": 254, "sentence": ["Deliver", "aid", "to", "the", "safe", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "take", "a", "video", "of", "safe", "civilian", "holds", "infinitely", "often."], "tl": ["deliver_aid(safe_rescuer)", "until", "(", "globally", "(", "finally", "record(safe_civilian)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["record(safe_civilian)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"]], "prediction": "(prop_1)\",\n  \"until\" : \"U\",\n  \"take a video of safe civilian\" : \"prop_2\",\n  \"holds infinitely often\" : \"F (prop_2)\"\n}\n\n3. *FINAL:* G(prop_1) U F(prop_2)"}
{"id": 8344, "sentence": ["Talk", "to", "the", "injured", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(injured_rescuer)", "and", "next", "communicate(injured_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["communicate(injured_rescuer)"]], "bad_trace": [["communicate(injured_rescuer)"], [], [], []], "prediction": "(prop_1) must hold true, with the condition that it can be delayed for at most two steps (X prop_1 or X X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n    \"Talk to the injured rescuer\" : \"prop_1\",\n    \"should always hold\" : \"G\",\n    \"with at most a two-step grace period\" : \"U\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1 or X X prop_1))"}
{"id": 2101, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "talking", "to", "the", "injured", "victim,", "then", "photograph", "flood", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(injured_victim)", ")", "implies", "globally", "finally", "photo(flood)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["get_help"], ["communicate(injured_victim)", "photo(flood)"]], "bad_trace": [["get_help"], ["communicate(injured_victim)"]], "prediction": "(prop_2 \u2192 X prop_1) (where prop_2 represents \"get help\" and prop_1 represents \"talking to the injured victim\").\n   - \"photograph flood must occur infinitely often\" translates to: G F prop_3 (where prop_3 represents \"photograph flood\").\n\n2. *Explanation dictionary* \u2013\n{\n  \"every get help is eventually followed by talking to the injured victim\": \"F(prop_2 \u2192 X prop_1)\",\n  \"photograph flood must occur infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* F(prop_2 \u2192 X prop_1)"}
{"id": 2049, "sentence": ["At", "every", "step,", "talk", "to", "the", "injured", "victim", "equals", "the", "value", "of", "take", "a", "picture", "of", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_victim)", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["communicate(injured_victim)"], ["photo(unsafe_victim)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "(prop_1 \u2194 X prop_2)"}
{"id": 285, "sentence": ["If", "avoid", "the", "inactive", "debris", "holds,", "then", "in", "the", "next", "step", "avoid", "the", "active", "unstable", "beam", "persists", "until", "give", "aid", "to", "the", "safe", "rescuer", "holds,", "or", "else", "avoid", "the", "active", "unstable", "beam", "holds", "forever."], "tl": ["avoid(inactive_debris)", "implies", "next", "(", "(", "avoid(active_unstable_beam)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["avoid(inactive_debris)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["avoid(inactive_debris)"], []], "prediction": "(where `prop_1` represents \"avoid the inactive debris holds\").\n   - \"then in the next step avoid the active unstable beam persists\" translates to `X prop_2` (where `prop_2` represents \"avoid the active unstable beam persists\").\n   - \"until give aid to the safe rescuer holds\" translates to `prop_3` (where `prop_3` represents \"give aid to the safe rescuer holds\").\n   - \"or else avoid the active unstable beam holds forever\" translates to `G prop_2` (indicating that \"avoid the active unstable beam holds\" is true globally)"}
{"id": 4021, "sentence": ["At", "every", "step,", "take", "a", "picture", "of", "safe", "rescuer", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "civilian", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(safe_rescuer)", "double_implies", "next", "photo(unsafe_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(safe_rescuer)"], ["photo(unsafe_civilian)"]], "bad_trace": [["photo(safe_rescuer)"], []], "prediction": "(at every step), the action of taking a picture of a safe rescuer (prop_1) is equivalent to the action of taking a photo of an unsafe civilian in the next step (prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step, take a picture of safe rescuer\" : \"prop_1\",\n  \"equals the value of\" : \"\u2194\",\n  \"take a photo of unsafe civilian in the next step\" : \"X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2194 X prop_2)"}
{"id": 9209, "sentence": ["Whenever", "neither", "return", "home", "nor", "talk", "to", "the", "injured", "rescuer", "holds,", "talk", "to", "the", "injured", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "communicate(injured_rescuer)", ")", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "communicate(injured_rescuer)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 1645, "sentence": ["Whenever", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "holds,", "from", "the", "next", "step", "onwards", "request", "assistance", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(impending_unstable_beam)", "implies", "next", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_unstable_beam)"], [], ["get_help"]], "bad_trace": [["avoid(impending_unstable_beam)"], [], []], "prediction": "(not prop_1 \u2192 ...)\", where \"prop_1\" represents \"go near the impending unstable beam\". The phrase \"from the next step onwards request assistance will eventually hold\" indicates that if the condition is met, then at some point in the future, \"prop_2\" (representing \"request assistance\") will be true. This can be expressed as \"F prop_2\". Therefore, the complete formula combines these two parts using the \"implies\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever do not go near the impending unstable beam holds\" : \"G (not prop_1)\",\n  \"request assistance will eventually hold\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (not prop_1 \u2192 F prop_2)"}
{"id": 6279, "sentence": ["Take", "a", "video", "of", "injured", "rescuer", "can", "only", "happen", "after", "calling", "for", "help."], "tl": ["not", "record(injured_rescuer)", "until", "get_help"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["get_help"]], "bad_trace": [["record(injured_rescuer)"], ["record(injured_rescuer)"], ["record(injured_rescuer)"]], "prediction": "(prop_1) can only happen after the event of calling for help (prop_2)"}
{"id": 4776, "sentence": ["Either", "take", "a", "picture", "of", "unstable", "beam", "or", "photograph", "unsafe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "photo(unstable_beam)", "or", "globally", "finally", "photo(unsafe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unstable_beam)"]], "bad_trace": [[]], "prediction": "(or). The phrase \"happens infinitely often\" suggests that the event occurs repeatedly over time, which can be expressed using the \"finally\" operator (F). Therefore, we can express the command as: (F prop_1) or (F prop_2)"}
{"id": 2903, "sentence": ["Return", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(prop_1 U (X prop_1 or X X prop_1))"}
{"id": 2013, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "injured", "victim,", "then", "record", "safe", "civilian", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "deliver_aid(injured_victim)", ")", "implies", "globally", "finally", "record(safe_civilian)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_victim)", "record(safe_civilian)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_victim)"]], "prediction": "3. *FINAL:* F(prop_2 \u2192 F(prop_3)) \u2192 G(F(prop_4)) FINISH"}
{"id": 5369, "sentence": ["Whenever", "call", "for", "help", "holds,", "from", "the", "next", "step", "onwards", "give", "aid", "to", "the", "safe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "get_help", "implies", "next", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["get_help"], [], []], "prediction": "(F prop_2)"}
{"id": 2047, "sentence": ["If", "begin", "recording", "injured", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "photograph", "injured", "rescuer."], "tl": ["globally", "finally", "record(injured_civilian)", "implies", "globally", "finally", "photo(injured_rescuer)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [[]], "bad_trace": [["record(injured_civilian)"]], "prediction": "(always)"}
{"id": 8818, "sentence": ["Whenever", "avoid", "the", "active", "fire", "source", "holds,", "from", "the", "next", "step", "onwards", "do", "not", "go", "near", "the", "impending", "flood", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(active_fire_source)", "implies", "next", "finally", "avoid(impending_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}}, "good_trace": [["avoid(active_fire_source)"], [], ["avoid(impending_flood)"]], "bad_trace": [["avoid(active_fire_source)"], [], []], "prediction": "(prop_1 \u2192 X (not prop_2))\", where prop_1 represents the condition of the active fire source holding, and prop_2 represents going near the impending flood. The phrase \"do not go near the impending flood will eventually hold\" indicates that if the condition is met, then it must be the case that going near the flood does not happen in the next step and continues to hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever avoid the active fire source holds\": \"G (prop_1 \u2192 X (not prop_2))\",\n  \"do not go near the impending flood\": \"not prop_2\",\n  \"will eventually hold\": \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X (not prop_2))"}
{"id": 2244, "sentence": ["From", "some", "point", "onwards,", "record", "unstable", "beam", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "record(unstable_beam)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"], [], []], "bad_trace": [["record(unstable_beam)"], [], ["record(unstable_beam)"]], "prediction": "(let's denote it as prop_1)"}
{"id": 9358, "sentence": ["This", "controller", "must", "always", "avoid", "establishing", "communication", "with", "the", "safe", "victim."], "tl": ["globally", "(", "not", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["communicate(safe_victim)"], [], []], "prediction": "(let's say prop_1)"}
{"id": 8754, "sentence": ["Whenever", "begin", "recording", "safe", "person", "and", "communicate", "with", "the", "safe", "rescuer", "are", "equal,", "communicate", "with", "the", "safe", "rescuer", "and", "record", "debris", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_person)", "double_implies", "communicate(safe_rescuer)", ")", "implies", "(", "communicate(safe_rescuer)", "double_implies", "record(debris)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(safe_person)", "communicate(safe_rescuer)", "record(debris)"]], "bad_trace": [["record(safe_person)", "communicate(safe_rescuer)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 7378, "sentence": ["Whenever", "request", "assistance", "holds,", "begin", "recording", "unsafe", "person", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(unsafe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["get_help", "record(unsafe_person)"], ["record(unsafe_person)"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1)\". The phrase \"begin recording unsafe person holds as well\" indicates that when the first condition is true, the second condition must also be true, which can be represented as \"prop_2\". Therefore, the entire command can be expressed as \"G(prop_1 \u2192 prop_2)\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"request assistance holds\" : \"prop_1\",\n  \"begin recording unsafe person holds\" : \"prop_2\"\n}\n\n3. *FINAL:* G(prop_1 \u2192 prop_2)"}
{"id": 5012, "sentence": ["Whenever", "communicate", "with", "the", "safe", "victim", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "communicate(safe_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_victim)", "get_help", "go_home"]], "bad_trace": [["communicate(safe_victim)", "get_help"]], "prediction": "   - The entire statement can be expressed as: G((prop_1 and prop_2) \u2192 (prop_2 and prop_3))."}
{"id": 5425, "sentence": ["Go", "home", "and", "give", "aid", "to", "the", "injured", "hostile", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "go_home", "and", "deliver_aid(injured_hostile)", ")", ")", "and", "globally", "(", "go_home", "or", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_hostile)"], ["go_home"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 8488, "sentence": ["If", "every", "do", "not", "go", "near", "the", "nearest", "flood", "is", "eventually", "followed", "by", "returning", "to", "base,", "then", "talk", "to", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_flood)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(nearest_flood)"], ["go_home", "communicate(injured_rescuer)"]], "bad_trace": [["avoid(nearest_flood)"], ["go_home"]], "prediction": "3. *FINAL:* G(not prop_1) \u2192 (F(prop_2) \u2192 G(prop_3)) FINISH"}
{"id": 4260, "sentence": ["Provide", "assistance", "to", "the", "safe", "hostile", "can", "only", "happen", "after", "geting", "help."], "tl": ["not", "deliver_aid(safe_hostile)", "until", "get_help"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["get_help"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "prediction": "(prop_1) can only happen after the event of getting help (prop_2)"}
{"id": 5125, "sentence": ["Either", "avoid", "the", "active", "gas", "leak", "or", "take", "a", "photo", "of", "unsafe", "person", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_gas_leak)", "or", "globally", "finally", "photo(unsafe_person)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["avoid(active_gas_leak)"]], "bad_trace": [[]], "prediction": "(taking a photo of an unsafe person) should occur repeatedly over time. Therefore, we can express this as a disjunction (or)"}
{"id": 6638, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "and", "avoid", "the", "impending", "debris", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "avoid(inactive_unstable_beam)", "and", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], ["avoid(impending_debris)"], []], "bad_trace": [["avoid(inactive_unstable_beam)", "avoid(impending_debris)"]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) FINISH"}
{"id": 4114, "sentence": ["Our", "agent", "must", "always", "avoid", "going", "back", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(G)"}
{"id": 1403, "sentence": ["Every", "begin", "recording", "injured", "civilian", "is", "directly", "followed", "by", "photographing", "gas", "leak", "in", "the", "next", "step."], "tl": ["globally", "(", "record(injured_civilian)", "implies", "next", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(injured_civilian)"], ["photo(gas_leak)"]], "bad_trace": [["record(injured_civilian)"], []], "prediction": "(prop_1) is true, it must imply that in the next step (X), the proposition for photographing a gas leak (prop_2) is also true.\n\n2. *Explanation dictionary* \u2013\n{\n    \"begin recording injured civilian\" : \"prop_1\",\n    \"photographing gas leak in the next step\" : \"X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 8976, "sentence": ["Provide", "assistance", "to", "the", "injured", "hostile", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(injured_hostile)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "(let's say prop_1) should hold true at every point in time. Therefore, we can express this as G(prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Provide assistance to the injured hostile holds at all times.\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 6727, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G)"}
{"id": 3692, "sentence": ["If", "take", "a", "photo", "of", "debris", "happens", "infinitely", "often,", "then", "so", "does", "talk", "to", "the", "injured", "victim."], "tl": ["globally", "finally", "photo(debris)", "implies", "globally", "finally", "communicate(injured_victim)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[]], "bad_trace": [["photo(debris)"]], "prediction": "(prop_1)\", indicating that the event of taking a photo of debris occurs infinitely often. The phrase \"then so does talk to the injured victim\" can be represented as \"prop_2\", indicating that talking to the injured victim also occurs infinitely often. The entire command can be expressed as an implication: if the first condition holds, then the second condition must also hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a photo of debris happens infinitely often\" : \"F (prop_1)\",\n  \"talk to the injured victim\" : \"F (prop_2)\"\n}\n\n3. *FINAL:* F (prop_1) \u2192 F (prop_2)"}
{"id": 3933, "sentence": ["Globally,", "if", "communicate", "with", "the", "injured", "victim", "occurs", "then", "finally", "photograph", "unsafe", "rescuer", "happens."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "finally", "photo(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["communicate(injured_victim)"], [], ["photo(unsafe_rescuer)"]], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "(G) if the action of \"communicating with the injured victim\" (prop_1) occurs, then \"finally\" (F) the action of \"photographing the unsafe rescuer\" (prop_2) will happen. This can be expressed as: G (prop_1 \u2192 F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"communicate with the injured victim\" : \"prop_1\",\n  \"occurs\" : \"\",\n  \"then\" : \"\",\n  \"finally\" : \"F\",\n  \"photograph unsafe rescuer\" : \"prop_2\",\n  \"happens.\" : \"\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 3376, "sentence": ["Whenever", "neither", "call", "for", "help", "nor", "go", "home", "holds,", "take", "a", "photo", "of", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not(prop_1) and not(prop_2)) \u2192 F(prop_3) FINISH"}
{"id": 4956, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "safe", "civilian", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(safe_civilian)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["photo(safe_civilian)"], [], []], "bad_trace": [["photo(safe_civilian)"], [], ["photo(safe_civilian)"]], "prediction": "3. *FINAL:* X (not prop_1) G (not prop_1) FINISH"}
{"id": 3704, "sentence": ["This", "controller", "must", "eventually,", "avoid", "staying", "away", "from", "the", "impending", "gas", "leak."], "tl": ["finally", "(", "not", "avoid(impending_gas_leak)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_gas_leak"], "args_ref": ["impending gas leak"]}}, "good_trace": [["avoid(impending_gas_leak)"], [], []], "bad_trace": [["avoid(impending_gas_leak)"], ["avoid(impending_gas_leak)"], ["avoid(impending_gas_leak)"]], "prediction": "(staying away from the impending gas leak) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F), indicating that the condition should be satisfied at some point in the future. The phrase \"avoid staying away from the impending gas leak\" can be interpreted as needing to ensure that the controller does not stay away from the gas leak, which can be expressed as \"not staying away from the gas leak.\" We can represent \"staying away from the impending gas leak\" with a proposition placeholder, say prop_1, so the final formula will be F(not prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"eventually avoid staying away from the impending gas leak\" : \"F(not prop_1)\",\n  \"staying away from the impending gas leak\" : \"prop_1\"\n}\n\n3. *FINAL:* F(not prop_1)"}
{"id": 4259, "sentence": ["Whenever", "take", "a", "video", "of", "debris", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "record", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(debris)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(debris)", "get_help", "record(unstable_beam)"]], "bad_trace": [["record(debris)", "get_help"]], "prediction": "3. *FINAL:* G((prop_1 \u2194 prop_2) \u2192 (prop_3 \u2194 prop_4)) FINISH"}
{"id": 1162, "sentence": ["Take", "a", "picture", "of", "unstable", "beam", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unstable_beam)", "and", "next", "photo(unstable_beam)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(unstable_beam)"], [], ["photo(unstable_beam)"]], "bad_trace": [["photo(unstable_beam)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 \u2192 (not prop_1 U (X prop_1 or X X prop_1))) FINISH"}
{"id": 7165, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F)"}
{"id": 7538, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "picture", "of", "injured", "victim", "and", "take", "a", "picture", "of", "debris", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(injured_victim)", "and", "photo(debris)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["photo(injured_victim)"], ["photo(debris)"], []], "bad_trace": [["photo(injured_victim)", "photo(debris)"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 9239, "sentence": ["Begin", "recording", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "record(fire_source)", "and", "next", "record(fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["record(fire_source)"], [], ["record(fire_source)"]], "bad_trace": [["record(fire_source)"], [], [], []], "prediction": "(prop_1) should hold globally (G) with the condition that it can be false for at most two steps (X prop_1 U (not prop_1)).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Begin recording fire source should always hold\" : \"G prop_1\",\n  \"with at most a two-step grace period for recovery\" : \"X prop_1 U (not prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 U (not prop_1))"}
{"id": 8822, "sentence": ["Whenever", "communicate", "with", "the", "safe", "hostile", "holds,", "go", "home", "holds", "as", "well."], "tl": ["globally", "(", "communicate(safe_hostile)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_hostile)", "go_home"], ["go_home"]], "bad_trace": [["communicate(safe_hostile)"], []], "prediction": "(for \"communicate with the safe hostile holds\"). The phrase \"go home holds as well\" indicates that when the first condition is true, the second condition (represented as \"prop_2\" for \"go home holds\") must also be true. This can be expressed using the \"implies\" operator, indicating that if the first condition is true, then the second condition must also be true globally.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever communicate with the safe hostile holds\" : \"prop_1\",\n    \"go home holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 3433, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "begin", "recording", "fire", "source", "holds,", "give", "aid", "to", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(fire_source)", ")", "implies", "finally", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "record(fire_source)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not (prop_1 or prop_2)) \u2192 F(prop_3) FINISH"}
{"id": 80, "sentence": ["If", "photograph", "flood", "holds,", "then", "in", "the", "next", "step", "get", "help", "persists", "until", "doing", "not", "go", "near", "the", "probable", "flood", "holds,", "or", "else", "get", "help", "holds", "forever."], "tl": ["photo(flood)", "implies", "next", "(", "(", "get_help", "until", "avoid(probable_flood)", ")", "or", "globally", "get_help", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], ["get_help"], ["get_help"], ["avoid(probable_flood)"]], "bad_trace": [["photo(flood)"], []], "prediction": "(where prop_1 represents \"photograph flood holds\").\n   - \"then in the next step get help persists\" translates to \"X prop_2\" (where prop_2 represents \"get help persists\").\n   - \"until doing not go near the probable flood holds\" translates to \"prop_3\" (where prop_3 represents \"doing not go near the probable flood holds\") and is combined with the \"until\" operator.\n   - \"or else get help holds forever\" translates to \"G prop_2\" (where prop_2 represents \"get help holds\")"}
{"id": 1314, "sentence": ["Whenever", "take", "a", "video", "of", "safe", "civilian", "and", "provide", "assistance", "to", "the", "injured", "victim", "are", "equal,", "provide", "assistance", "to", "the", "injured", "victim", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_civilian)", "double_implies", "deliver_aid(injured_victim)", ")", "implies", "(", "deliver_aid(injured_victim)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_civilian)", "deliver_aid(injured_victim)", "go_home"]], "bad_trace": [["record(safe_civilian)", "deliver_aid(injured_victim)"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 5212, "sentence": ["If", "every", "take", "a", "picture", "of", "injured", "person", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "talk", "to", "the", "safe", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(injured_person)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(safe_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["photo(injured_person)"], ["go_home", "communicate(safe_hostile)"]], "bad_trace": [["photo(injured_person)"], ["go_home"]], "prediction": "(prop_1 \u2192 F prop_2)\",\n  \"talk to the safe hostile must occur infinitely often\" : \"G prop_3\"\n}\n\n3. *FINAL:* (G (prop_1 \u2192 F prop_2) \u2192 G prop_3)"}
{"id": 3654, "sentence": ["If", "every", "request", "assistance", "is", "eventually", "followed", "by", "delivering", "aid", "to", "the", "injured", "rescuer,", "then", "stay", "away", "from", "the", "inactive", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "deliver_aid(injured_rescuer)", ")", "implies", "globally", "finally", "avoid(inactive_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_rescuer)", "avoid(inactive_unstable_beam)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_rescuer)"]], "prediction": "3. *FINAL:* (prop_1 \u2192 F(prop_2)) \u2192 G(F(prop_3)) FINISH"}
{"id": 2148, "sentence": ["The", "robot", "must", "always", "have", "either", "return", "to", "base", "or", "communicate", "with", "the", "injured", "hostile."], "tl": ["globally", "(", "go_home", "or", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["go_home"]], "bad_trace": [["go_home"], [], []], "prediction": "(globally), the robot should either be in a state where it returns to base or in a state where it communicates with the injured hostile. This can be expressed using the globally operator (G) combined with a disjunction (or) of the two propositions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The robot must always have either return to base or communicate with the injured hostile.\" : \"G (prop_1 or prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 5712, "sentence": ["The", "system", "must", "always", "avoid", "doing", "not", "go", "near", "the", "inactive", "debris."], "tl": ["globally", "(", "not", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(inactive_debris)"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 9964, "sentence": ["The", "system", "must", "always", "maintain", "both", "go", "home", "and", "communicate", "with", "the", "safe", "rescuer."], "tl": ["globally", "(", "go_home", "and", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home", "communicate(safe_rescuer)"], ["go_home", "communicate(safe_rescuer)"], ["go_home", "communicate(safe_rescuer)"]], "bad_trace": [["go_home"], ["go_home"], ["communicate(safe_rescuer)"]], "prediction": "(go home and communicate with the safe rescuer) must hold true at all times. This translates to a globally quantified statement where both propositions are combined using the logical \"and\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must always maintain both go home and communicate with the safe rescuer.\" : \"G (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4246, "sentence": ["Globally,", "if", "call", "for", "help", "occurs", "then", "finally", "take", "a", "picture", "of", "unsafe", "victim", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["get_help"], [], ["photo(unsafe_victim)"]], "bad_trace": [["get_help"], [], []], "prediction": "(G) if a \"call for help\" occurs (prop_1), then \"finally\" (F) a \"picture of unsafe victim\" happens (prop_2). This can be expressed as a globally quantified implication: if prop_1 is true, then eventually prop_2 will be true.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"call for help occurs\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally\" : \"F\",\n  \"take a picture of unsafe victim happens.\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 4089, "sentence": ["Globally,", "if", "establish", "communication", "with", "the", "injured", "rescuer", "occurs", "then", "finally", "stay", "away", "from", "the", "active", "unstable", "beam", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["avoid(active_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "(eventually), we must stay away from the beam, represented as F(prop_2).\n\n   Therefore, the entire command can be expressed as: G(prop_1 \u2192 F(prop_2)).\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"Globally\": \"G\",\n  \"if establish communication with the injured rescuer occurs\": \"prop_1\",\n  \"then finally stay away from the active unstable beam happens\": \"F(prop_2)\"\n}\n```\n\n3. *FINAL:* G(prop_1 \u2192 F(prop_2))"}
{"id": 8747, "sentence": ["The", "system", "must", "always", "avoid", "returning", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(not prop_1), where prop_1 represents the state of \"returning to base.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must always avoid returning to base.\" : \"G(not prop_1)\"\n}\n\n3. *FINAL:* G(not prop_1)"}
{"id": 5083, "sentence": ["Globally,", "if", "take", "a", "photo", "of", "flood", "occurs", "then", "finally", "go", "back", "to", "base", "happens."], "tl": ["globally", "(", "photo(flood)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], [], ["go_home"]], "bad_trace": [["photo(flood)"], [], []], "prediction": "(G) if a certain condition occurs (taking a photo of a flood, represented as prop_1), then eventually (F) another condition must happen (going back to base, represented as prop_2). This can be expressed as: G (prop_1 \u2192 F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"take a photo of flood occurs\" : \"prop_1\",\n  \"then finally go back to base happens.\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 4011, "sentence": ["Globally,", "if", "do", "not", "go", "near", "the", "impending", "flood", "occurs", "then", "finally", "talk", "to", "the", "injured", "victim", "happens."], "tl": ["globally", "(", "avoid(impending_flood)", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(impending_flood)"], [], ["communicate(injured_victim)"]], "bad_trace": [["avoid(impending_flood)"], [], []], "prediction": "(G). The phrase \"if do not go near the impending flood occurs\" can be interpreted as a condition that leads to the next part of the statement. This is represented as \"not prop_1\" (where prop_1 represents \"go near the impending flood\"). The phrase \"then finally talk to the injured victim happens\" indicates that if the condition is met, then eventually (F) \"talk to the injured victim\" (represented as prop_2) will occur. Therefore, the entire command can be structured as: G (not prop_1 \u2192 F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n    \"Globally,\" : \"G\",\n    \"if\" : \"\u2192\",\n    \"do not go near the impending flood occurs\" : \"not prop_1\",\n    \"then finally talk to the injured victim happens.\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (not prop_1 \u2192 F prop_2)"}
{"id": 4271, "sentence": ["If", "request", "assistance", "happens", "infinitely", "often,", "then", "so", "does", "return", "to", "base."], "tl": ["globally", "finally", "get_help", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["get_help"]], "prediction": "(represented by `prop_1`) occurs infinitely often, then the event of returning to base (represented by `prop_2`) will also occur infinitely often. In temporal logic, \"infinitely often\" can be expressed using the \"finally\" operator (F) in conjunction with the \"globally\" operator (G)"}
{"id": 3956, "sentence": ["If", "every", "do", "not", "go", "near", "the", "nearest", "fire", "source", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "nearest", "unstable", "beam,", "then", "record", "unsafe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "implies", "finally", "avoid(nearest_unstable_beam)", ")", "implies", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_unstable_beam)", "record(unsafe_victim)"]], "bad_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_unstable_beam)"]], "prediction": "(G) for the action of not going near the fire source (prop_1).\n   - \"is eventually followed by doing not go near the nearest unstable beam\" indicates that if the first condition holds, then at some point in the future (F), it must be followed by another condition of not going near the unstable beam (prop_2).\n   - \"then record unsafe victim must occur infinitely often\" means that if the previous conditions are satisfied, then the recording of unsafe victims (prop_3) must happen infinitely often (G F prop_3).\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"every do not go near the nearest fire source\": \"G prop_1\",\n  \"is eventually followed by doing not go near the nearest unstable beam\": \"G prop_1 \u2192 F prop_2\",\n  \"then record unsafe victim must occur infinitely often\": \"G (G prop_1 \u2192 F prop_2) \u2192 G F prop_3\"\n}\n```\n\n3. *FINAL:* G (prop_1)"}
{"id": 8262, "sentence": ["You", "must", "eventually,", "avoid", "returning", "to", "base."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F)"}
{"id": 6491, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "rescuer", "nor", "take", "a", "picture", "of", "unstable", "beam", "holds,", "record", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_rescuer)", "and", "photo(unstable_beam)", ")", "implies", "finally", "record(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "photo(unstable_beam)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 1096, "sentence": ["At", "every", "step,", "give", "aid", "to", "the", "injured", "hostile", "equals", "the", "value", "of", "take", "a", "picture", "of", "flood", "in", "the", "next", "step."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "double_implies", "next", "photo(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["photo(flood)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "(prop_1) is true if taking a picture of the flood (prop_2) is true in the next step.\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step, give aid to the injured\": \"G (prop_1)\",\n  \"equals the value of\": \"\u2192\",\n  \"take a picture of flood in the next step\": \"X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 9586, "sentence": ["This", "controller", "must", "always", "have", "either", "take", "a", "picture", "of", "safe", "victim", "or", "establish", "communication", "with", "the", "injured", "victim."], "tl": ["globally", "(", "photo(safe_victim)", "or", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(safe_victim)"], ["communicate(injured_victim)"], ["photo(safe_victim)"]], "bad_trace": [["photo(safe_victim)"], [], []], "prediction": "(globally) have one of two conditions: either it takes a picture of a safe victim (represented by prop_1) or it establishes communication with the injured victim (represented by prop_2). This translates to a globally quantified expression that combines these two conditions with a logical \"or\".\n\n2. *Explanation dictionary* \u2013\n{\n    \"always have either take a picture of safe victim or establish communication with the injured victim\" : \"G (prop_1 or prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 5762, "sentence": ["If", "establish", "communication", "with", "the", "injured", "victim", "holds,", "then", "in", "the", "next", "step", "get", "help", "persists", "until", "going", "home", "holds,", "or", "else", "get", "help", "holds", "forever."], "tl": ["communicate(injured_victim)", "implies", "next", "(", "(", "get_help", "until", "go_home", ")", "or", "globally", "get_help", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_victim)"], ["get_help"], ["get_help"], ["go_home"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* (prop_1 \u2192 (X prop_2 U prop_3)) or (not prop_1 \u2192 G prop_2) FINISH"}
{"id": 4773, "sentence": ["Record", "unsafe", "victim", "and", "deliver", "aid", "to", "the", "safe", "hostile", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(unsafe_victim)", "and", "deliver_aid(safe_hostile)", ")", ")", "and", "globally", "(", "record(unsafe_victim)", "or", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(unsafe_victim)"], ["deliver_aid(safe_hostile)"], ["record(unsafe_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 64, "sentence": ["The", "system", "must", "Eventually,", "both", "deliver", "aid", "to", "the", "safe", "rescuer", "and", "give", "aid", "to", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["finally", "(", "deliver_aid(safe_rescuer)", "and", "deliver_aid(safe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "deliver_aid(safe_victim)"]], "bad_trace": [[], [], []], "prediction": "(F) achieve two conditions simultaneously: delivering aid to the safe rescuer (prop_1) and giving aid to the safe victim (prop_2). The phrase \"both ... and ...\" indicates a conjunction (and) of these two conditions. The use of \"eventually\" indicates that this must happen at some point in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must Eventually, both deliver aid to the safe rescuer and give aid to the safe victim hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 9702, "sentence": ["This", "controller", "must", "always", "have", "either", "take", "a", "photo", "of", "fire", "source", "or", "take", "a", "picture", "of", "safe", "victim."], "tl": ["globally", "(", "photo(fire_source)", "or", "photo(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(fire_source)"], ["photo(safe_victim)"], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], []], "prediction": "(globally) have one of two options: either take a photo of a fire source or take a picture of a safe victim. This translates to a globally quantified expression that captures the requirement of having one of the two propositions true at all times.\n\n2. *Explanation dictionary* \u2013\n{\n    \"This controller must always have either take a photo of fire source or take a picture of safe victim.\" : \"G (prop_1 or prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 8389, "sentence": ["From", "some", "point", "onwards,", "deliver", "aid", "to", "the", "safe", "hostile", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "deliver_aid(safe_hostile)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], ["deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* F (prop_1 and prop_2) U (G not prop_3) FINISH"}
{"id": 7900, "sentence": ["Whenever", "request", "assistance", "holds,", "stay", "away", "from", "the", "inactive", "flood", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "get_help", "implies", "next", "(", "next", "(", "next", "avoid(inactive_flood)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["get_help"], [], [], ["avoid(inactive_flood)"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* prop_1 \u2192 X X X not prop_2 FINISH"}
{"id": 7575, "sentence": ["When", "communicate", "with", "the", "injured", "rescuer", "happens,", "communicate", "with", "the", "injured", "hostile", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "(", "communicate(injured_hostile)", "or", "next", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["communicate(injured_rescuer)", "communicate(injured_hostile)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "3. *FINAL:* prop_1 \u2192 (prop_2 or X prop_2) FINISH"}
{"id": 1435, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "call", "for", "help", "holds,", "take", "a", "video", "of", "unsafe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "get_help", ")", "implies", "finally", "record(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["go_home", "get_help"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 9143, "sentence": ["Globally,", "if", "establish", "communication", "with", "the", "safe", "rescuer", "occurs", "then", "finally", "go", "back", "to", "base", "happens."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_rescuer)"], [], ["go_home"]], "bad_trace": [["communicate(safe_rescuer)"], [], []], "prediction": "(G) if \"establish communication with the safe rescuer\" (prop_1) occurs, then \"finally go back to base\" (prop_2) happens. This translates to a formula where the condition of establishing communication leads to the eventuality of going back to base.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"establish communication with the safe rescuer\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally go back to base\" : \"F(prop_2)\"\n}\n\n3. *FINAL:* G(prop_1 \u2192 F(prop_2))"}
{"id": 9778, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "and", "do", "not", "go", "near", "the", "impending", "debris", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "avoid(impending_debris)", ")", ")", "and", "globally", "(", "deliver_aid(injured_victim)", "or", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["deliver_aid(injured_victim)"], ["avoid(impending_debris)"], ["deliver_aid(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or not prop_2) U (not (prop_1 and prop_2)) FINISH"}
{"id": 6975, "sentence": ["The", "system", "must", "always", "avoid", "requesting", "assistance."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "(G) to indicate that the condition holds at all times. We can represent \"avoiding requesting assistance\" as the negation of a proposition that represents requesting assistance, which we can denote as prop_1. Therefore, the complete formula will be G(not prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must always avoid requesting assistance.\" : \"G(not prop_1)\"\n}\n\n3. *FINAL:* G(not prop_1)"}
{"id": 8781, "sentence": ["Either", "do", "not", "go", "near", "the", "active", "flood", "or", "take", "a", "video", "of", "injured", "rescuer", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_flood)", "or", "globally", "finally", "record(injured_rescuer)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_flood"], "args_ref": ["active flood"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(active_flood)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* (not prop_1) or (F prop_2) FINISH"}
{"id": 556, "sentence": ["Once", "photograph", "debris", "has", "occurred,", "provide", "assistance", "to", "the", "injured", "rescuer", "will", "never", "occur", "again."], "tl": ["globally", "(", "photo(debris)", "implies", "next", "globally", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["photo(debris)"], [], []], "bad_trace": [["photo(debris)"], [], ["deliver_aid(injured_rescuer)"]], "prediction": "(prop_2 \u2192 not prop_2)"}
{"id": 7610, "sentence": ["Every", "communicate", "with", "the", "injured", "hostile", "is", "directly", "followed", "by", "photographing", "flood", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "next", "photo(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["communicate(injured_hostile)"], ["photo(flood)"]], "bad_trace": [["communicate(injured_hostile)"], []], "prediction": "(prop_1), then in the next step (X), photographing the flood (prop_2) must occur.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Every communicate with the injured hostile\" : \"G (prop_1 \u2192 X prop_2)\",\n  \"is directly followed by photographing flood in the next step.\" : \"X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 5247, "sentence": ["The", "system", "must", "eventually,", "avoid", "establishing", "communication", "with", "the", "safe", "hostile."], "tl": ["finally", "(", "not", "communicate(safe_hostile)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(safe_hostile)"], [], []], "bad_trace": [["communicate(safe_hostile)"], ["communicate(safe_hostile)"], ["communicate(safe_hostile)"]], "prediction": "(F) the system must not establish communication with the safe hostile (not prop_1)"}
{"id": 6065, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "active", "gas", "leak", "must", "hold", "until", "calling", "for", "help", "does,", "or", "else", "do", "not", "go", "near", "the", "active", "gas", "leak", "holds", "forever."], "tl": ["(", "avoid(active_gas_leak)", "until", "get_help", ")", "or", "globally", "avoid(active_gas_leak)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["This", "controller", "must", "prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(active_gas_leak)"], ["avoid(active_gas_leak)"], ["get_help"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (not prop_1) U prop_2 or G (not prop_1) FINISH"}
{"id": 6902, "sentence": ["Whenever", "neither", "take", "a", "video", "of", "debris", "nor", "begin", "recording", "unstable", "beam", "holds,", "take", "a", "picture", "of", "unsafe", "person", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(debris)", "and", "record(unstable_beam)", ")", "implies", "finally", "photo(unsafe_person)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(debris)", "record(unstable_beam)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 9495, "sentence": ["You", "must", "always", "maintain", "both", "give", "aid", "to", "the", "injured", "rescuer", "and", "record", "fire", "source."], "tl": ["globally", "(", "deliver_aid(injured_rescuer)", "and", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "record(fire_source)"], ["deliver_aid(injured_rescuer)", "record(fire_source)"], ["deliver_aid(injured_rescuer)", "record(fire_source)"]], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["record(fire_source)"]], "prediction": "(\"You\") must consistently perform two actions: maintaining aid to the injured rescuer and recording the fire source. The phrase \"must always\" indicates that these actions should hold globally (at all times). Therefore, we can express this as a conjunction of the two actions, both of which must be true globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always maintain both give aid to the injured rescuer and record fire source\" : \"G (prop_1 and prop_2)\",\n  \"give aid to the injured rescuer\" : \"prop_1\",\n  \"record fire source\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 8128, "sentence": ["If", "every", "take", "a", "picture", "of", "debris", "is", "eventually", "followed", "by", "staying", "away", "from", "the", "impending", "unstable", "beam,", "then", "provide", "assistance", "to", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(debris)", "implies", "finally", "avoid(impending_unstable_beam)", ")", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(debris)"], ["avoid(impending_unstable_beam)", "deliver_aid(injured_victim)"]], "bad_trace": [["photo(debris)"], ["avoid(impending_unstable_beam)"]], "prediction": "(taking a picture of debris followed by staying away from an unstable beam) holds, then another condition (providing assistance to the injured victim) must occur infinitely often. The phrase \"every take a picture of debris is eventually followed by staying away from the impending unstable beam\" can be expressed as a temporal implication, and the requirement for providing assistance infinitely often can be expressed using the globally operator.\n\n2. *Explanation dictionary* \u2013\n{\n    \"every take a picture of debris is eventually followed by staying away from the impending unstable beam\" : \"prop_1 \u2192 F prop_2\",\n    \"provide assistance to the injured victim must occur infinitely often\" : \"G prop_3\"\n}\n\n3. *FINAL:* (prop_1 \u2192 F prop_2)"}
{"id": 7996, "sentence": ["This", "controller", "must", "eventually,", "avoid", "recording", "safe", "civilian."], "tl": ["finally", "(", "not", "record(safe_civilian)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(safe_civilian)"], [], []], "bad_trace": [["record(safe_civilian)"], ["record(safe_civilian)"], ["record(safe_civilian)"]], "prediction": "(recording safe civilian) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F), indicating that the condition should be satisfied at some point in the future. The action of avoiding recording a safe civilian can be represented as a negation of the proposition that denotes recording a safe civilian (not prop_1)"}
{"id": 4560, "sentence": ["Take", "a", "photo", "of", "unsafe", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unsafe_victim)", "and", "next", "photo(unsafe_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unsafe_victim)"], [], ["photo(unsafe_victim)"]], "bad_trace": [["photo(unsafe_victim)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_1 U (X prop_1))) FINISH"}
{"id": 945, "sentence": ["If", "return", "to", "base", "holds", "and", "do", "not", "go", "near", "the", "nearest", "gas", "leak", "holds", "next,", "then", "give", "aid", "to", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "avoid(nearest_gas_leak)", "implies", "next", "next", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home"], ["avoid(nearest_gas_leak)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["go_home"], ["avoid(nearest_gas_leak)"], []], "prediction": "(where `prop_1` represents the condition of returning to base).\n   - \"and do not go near the nearest gas leak holds next\" translates to `not prop_2` (where `prop_2` represents the condition of going near the gas leak) and is applied in the next step, so we use `X not prop_2`.\n   - \"then give aid to the safe rescuer holds in the step after that\" translates to `prop_3` (where `prop_3` represents giving aid to the safe rescuer)"}
{"id": 6367, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "deliver", "aid", "to", "the", "safe", "hostile", "and", "avoid", "the", "impending", "fire", "source."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "and", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"], ["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"], ["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["avoid(impending_fire_source)"]], "prediction": "(prop_1)\",\n  \"and avoid the impending fire source\": \"and prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 9791, "sentence": ["Whenever", "avoid", "the", "impending", "flood", "holds,", "from", "the", "next", "step", "onwards", "record", "safe", "person", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(impending_flood)", "implies", "next", "finally", "record(safe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["avoid(impending_flood)"], [], ["record(safe_person)"]], "bad_trace": [["avoid(impending_flood)"], [], []], "prediction": "(prop_1 \u2192 X prop_2)\", where prop_1 represents \"avoid the impending flood\" and prop_2 represents \"record safe person\". The phrase \"from the next step onwards\" suggests that the action of recording a safe person will happen in the next step, which is captured by the \"X\" operator. Finally, \"will eventually hold\" indicates that the recording of a safe person will eventually be true, represented by \"F prop_2\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the impending flood holds\": \"prop_1\",\n  \"record safe person\": \"prop_2\",\n  \"from the next step onwards\": \"X prop_2\",\n  \"will eventually hold\": \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 2635, "sentence": ["Establish", "communication", "with", "the", "injured", "hostile", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "deliver", "aid", "to", "the", "safe", "hostile", "holds", "infinitely", "often."], "tl": ["communicate(injured_hostile)", "until", "(", "globally", "(", "finally", "deliver_aid(safe_hostile)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["communicate(injured_hostile)"]], "prediction": "(prop_1)\",\n  \"until\" : \"U\",\n  \"deliver aid to the safe hostile\" : \"prop_2\",\n  \"infinitely often\" : \"F (prop_2)\"\n}\n\n3. *FINAL:* G (prop_1) U F (prop_2)"}
{"id": 8309, "sentence": ["Whenever", "photograph", "fire", "source", "and", "get", "help", "are", "equal,", "get", "help", "and", "begin", "recording", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(fire_source)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(fire_source)", "get_help", "record(unstable_beam)"]], "bad_trace": [["photo(fire_source)", "get_help"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_2 and prop_3"}
{"id": 21, "sentence": ["In", "this", "task,", "return", "home,", "then", "begin", "recording", "gas", "leak."], "tl": ["(", "go_home", "until", "record(gas_leak)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home", "record(gas_leak)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* prop_1 \u2192 X prop_2 FINISH"}
{"id": 8679, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "begin", "recording", "safe", "victim", "holds", "infinitely", "often."], "tl": ["deliver_aid(injured_victim)", "until", "(", "globally", "(", "finally", "record(safe_victim)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(safe_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "(prop_2)\",\n    \"from some point on, begin recording safe victim holds infinitely often\": \"F prop_3\"\n}\n```\n\n3. *FINAL:* prop_1 U (prop_2)"}
{"id": 7537, "sentence": ["The", "system", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "unstable", "beam."], "tl": ["finally", "(", "not", "avoid(nearest_unstable_beam)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["avoid(nearest_unstable_beam)"], [], []], "bad_trace": [["avoid(nearest_unstable_beam)"], ["avoid(nearest_unstable_beam)"], ["avoid(nearest_unstable_beam)"]], "prediction": "(staying away from the nearest unstable beam) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F)"}
{"id": 2790, "sentence": ["Whenever", "neither", "communicate", "with", "the", "injured", "hostile", "nor", "call", "for", "help", "holds,", "avoid", "the", "probable", "flood", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(injured_hostile)", "and", "get_help", ")", "implies", "finally", "avoid(probable_flood)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["communicate(injured_hostile)", "get_help"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not (prop_1 or prop_2) \u2192 F(prop_3)) FINISH"}
{"id": 8808, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "probable", "unstable", "beam,", "then", "communicate", "with", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "avoid(probable_unstable_beam)", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["go_home"], ["avoid(probable_unstable_beam)", "communicate(injured_rescuer)"]], "bad_trace": [["go_home"], ["avoid(probable_unstable_beam)"]], "prediction": "(go_home \u2192 F (not go_near_probable_unstable_beam))\". The second part of the implication states that \"communicate with the injured rescuer must occur infinitely often\", which translates to \"G F communicate_with_injured_rescuer\". Therefore, the entire command can be expressed as an implication where the first part leads to the second.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n    \"every go home is eventually followed by doing not go near the probable unstable beam\": \"G (go_home \u2192 F (not go_near_probable_unstable_beam))\",\n    \"communicate with the injured rescuer must occur infinitely often\": \"G F communicate_with_injured_rescuer\"\n}\n```\n\n3. *FINAL:* G (go_home \u2192 F (not go_near_probable_unstable_beam))"}
{"id": 8828, "sentence": ["Deliver", "aid", "to", "the", "safe", "rescuer", "must", "hold", "until", "go", "home", "does,", "or", "else", "deliver", "aid", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["(", "deliver_aid(safe_rescuer)", "until", "go_home", ")", "or", "globally", "deliver_aid(safe_rescuer)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["go_home"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* prop_1 U prop_2 or G prop_1 FINISH"}
{"id": 2845, "sentence": ["Whenever", "request", "assistance", "and", "avoid", "the", "inactive", "debris", "are", "equal,", "avoid", "the", "inactive", "debris", "and", "return", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "avoid(inactive_debris)", ")", "implies", "(", "avoid(inactive_debris)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "avoid(inactive_debris)", "go_home"]], "bad_trace": [["get_help", "avoid(inactive_debris)"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 446, "sentence": ["You", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "gas", "leak."], "tl": ["finally", "(", "not", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["avoid(nearest_gas_leak)"], [], []], "bad_trace": [["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"]], "prediction": "(staying away from the nearest gas leak) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F), indicating that the action of avoiding must occur at some point. The action of avoiding staying away from the nearest gas leak can be represented as a proposition placeholder (prop_1)"}
{"id": 3384, "sentence": ["Whenever", "record", "unsafe", "civilian", "holds,", "take", "a", "picture", "of", "safe", "victim", "holds", "as", "well."], "tl": ["globally", "(", "record(unsafe_civilian)", "implies", "photo(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(unsafe_civilian)", "photo(safe_victim)"], ["photo(safe_victim)"]], "bad_trace": [["record(unsafe_civilian)"], []], "prediction": "(represented by prop_1) is true, then at the same time, the proposition \"take a picture of safe victim\" (represented by prop_2) must also be true. This can be expressed using the globally operator (G) to indicate that this condition holds at all times. The implication operator (\u2192) is used to express that the truth of prop_1 leads to the truth of prop_2.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever record unsafe civilian holds\" : \"prop_1\",\n    \"take a picture of safe victim holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 430, "sentence": ["You", "must", "eventually,", "avoid", "delivering", "aid", "to", "the", "injured", "victim."], "tl": ["finally", "(", "not", "deliver_aid(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "(\"You\") to take an action (\"avoid delivering aid\") at some point in the future. The phrase \"eventually\" suggests that this action must occur at least once in the future, which corresponds to the temporal operator \"finally\" (F)"}
{"id": 2098, "sentence": ["From", "some", "point", "onwards,", "do", "not", "go", "near", "the", "nearest", "unstable", "beam", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "avoid(nearest_unstable_beam)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["avoid(nearest_unstable_beam)"], [], []], "bad_trace": [["avoid(nearest_unstable_beam)"], [], ["avoid(nearest_unstable_beam)"]], "prediction": "(G) to indicate that the condition must always be satisfied after a certain point. The phrase \"never occurs again\" implies that the condition should hold true forever, which aligns with the use of the globally operator.\n\n2. *Explanation dictionary* \u2013\n{\n    \"From some point onwards\" : \"X\",\n    \"do not go near the nearest unstable beam\" : \"not prop_1\",\n    \"never occurs again\" : \"G\"\n}\n\n3. *FINAL:* X (not prop_1) U G (not prop_1)"}
{"id": 2391, "sentence": ["Go", "home", "can", "only", "happen", "after", "delivering", "aid", "to", "the", "injured", "hostile."], "tl": ["not", "go_home", "until", "deliver_aid(injured_hostile)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[], [], ["deliver_aid(injured_hostile)"]], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(prop_1) can only happen after \"delivering aid to the injured hostile\" (prop_2)"}
{"id": 6714, "sentence": ["If", "photograph", "safe", "person", "holds,", "then", "in", "the", "next", "step", "deliver", "aid", "to", "the", "injured", "hostile", "persists", "until", "geting", "help", "holds,", "or", "else", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["photo(safe_person)", "implies", "next", "(", "(", "deliver_aid(injured_hostile)", "until", "get_help", ")", "or", "globally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["photo(safe_person)"], ["deliver_aid(injured_hostile)"], ["deliver_aid(injured_hostile)"], ["get_help"]], "bad_trace": [["photo(safe_person)"], []], "prediction": "3. *FINAL:* `prop_1 \u2192 (X prop_2 \u2227 (prop_3 U prop_4) \u2228 G prop_5)` FINISH"}
{"id": 692, "sentence": ["Either", "talk", "to", "the", "safe", "hostile", "happens", "infinitely", "often,", "or", "return", "home", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "communicate(safe_hostile)", "or", "next", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_hostile)"]], "bad_trace": [[], []], "prediction": "(F) combined with \"globally\" (G) to indicate that the event occurs repeatedly. The phrase \"in the next step\" is represented by the \"next\" operator (X). Therefore, the overall structure is a disjunction (or) of these two scenarios.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Either talk to the safe hostile happens infinitely often\" : \"F(prop_1)\",\n    \"or return home happens in the next step\" : \"X(prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) or X(prop_2)"}
{"id": 5483, "sentence": ["You", "must", "always", "avoid", "staying", "away", "from", "the", "impending", "debris."], "tl": ["globally", "(", "not", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(impending_debris)"], [], []], "prediction": "(\"You\") must consistently avoid a certain condition (\"staying away from the impending debris\"). The phrase \"always\" suggests that this condition must hold globally, meaning it should be true at all times. Therefore, we can represent this as \"G (not prop_1)\", where \"prop_1\" represents the condition of \"staying away from the impending debris\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"always avoid staying away from the impending debris\" : \"G (not prop_1)\"\n}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 4057, "sentence": ["Record", "safe", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "go", "home", "holds", "infinitely", "often."], "tl": ["record(safe_rescuer)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_rescuer)"], ["record(safe_rescuer)"], ["go_home"]], "bad_trace": [["record(safe_rescuer)"], ["record(safe_rescuer)"], ["record(safe_rescuer)"]], "prediction": "(where prop_1 represents the action of holding).\n   - \"until\" indicates a temporal relationship, which we will use with \"go home\" (represented by prop_2).\n   - \"from some point on\" implies that after the condition of holding is satisfied, the rescuer can go home.\n   - \"holds infinitely often\" means that the condition of going home must be true at infinitely many points in time.\n\n2. *Explanation dictionary*:\n   {\n     \"rescuer must keep holding\" : \"prop_1\",\n     \"go home\" : \"prop_2\",\n     \"until\" : \"U\",\n     \"holds infinitely often\" : \"G F prop_2\"\n   }\n\n3. *FINAL:* prop_1 U (prop_2)"}
{"id": 558, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "take", "a", "picture", "of", "safe", "victim", "holds,", "get", "help", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "photo(safe_victim)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "photo(safe_victim)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 6451, "sentence": ["Return", "to", "base", "holds", "at", "all", "times."], "tl": ["globally", "go_home"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"]], "bad_trace": [["go_home"], []], "prediction": "(let's denote it as prop_1) must be true globally, meaning it should always be true in every state of the system. Therefore, we can express this as G(prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Return to base holds at all times\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 4800, "sentence": ["If", "every", "take", "a", "picture", "of", "unsafe", "civilian", "is", "eventually", "followed", "by", "going", "home,", "then", "begin", "recording", "unsafe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(unsafe_civilian)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unsafe_civilian)"], ["go_home", "record(unsafe_victim)"]], "bad_trace": [["photo(unsafe_civilian)"], ["go_home"]], "prediction": "3. *FINAL:* (prop_1 \u2192 F(prop_2)) \u2192 G(F(prop_3)) FINISH"}
{"id": 5036, "sentence": ["At", "every", "step,", "go", "home", "equals", "the", "value", "of", "provide", "assistance", "to", "the", "injured", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "go_home", "double_implies", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_victim)"]], "bad_trace": [["go_home"], []], "prediction": "(prop_1 \u2194 X prop_2)"}
{"id": 3836, "sentence": ["Whenever", "neither", "communicate", "with", "the", "injured", "rescuer", "nor", "begin", "recording", "injured", "civilian", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(injured_rescuer)", "and", "record(injured_civilian)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "record(injured_civilian)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 9090, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "(prop_1) should hold globally (G), and if it does not hold, it must be the case that it will hold within two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Request assistance should always hold\" : \"G prop_1\",\n  \"with at most a two-step grace period for recovery\" : \"not prop_1 U (X prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1))"}
{"id": 912, "sentence": ["Whenever", "record", "injured", "civilian", "holds,", "eventually", "provide", "assistance", "to", "the", "safe", "hostile", "will", "hold."], "tl": ["globally", "(", "record(injured_civilian)", "implies", "finally", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(injured_civilian)"], [], ["deliver_aid(safe_hostile)"]], "bad_trace": [["record(injured_civilian)"], [], []], "prediction": "(G). The phrase \"eventually provide assistance to the safe\" indicates that at some point in the future, assistance must be provided, which can be represented using the finally operator (F). The phrase \"hostile will hold\" suggests a condition that must also be true in the future, which can be represented with the next operator (X)"}
{"id": 462, "sentence": ["If", "take", "a", "picture", "of", "fire", "source", "holds", "and", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "next,", "then", "do", "not", "go", "near", "the", "active", "debris", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "photo(fire_source)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "avoid(active_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [["photo(fire_source)"], ["deliver_aid(injured_hostile)"], ["avoid(active_debris)"]], "bad_trace": [["photo(fire_source)"], ["deliver_aid(injured_hostile)"], []], "prediction": "3. *FINAL:* (prop_1 and prop_2 and X(prop_3)) \u2192 not X(prop_4) FINISH"}
{"id": 4212, "sentence": ["Communicate", "with", "the", "injured", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(injured_victim)", "and", "next", "communicate(injured_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["communicate(injured_victim)"], [], ["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_victim)"], [], [], []], "prediction": "(prop_1 U (X prop_1))\", where \"prop_1\" represents the communication action.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Communicate with the injured victim\" : \"prop_1\",\n    \"should always hold\" : \"G\",\n    \"with at most a two-step grace period for recovery\" : \"U (X prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1))"}
{"id": 9395, "sentence": ["Whenever", "record", "flood", "and", "begin", "recording", "safe", "rescuer", "are", "equal,", "begin", "recording", "safe", "rescuer", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(flood)", "double_implies", "record(safe_rescuer)", ")", "implies", "(", "record(safe_rescuer)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(flood)", "record(safe_rescuer)", "go_home"]], "bad_trace": [["record(flood)", "record(safe_rescuer)"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2 \u2192 (prop_2 and prop_4)) FINISH"}
{"id": 2860, "sentence": ["Whenever", "call", "for", "help", "holds,", "return", "home", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "go_home"], ["go_home"]], "bad_trace": [["get_help"], []], "prediction": "(G). The phrase \"return home holds as well\" indicates that when the first condition is true, the second condition must also be true. This can be expressed using the implication operator (\u2192). Therefore, the entire command can be translated to: \"If call for help holds, then return home holds.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever call for help holds\" : \"G prop_1\",\n  \"return home holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 9425, "sentence": ["Take", "a", "photo", "of", "safe", "person", "and", "establish", "communication", "with", "the", "safe", "victim", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "photo(safe_person)", "and", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(safe_person)"], ["communicate(safe_victim)"], []], "bad_trace": [["photo(safe_person)", "communicate(safe_victim)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 5529, "sentence": ["At", "every", "step,", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "equals", "the", "value", "of", "provide", "assistance", "to", "the", "injured", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(inactive_gas_leak)", "double_implies", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_gas_leak)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_gas_leak)"], []], "prediction": "(G) that states the negation (not) of the proposition indicating proximity to the gas leak (prop_1). The phrase \"equals the value of provide assistance to the injured victim in the next step\" suggests that the action of providing assistance (prop_2) is contingent on the next step, but since the command focuses on the action of not going near the leak, we will not include this part in the final formula.\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step\" : \"G\",\n  \"do not go near the inactive gas leak\" : \"not prop_1\"\n}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 5429, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(which we can denote as a proposition, say prop_1), the condition of going back to the base (denoted as prop_2) should never happen again. This can be formulated as: if we are at prop_1, then globally (G) it is not the case that prop_2 occurs.\n\n2. *Explanation dictionary* \u2013\n{\n  \"some point onwards\" : \"prop_1\",\n  \"go back to base\" : \"prop_2\",\n  \"never occurs again\" : \"not prop_2\"\n}\n\n3. *FINAL:* prop_1 \u2192 G (not prop_2)"}
{"id": 1594, "sentence": ["Provide", "assistance", "to", "the", "injured", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "next", "deliver_aid(injured_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], ["deliver_aid(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_1 U (X prop_1))) FINISH"}
{"id": 5854, "sentence": ["Whenever", "neither", "get", "help", "nor", "return", "home", "holds,", "deliver", "aid", "to", "the", "safe", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 F (prop_3) FINISH"}
{"id": 6525, "sentence": ["Globally,", "if", "talk", "to", "the", "injured", "rescuer", "occurs", "then", "finally", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["avoid(impending_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "(G) if the action of \"talking to the injured rescuer\" (represented by prop_1) occurs, then \"finally\" (F) it should be the case that \"not going near the impending unstable beam\" (represented by prop_2) happens. This can be expressed as a globally quantified implication.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\": \"G\",\n  \"if\": \"\u2192\",\n  \"talk to the injured rescuer occurs\": \"prop_1\",\n  \"then\": \"\u2192\",\n  \"finally do not go near the impending unstable beam happens\": \"F not prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F not prop_2)"}
{"id": 9772, "sentence": ["In", "this", "task,", "give", "aid", "to", "the", "safe", "hostile,", "then", "begin", "recording", "fire", "source."], "tl": ["(", "deliver_aid(safe_hostile)", "until", "record(fire_source)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(fire_source)"]], "bad_trace": [[], [], []], "prediction": "(which we can represent as a proposition, say prop_1), and then beginning to record the fire source (which we can represent as another proposition, say prop_2)"}
{"id": 7918, "sentence": ["Whenever", "call", "for", "help", "and", "take", "a", "picture", "of", "unstable", "beam", "are", "equal,", "take", "a", "picture", "of", "unstable", "beam", "and", "stay", "away", "from", "the", "inactive", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "photo(unstable_beam)", ")", "implies", "(", "photo(unstable_beam)", "double_implies", "avoid(inactive_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["get_help", "photo(unstable_beam)", "avoid(inactive_flood)"]], "bad_trace": [["get_help", "photo(unstable_beam)"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_3 and prop_4)) FINISH"}
{"id": 3592, "sentence": ["If", "take", "a", "video", "of", "gas", "leak", "holds", "and", "take", "a", "picture", "of", "unstable", "beam", "holds", "next,", "then", "return", "to", "base", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(gas_leak)", "and", "next", "photo(unstable_beam)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)"], ["photo(unstable_beam)"], ["go_home"]], "bad_trace": [["record(gas_leak)"], ["photo(unstable_beam)"], []], "prediction": "(prop_1) and \"take a picture of unstable beam holds next\" (prop_2) must be true. The consequence states that \"return to base holds in the step after that\" (prop_3). This can be expressed as: if both conditions are true, then the consequence will hold in the next step.\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a video of gas leak holds\": \"prop_1\",\n  \"take a picture of unstable beam holds next\": \"X prop_2\",\n  \"return to base holds in the step after that\": \"X prop_3\"\n}\n\n3. *FINAL:* (prop_1 and X prop_2)"}
{"id": 7877, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "take", "a", "picture", "of", "unstable", "beam", "and", "take", "a", "photo", "of", "unsafe", "victim."], "tl": ["globally", "(", "photo(unstable_beam)", "and", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unstable_beam)", "photo(unsafe_victim)"], ["photo(unstable_beam)", "photo(unsafe_victim)"], ["photo(unstable_beam)", "photo(unsafe_victim)"]], "bad_trace": [["photo(unstable_beam)"], ["photo(unstable_beam)"], ["photo(unsafe_victim)"]], "prediction": "(G), indicating that these conditions should hold true at all times. The conjunction \"both...and\" indicates that both conditions must be satisfied simultaneously.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Our agent must always maintain both take a picture of unstable beam and take a photo of unsafe victim.\" : \"G (prop_1 and prop_2)\",\n  \"take a picture of unstable beam\" : \"prop_1\",\n  \"take a photo of unsafe victim\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 1394, "sentence": ["If", "every", "stay", "away", "from", "the", "nearest", "fire", "source", "is", "eventually", "followed", "by", "requesting", "assistance,", "then", "return", "home", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_fire_source)"], ["get_help", "go_home"]], "bad_trace": [["avoid(nearest_fire_source)"], ["get_help"]], "prediction": "(prop_1 \u2192 F prop_2)\" where prop_1 represents \"stay away from the nearest fire source\" and prop_2 represents \"requesting assistance.\" The consequence states that \"return home must occur infinitely often,\" which can be expressed as \"G F prop_3,\" where prop_3 represents \"return home.\" The entire command can be combined using implication.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"every stay away from the nearest fire source is eventually followed by requesting assistance\": \"G (prop_1 \u2192 F prop_2)\",\n  \"return home must occur infinitely often\": \"G F prop_3\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 726, "sentence": ["If", "every", "do", "not", "go", "near", "the", "active", "gas", "leak", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "rescuer,", "then", "provide", "assistance", "to", "the", "safe", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(active_gas_leak)", "implies", "finally", "communicate(injured_rescuer)", ")", "implies", "globally", "finally", "deliver_aid(safe_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["avoid(active_gas_leak)"], ["communicate(injured_rescuer)", "deliver_aid(safe_hostile)"]], "bad_trace": [["avoid(active_gas_leak)"], ["communicate(injured_rescuer)"]], "prediction": "3. *FINAL:* (prop_1 \u2192 (F(prop_2) U F(prop_3))) G F(prop_3) FINISH"}
{"id": 4514, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(which we can denote as a proposition, say prop_1), the condition of going back to the base (denoted as prop_2) should never happen again. This can be formulated as: if we are in a state where we have gone back to the base, it should not happen again in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"some point onwards\" : \"G prop_1\",\n  \"go back to base\" : \"prop_2\",\n  \"never occurs again\" : \"G not prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 G not prop_2)"}
{"id": 6424, "sentence": ["Once", "give", "aid", "to", "the", "injured", "victim", "has", "occurred,", "record", "injured", "victim", "will", "never", "occur", "again."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "globally", "not", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], [], ["record(injured_victim)"]], "prediction": "(prop_1) leads to the condition that recording the injured victim (prop_2) will not happen in the future. Thus, we can express this as: prop_1 \u2192 G(not prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Once give aid to the injured victim has occurred\": \"prop_1\",\n  \"record injured victim will never occur again\": \"G(not prop_2)\"\n}\n\n3. *FINAL:* prop_1 \u2192 G(not prop_2)"}
{"id": 6550, "sentence": ["The", "system", "must", "Eventually,", "both", "return", "home", "and", "give", "aid", "to", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "deliver_aid(safe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_victim)"]], "bad_trace": [[], [], []], "prediction": "(F) two conditions must hold simultaneously: the system must return home (prop_1) and give aid to the safe victim (prop_2). The phrase \"both... and...\" indicates a conjunction (and) of these two conditions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both return home and give aid to the safe victim hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 5846, "sentence": ["Whenever", "talk", "to", "the", "safe", "hostile", "and", "avoid", "the", "nearest", "flood", "are", "equal,", "avoid", "the", "nearest", "flood", "and", "give", "aid", "to", "the", "injured", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "communicate(safe_hostile)", "double_implies", "avoid(nearest_flood)", ")", "implies", "(", "avoid(nearest_flood)", "double_implies", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_hostile)", "avoid(nearest_flood)", "deliver_aid(injured_rescuer)"]], "bad_trace": [["communicate(safe_hostile)", "avoid(nearest_flood)"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2) \u2192 (prop_2 and prop_3) FINISH"}
{"id": 4750, "sentence": ["Record", "unstable", "beam", "holds", "at", "all", "times."], "tl": ["globally", "record(unstable_beam)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"]], "bad_trace": [["record(unstable_beam)"], []], "prediction": "(G)"}
{"id": 3065, "sentence": ["Whenever", "establish", "communication", "with", "the", "injured", "hostile", "holds,", "eventually", "request", "assistance", "will", "hold."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_hostile)"], [], ["get_help"]], "bad_trace": [["communicate(injured_hostile)"], [], []], "prediction": "(G). The phrase \"eventually request assistance will hold\" indicates that at some point in the future, the proposition for requesting assistance will be true, which can be represented using the finally operator (F)"}
{"id": 4504, "sentence": ["Record", "debris", "must", "hold", "until", "go", "home", "does,", "or", "else", "record", "debris", "holds", "forever."], "tl": ["(", "record(debris)", "until", "go_home", ")", "or", "globally", "record(debris)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(debris)"], ["record(debris)"], ["go_home"]], "bad_trace": [[], []], "prediction": "(going home) does not occur, the second condition (recording debris) must hold globally (forever)"}
{"id": 9987, "sentence": ["If", "provide", "assistance", "to", "the", "injured", "hostile", "holds", "and", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "holds", "next,", "then", "deliver", "aid", "to", "the", "safe", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "and", "next", "avoid(inactive_gas_leak)", "implies", "next", "next", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["avoid(inactive_gas_leak)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["deliver_aid(injured_hostile)"], ["avoid(inactive_gas_leak)"], []], "prediction": "3. *FINAL:* (prop_1 and not prop_2) \u2192 X prop_3 FINISH"}
{"id": 1143, "sentence": ["From", "some", "point", "onwards,", "call", "for", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "(G)"}
{"id": 1125, "sentence": ["At", "every", "step,", "photograph", "injured", "person", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(injured_person)", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(injured_person)"], ["photo(unsafe_victim)"]], "bad_trace": [["photo(injured_person)"], []], "prediction": "(G) to indicate that this condition must be true at all times, and the next operator (X) to refer to the state in the next step.\n\n2. *Explanation dictionary* \u2013\n{\n    \"At every step, photograph injured person equals the value of take a photo of unsafe victim in the next step.\" : \"G (prop_1 \u2194 X prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 \u2194 X prop_2)"}
{"id": 1212, "sentence": ["The", "robot", "must", "eventually", "return", "home", "or", "request", "assistance."], "tl": ["finally", "(", "go_home", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "  \"or\" : \"or\""}
{"id": 2421, "sentence": ["Whenever", "return", "home", "holds,", "from", "the", "next", "step", "onwards", "begin", "recording", "unsafe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "go_home", "implies", "next", "finally", "record(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["go_home"], [], ["record(unsafe_rescuer)"]], "bad_trace": [["go_home"], [], []], "prediction": "(prop_2 U F prop_2)"}
{"id": 7558, "sentence": ["This", "controller", "must", "eventually,", "avoid", "talking", "to", "the", "safe", "victim."], "tl": ["finally", "(", "not", "communicate(safe_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"], [], []], "bad_trace": [["communicate(safe_victim)"], ["communicate(safe_victim)"], ["communicate(safe_victim)"]], "prediction": "(talking to the safe victim) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F)"}
{"id": 6122, "sentence": ["Both", "photograph", "unstable", "beam", "and", "return", "to", "base", "hold", "at", "every", "step."], "tl": ["globally", "(", "photo(unstable_beam)", "and", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unstable_beam)", "go_home"]], "bad_trace": [["photo(unstable_beam)"], []], "prediction": "(1) the photograph of the unstable beam must be true, and (2) the action of returning to the base must also be true. Since both conditions need to be satisfied at every step, we use the globally operator (G) to express that both conditions hold continuously.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Both photograph unstable beam\" : \"prop_1\",\n  \"and return to base\" : \"prop_2\",\n  \"at every step\" : \"G\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4034, "sentence": ["If", "talk", "to", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "begin", "recording", "unsafe", "person", "persists", "until", "talking", "to", "the", "injured", "victim", "holds,", "or", "else", "begin", "recording", "unsafe", "person", "holds", "forever."], "tl": ["communicate(injured_rescuer)", "implies", "next", "(", "(", "record(unsafe_person)", "until", "communicate(injured_victim)", ")", "or", "globally", "record(unsafe_person)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["communicate(injured_rescuer)"], ["record(unsafe_person)"], ["record(unsafe_person)"], ["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "(where `prop_1` represents \"talk to the injured rescuer\").\n   - \"then in the next step begin recording unsafe person\" translates to `X prop_2` (where `prop_2` represents \"begin recording unsafe person\").\n   - \"persists until talking to the injured victim holds\" translates to `prop_3 U prop_1` (where `prop_3` represents \"recording unsafe person holds\" and `prop_1` represents \"talking to the injured victim\").\n   - \"or else begin recording unsafe person holds forever\" translates to `G prop_2` (where `prop_2` represents \"begin recording unsafe person holds forever\")"}
{"id": 7450, "sentence": ["Take", "a", "video", "of", "unstable", "beam", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "record(unstable_beam)", "and", "next", "record(unstable_beam)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"], [], ["record(unstable_beam)"]], "bad_trace": [["record(unstable_beam)"], [], [], []], "prediction": "(prop_1) must hold globally (G), and if it does not hold, it must eventually (F) hold again within two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Take a video of unstable beam\" : \"prop_1\",\n  \"should always hold\" : \"G\",\n  \"with at most a two-step grace period for recovery\" : \"X prop_1 U X prop_1\"\n}\n\n3. *FINAL:* G(prop_1 U X prop_1)"}
{"id": 472, "sentence": ["Whenever", "go", "home", "holds,", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home", "deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], []], "prediction": "(prop_1 \u2192 prop_2)"}
{"id": 265, "sentence": ["Get", "help", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "get_help", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"], []], "bad_trace": [["get_help", "communicate(safe_hostile)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 9379, "sentence": ["From", "some", "point", "onwards,", "go", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "3. *FINAL:* F prop_1 U G not prop_1 FINISH"}
{"id": 7729, "sentence": ["At", "every", "step,", "begin", "recording", "fire", "source", "equals", "the", "value", "of", "take", "a", "picture", "of", "injured", "rescuer", "in", "the", "next", "step."], "tl": ["globally", "(", "record(fire_source)", "double_implies", "next", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(fire_source)"], ["photo(injured_rescuer)"]], "bad_trace": [["record(fire_source)"], []], "prediction": "(the fire source equals the value of taking a picture of an injured rescuer) and the action (begin recording). The phrase \"at every step\" indicates that this condition and action should hold globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step\" : \"G\",\n  \"begin recording\" : \"prop_1\",\n  \"fire source equals the value of taking a picture of injured rescuer in the next step\" : \"prop_2 \u2192 X prop_3\"\n}\n\n3. *FINAL:* G (prop_2 \u2192 X prop_3 \u2192 prop_1)"}
{"id": 2481, "sentence": ["Globally,", "if", "deliver", "aid", "to", "the", "injured", "victim", "occurs", "then", "finally", "do", "not", "go", "near", "the", "inactive", "debris", "happens."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "finally", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], ["avoid(inactive_debris)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], []], "prediction": "(prop_1) and the consequent is the eventual negation of going near the inactive debris (not prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"deliver aid to the injured victim occurs\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally do not go near the inactive debris happens.\" : \"F(not prop_2)\"\n}\n\n3. *FINAL:* G(prop_1 \u2192 F(not prop_2))"}
{"id": 1617, "sentence": ["You", "must", "eventually", "communicate", "with", "the", "injured", "rescuer", "or", "get", "help."], "tl": ["finally", "(", "communicate(injured_rescuer)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["communicate(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(F) for both outcomes, combined with the \"or\" operator (or)"}
{"id": 2220, "sentence": ["Whenever", "deliver", "aid", "to", "the", "injured", "hostile", "and", "go", "back", "to", "base", "are", "equal,", "go", "back", "to", "base", "and", "begin", "recording", "safe", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_hostile)", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "record(safe_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(injured_hostile)", "go_home", "record(safe_rescuer)"]], "bad_trace": [["deliver_aid(injured_hostile)", "go_home"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_3 and prop_4)) FINISH"}
{"id": 6482, "sentence": ["If", "do", "not", "go", "near", "the", "active", "fire", "source", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "unsafe", "civilian", "persists", "until", "delivering", "aid", "to", "the", "injured", "hostile", "holds,", "or", "else", "take", "a", "picture", "of", "unsafe", "civilian", "holds", "forever."], "tl": ["avoid(active_fire_source)", "implies", "next", "(", "(", "photo(unsafe_civilian)", "until", "deliver_aid(injured_hostile)", ")", "or", "globally", "photo(unsafe_civilian)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["avoid(active_fire_source)"], ["photo(unsafe_civilian)"], ["photo(unsafe_civilian)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["avoid(active_fire_source)"], []], "prediction": "(where prop_1 represents \"go near the active fire source\").\n   - \"then in the next step take a picture of unsafe civilian persists\" translates to \"X prop_2\" (where prop_2 represents \"take a picture of unsafe civilian\").\n   - \"until delivering aid to the injured hostile holds\" translates to \"prop_3\" (where prop_3 represents \"delivering aid to the injured hostile\").\n   - \"or else take a picture of unsafe civilian holds forever\" translates to \"G prop_2\" (indicating that taking a picture of unsafe civilian holds globally)"}
{"id": 5642, "sentence": ["Request", "assistance", "must", "hold", "until", "go", "home", "does,", "or", "else", "request", "assistance", "holds", "forever."], "tl": ["(", "get_help", "until", "go_home", ")", "or", "globally", "get_help"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], ["get_help"], ["go_home"]], "bad_trace": [[], []], "prediction": "(prop_1) must hold until the action of going home (prop_2) occurs. The \"or else\" part indicates that if going home does not happen, the request for assistance will continue indefinitely, which can be represented as \"globally\" (G)"}
{"id": 2732, "sentence": ["Whenever", "return", "home", "and", "do", "not", "go", "near", "the", "probable", "debris", "are", "equal,", "do", "not", "go", "near", "the", "probable", "debris", "and", "photograph", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "avoid(probable_debris)", ")", "implies", "(", "avoid(probable_debris)", "double_implies", "photo(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "avoid(probable_debris)", "photo(safe_victim)"]], "bad_trace": [["go_home", "avoid(probable_debris)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (not prop_2 and prop_3)) FINISH"}
{"id": 4626, "sentence": ["This", "controller", "must", "always", "avoid", "going", "back", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 8938, "sentence": ["If", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds", "and", "record", "unsafe", "rescuer", "holds", "next,", "then", "communicate", "with", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(nearest_gas_leak)", "and", "next", "record(unsafe_rescuer)", "implies", "next", "next", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["avoid(nearest_gas_leak)"], ["record(unsafe_rescuer)"], ["communicate(injured_hostile)"]], "bad_trace": [["avoid(nearest_gas_leak)"], ["record(unsafe_rescuer)"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 120, "sentence": ["Provide", "assistance", "to", "the", "safe", "hostile", "and", "request", "assistance", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "deliver_aid(safe_hostile)", "and", "finally", "get_help"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_hostile)"], ["get_help"]], "bad_trace": [[], [], []], "prediction": "(F)"}
{"id": 6062, "sentence": ["Whenever", "take", "a", "video", "of", "injured", "rescuer", "holds,", "eventually", "go", "back", "to", "base", "will", "hold."], "tl": ["globally", "(", "record(injured_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(injured_rescuer)"], [], ["go_home"]], "bad_trace": [["record(injured_rescuer)"], [], []], "prediction": "(prop_1)\", where \"prop_1\" represents the action of taking a video of an injured rescuer. The phrase \"eventually go back to base will hold\" indicates that if the first condition is true, then at some point in the future, the action of going back to base (represented by \"prop_2\") will occur. This can be expressed as \"F(prop_2)\". Therefore, the entire command can be translated into the formula: \"G(prop_1) \u2192 F(prop_2)\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever take a video of injured rescuer holds\" : \"G(prop_1)\",\n  \"eventually go back to base will hold\" : \"F(prop_2)\"\n}\n\n3. *FINAL:* G(prop_1) \u2192 F(prop_2)"}
{"id": 4821, "sentence": ["The", "robot", "must", "always", "avoid", "doing", "not", "go", "near", "the", "probable", "unstable", "beam."], "tl": ["globally", "(", "not", "avoid(probable_unstable_beam)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(probable_unstable_beam)"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 6485, "sentence": ["Our", "agent", "must", "always", "avoid", "delivering", "aid", "to", "the", "safe", "hostile."], "tl": ["globally", "(", "not", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [[], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], []], "prediction": "(delivering aid) in a particular condition (to the safe hostile)"}
{"id": 2496, "sentence": ["Whenever", "talk", "to", "the", "safe", "victim", "holds,", "talk", "to", "the", "safe", "rescuer", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "next", "(", "next", "(", "next", "communicate(safe_rescuer)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_victim)"], [], [], ["communicate(safe_rescuer)"]], "bad_trace": [["communicate(safe_victim)"], [], [], []], "prediction": "(prop_1 \u2192 X X X prop_2)"}
{"id": 7096, "sentence": ["Take", "a", "picture", "of", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(fire_source)", "and", "next", "photo(fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"], [], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], [], []], "prediction": "(not prop_1), then it must be satisfied in the next two steps (prop_1 must hold within the next two steps).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Take a picture of fire source\" : \"prop_1\",\n  \"should always hold\" : \"G\",\n  \"with at most a two-step grace period for recovery\" : \"not prop_1 \u2192 (X prop_1 U X X prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1 U X X prop_1))"}
{"id": 2796, "sentence": ["Every", "avoid", "the", "active", "flood", "is", "directly", "followed", "by", "avoid", "the", "nearest", "fire", "source", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(active_flood)", "implies", "next", "avoid(nearest_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_flood"], "args_ref": ["active flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["avoid(active_flood)"], ["avoid(nearest_fire_source)"]], "bad_trace": [["avoid(active_flood)"], []], "prediction": "(let's say `prop_1`) is true, then in the next step (`X`), the proposition representing avoiding the nearest fire source (let's say `prop_2`)"}
{"id": 3820, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "rescuer", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "probable", "gas", "leak,", "then", "talk", "to", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "avoid(probable_gas_leak)", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], ["avoid(probable_gas_leak)", "communicate(injured_rescuer)"]], "bad_trace": [["communicate(safe_rescuer)"], ["avoid(probable_gas_leak)"]], "prediction": "3. *FINAL:* (F(prop_1) \u2192 F(not prop_2)) \u2192 G(prop_3) FINISH"}
{"id": 6016, "sentence": ["The", "system", "must", "eventually,", "avoid", "begining", "recording", "injured", "civilian."], "tl": ["finally", "(", "not", "record(injured_civilian)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["record(injured_civilian)"], [], []], "bad_trace": [["record(injured_civilian)"], ["record(injured_civilian)"], ["record(injured_civilian)"]], "prediction": "(eventually), the system should not begin recording injured civilians. We can represent \"avoid beginning recording injured civilian\" as \"not prop_1\" (where prop_1 represents the action of beginning to record injured civilians)"}
{"id": 4516, "sentence": ["Whenever", "get", "help", "holds,", "begin", "recording", "fire", "source", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["get_help", "record(fire_source)"], ["record(fire_source)"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1)\". The phrase \"begin recording fire source holds as well\" indicates that when the first condition is true, the second condition must also be true, which can be represented as \"prop_2\". Therefore, the entire command can be expressed as \"G (prop_1 \u2192 prop_2)\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever get help holds\" : \"G (prop_1)\",\n  \"begin recording fire source holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 9129, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "fire", "source", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(fire_source)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"], [], []], "bad_trace": [["photo(fire_source)"], [], ["photo(fire_source)"]], "prediction": "(which we can denote as \"X\" for the next step), the proposition representing taking a picture of the fire source (let's say prop_1) should never occur again. This can be expressed as \"X (prop_1 \u2192 G not prop_1)\", meaning that if we take a picture of the fire source, it should not happen again in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"some point onwards\" : \"X\",\n  \"take a picture of fire source\" : \"prop_1\",\n  \"never occurs again\" : \"G not prop_1\"\n}\n\n3. *FINAL:* X (prop_1 \u2192 G not prop_1)"}
{"id": 8705, "sentence": ["From", "some", "point", "onwards,", "go", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "3. *FINAL:* F prop_1 \u2192 G not prop_1 FINISH"}
{"id": 1174, "sentence": ["If", "get", "help", "ever", "holds,", "give", "aid", "to", "the", "safe", "victim", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "get_help", ")", "implies", "(", "not", "get_help", "until", "(", "deliver_aid(safe_victim)", "and", "not", "get_help", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_victim)"], ["get_help"]], "bad_trace": [["get_help"]], "prediction": "(G prop_3 \u2192 prop_2)"}
{"id": 5043, "sentence": ["The", "system", "must", "Eventually,", "both", "call", "for", "help", "and", "take", "a", "picture", "of", "unsafe", "rescuer", "hold", "simultaneously."], "tl": ["finally", "(", "get_help", "and", "photo(unsafe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["get_help", "photo(unsafe_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(F) satisfy two conditions simultaneously: it must call for help (prop_1) and take a picture of an unsafe rescuer (prop_2). The phrase \"both ... and ...\" indicates a conjunction (and) of these two conditions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both call for help and take a picture of unsafe rescuer simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 7762, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "safe", "rescuer,", "then", "stay", "away", "from", "the", "probable", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "deliver_aid(safe_rescuer)", ")", "implies", "globally", "finally", "avoid(probable_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["go_home"], ["deliver_aid(safe_rescuer)", "avoid(probable_gas_leak)"]], "bad_trace": [["go_home"], ["deliver_aid(safe_rescuer)"]], "prediction": "(\"If every go home is eventually followed by give aid to the safe rescuer\") and the consequent (\"then stay away from the probable gas leak must occur infinitely often\"). The antecedent can be expressed as a condition that if \"go home\" happens, it will eventually lead to \"give aid to the safe rescuer\". The consequent states that \"stay away from the probable gas leak\" must happen infinitely often, which can be expressed using the \"globally\" operator.\n\n2. *Explanation dictionary*:\n```json\n{\n    \"every go home is eventually followed by give aid to the safe rescuer\": \"G (prop_1 \u2192 F prop_2)\",\n    \"stay away from the probable gas leak must occur infinitely often\": \"G F prop_3\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 5192, "sentence": ["If", "take", "a", "photo", "of", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "avoid", "the", "probable", "flood", "persists", "until", "going", "back", "to", "base", "holds,", "or", "else", "avoid", "the", "probable", "flood", "holds", "forever."], "tl": ["photo(safe_victim)", "implies", "next", "(", "(", "avoid(probable_flood)", "until", "go_home", ")", "or", "globally", "avoid(probable_flood)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["photo(safe_victim)"], ["avoid(probable_flood)"], ["avoid(probable_flood)"], ["go_home"]], "bad_trace": [["photo(safe_victim)"], []], "prediction": "(until going back to base holds)"}
{"id": 1088, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "establish", "communication", "with", "the", "injured", "hostile", "and", "return", "to", "base", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "communicate(injured_hostile)", "and", "go_home", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_hostile)"], ["go_home"], []], "bad_trace": [["communicate(injured_hostile)", "go_home"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 2431, "sentence": ["If", "return", "to", "base", "holds", "and", "talk", "to", "the", "safe", "victim", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "communicate(safe_victim)", "implies", "next", "next", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["go_home"], ["communicate(safe_victim)"], []], "prediction": "(where `prop_1` represents the condition of returning to base).\n   - \"and talk to the safe victim holds next\" translates to `prop_2` (where `prop_2` represents the condition of talking to the safe victim) and is qualified by the \"next\" operator, indicating that this condition must hold in the next step.\n   - The entire conditional statement can be expressed as `prop_1 and X(prop_2)`.\n   - \"then deliver aid to the injured hostile holds in the step after that\" translates to `prop_3` (where `prop_3` represents the condition of delivering aid to the injured hostile) and is qualified by the \"next\" operator again, indicating that this condition must hold in the step after the next step, which can be expressed as `X(prop_3)`.\n\n2. *Explanation dictionary*:\n   {\n     \"return to base holds\": \"prop_1\",\n     \"talk to the safe victim holds next\": \"X(prop_2)"}
{"id": 5421, "sentence": ["The", "system", "must", "Please", "give", "aid", "to", "the", "safe", "hostile", "and", "then", "record", "fire", "source."], "tl": ["(", "deliver_aid(safe_hostile)", "until", "record(fire_source)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(fire_source)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* prop_1 U X prop_2 FINISH"}
{"id": 4906, "sentence": ["Take", "a", "picture", "of", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "photo(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(safe_victim)"]], "bad_trace": [["photo(safe_victim)"], []], "prediction": "3. *FINAL:* G prop_1 FINISH"}
{"id": 9505, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "unstable", "beam", "nor", "take", "a", "picture", "of", "gas", "leak", "holds,", "communicate", "with", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "photo(gas_leak)", ")", "implies", "finally", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(unstable_beam)", "photo(gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 F prop_3 FINISH"}
{"id": 7142, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "record", "unsafe", "civilian", "and", "call", "for", "help", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "record(unsafe_civilian)", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["record(unsafe_civilian)"], ["get_help"], []], "bad_trace": [["record(unsafe_civilian)", "get_help"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 7346, "sentence": ["Either", "call", "for", "help", "or", "return", "home", "happens", "infinitely", "often."], "tl": ["globally", "finally", "get_help", "or", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [[]], "prediction": "(F) in conjunction with the \"or\" operator. Thus, we can express this as: F(prop_1) or F(prop_2), where prop_1 represents \"call for help\" and prop_2 represents \"return home\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"call for help\" : \"prop_1\",\n  \"return home\" : \"prop_2\",\n  \"infinitely often\" : \"F\"\n}\n\n3. *FINAL:* F(prop_1) or F(prop_2)"}
{"id": 6885, "sentence": ["If", "take", "a", "photo", "of", "unstable", "beam", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "injured", "rescuer", "persists", "until", "talking", "to", "the", "injured", "victim", "holds,", "or", "else", "take", "a", "picture", "of", "injured", "rescuer", "holds", "forever."], "tl": ["photo(unstable_beam)", "implies", "next", "(", "(", "photo(injured_rescuer)", "until", "communicate(injured_victim)", ")", "or", "globally", "photo(injured_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["photo(unstable_beam)"], ["photo(injured_rescuer)"], ["photo(injured_rescuer)"], ["communicate(injured_victim)"]], "bad_trace": [["photo(unstable_beam)"], []], "prediction": "(where `prop_1` represents \"take a photo of unstable beam holds\").\n   - \"then in the next step take a picture of injured rescuer persists\" translates to `X prop_2` (where `prop_2` represents \"take a picture of injured rescuer\").\n   - \"until talking to the injured victim holds\" translates to `U prop_3` (where `prop_3` represents \"talking to the injured victim\").\n   - \"or else take a picture of injured rescuer holds forever\" translates to `G prop_2` (indicating that if the first condition is not met, then `prop_2` must hold globally)"}
{"id": 7590, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "taking", "a", "video", "of", "injured", "victim,", "then", "take", "a", "photo", "of", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "record(injured_victim)", ")", "implies", "globally", "finally", "photo(unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], ["record(injured_victim)", "photo(unstable_beam)"]], "bad_trace": [["get_help"], ["record(injured_victim)"]], "prediction": "(prop_1 \u2192 F prop_2)\", where prop_1 represents \"every call for help\" and prop_2 represents \"taking a video of injured victim.\" The second part, \"then take a photo of unstable beam must occur infinitely often,\" translates to \"G F prop_3,\" where prop_3 represents \"taking a photo of unstable beam.\" The entire command can be combined using implication.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every call for help\" : \"prop_1\",\n  \"is eventually followed by taking a video of injured victim\" : \"F prop_2\",\n  \"then take a photo of unstable beam must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 1567, "sentence": ["If", "every", "request", "assistance", "is", "eventually", "followed", "by", "going", "home,", "then", "talk", "to", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["go_home", "communicate(injured_hostile)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "3. *FINAL:* F(prop_1 \u2192 F(prop_2)) \u2192 G(prop_3) FINISH"}
{"id": 9603, "sentence": ["Globally,", "if", "stay", "away", "from", "the", "active", "fire", "source", "occurs", "then", "finally", "do", "not", "go", "near", "the", "active", "gas", "leak", "happens."], "tl": ["globally", "(", "avoid(active_fire_source)", "implies", "finally", "avoid(active_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["avoid(active_fire_source)"], [], ["avoid(active_gas_leak)"]], "bad_trace": [["avoid(active_fire_source)"], [], []], "prediction": "(staying away from the active fire source) occurs, then eventually (finally) another condition (not going near the active gas leak) should hold. We can represent \"stay away from the active fire source\" as prop_1 and \"go near the active gas leak\" as prop_2. The phrase \"do not go near the active gas leak\" translates to \"not prop_2\". Thus, the overall structure is: globally (G), if (\u2192) prop_1 occurs, then finally (F) not prop_2 holds.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"stay away from the active fire source occurs\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally\" : \"F\",\n  \"do not go near the active gas leak happens.\" : \"not prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F (not prop_2))"}
{"id": 2901, "sentence": ["Go", "home", "holds", "at", "all", "times."], "tl": ["globally", "go_home"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"]], "bad_trace": [["go_home"], []], "prediction": "(prop_1), where prop_1 represents the action of going home.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Go home holds at all times.\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 9575, "sentence": ["If", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds,", "then", "in", "the", "next", "step", "return", "to", "base", "persists", "until", "delivering", "aid", "to", "the", "safe", "victim", "holds,", "or", "else", "return", "to", "base", "holds", "forever."], "tl": ["avoid(impending_fire_source)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(safe_victim)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_fire_source)"], ["go_home"], ["go_home"], ["deliver_aid(safe_victim)"]], "bad_trace": [["avoid(impending_fire_source)"], []], "prediction": "(where prop_1 represents \"go near the impending fire source\").\n   - \"then in the next step return to base persists\" translates to \"X prop_2\" (where prop_2 represents \"return to base\").\n   - \"until delivering aid to the safe victim holds\" translates to \"U prop_3\" (where prop_3 represents \"delivering aid to the safe victim\").\n   - \"or else return to base holds forever\" translates to \"G prop_2\" (indicating that if the first condition is not met, then returning to base must hold globally)"}
{"id": 2780, "sentence": ["The", "system", "must", "Eventually,", "both", "establish", "communication", "with", "the", "injured", "rescuer", "and", "go", "home", "hold", "simultaneously."], "tl": ["finally", "(", "communicate(injured_rescuer)", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "go_home"]], "bad_trace": [[], [], []], "prediction": "(prop_1 and prop_2)"}
{"id": 7205, "sentence": ["If", "return", "to", "base", "happens", "infinitely", "often,", "then", "so", "does", "do", "not", "go", "near", "the", "active", "fire", "source."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "avoid(active_fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "(prop_1)\",\n    \"do not go near the active fire source\" : \"not prop_2\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(not prop_2)"}
{"id": 9176, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "go", "back", "to", "base", "holds,", "provide", "assistance", "to", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* not (prop_1 or prop_2) \u2192 F prop_3 FINISH"}
{"id": 9718, "sentence": ["If", "call", "for", "help", "holds,", "then", "in", "the", "next", "step", "give", "aid", "to", "the", "safe", "rescuer", "persists", "until", "photographing", "gas", "leak", "holds,", "or", "else", "give", "aid", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "deliver_aid(safe_rescuer)", "until", "photo(gas_leak)", ")", "or", "globally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["photo(gas_leak)"]], "bad_trace": [["get_help"], []], "prediction": "(X prop_2 U prop_4)"}
{"id": 4935, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], []], "prediction": "(let's say prop_1)"}
{"id": 6154, "sentence": ["Call", "for", "help", "and", "talk", "to", "the", "safe", "hostile", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "get_help", "and", "finally", "communicate(safe_hostile)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"]], "bad_trace": [[], [], []], "prediction": "(F). We can denote \"call for help\" as prop_1 and \"talk to the safe\" as prop_2.\n\n2. *Explanation dictionary* \u2013\n{\n  \"call for help\": \"prop_1\",\n  \"talk to the safe\": \"prop_2\"\n}\n\n3. *FINAL:* F(prop_1) and F(prop_2)"}
{"id": 6448, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "and", "establish", "communication", "with", "the", "safe", "hostile", "holds", "next,", "then", "avoid", "the", "nearest", "gas", "leak", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "and", "next", "communicate(safe_hostile)", "implies", "next", "next", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["communicate(safe_hostile)"], ["avoid(nearest_gas_leak)"]], "bad_trace": [["deliver_aid(injured_hostile)"], ["communicate(safe_hostile)"], []], "prediction": "(\u2192) where the condition is on the left and the consequence is on the right.\n\n2. *Explanation dictionary* \u2013\n{\n  \"deliver aid to the injured hostile holds\" : \"prop_1\",\n  \"establish communication with the safe hostile holds next\" : \"X prop_2\",\n  \"avoid the nearest gas leak holds in the step after that\" : \"X prop_3\"\n}\n\n3. *FINAL:* (prop_1 and X prop_2)"}
{"id": 7706, "sentence": ["If", "request", "assistance", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "safe", "rescuer", "persists", "until", "give", "aid", "to", "the", "injured", "hostile", "holds,", "or", "else", "talk", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "communicate(safe_rescuer)", "until", "deliver_aid(injured_hostile)", ")", "or", "globally", "communicate(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["communicate(safe_rescuer)"], ["communicate(safe_rescuer)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["get_help"], []], "prediction": "(where `prop_1` represents \"request assistance\").\n   - \"then in the next step talk to the safe rescuer persists until give aid to the injured hostile holds\" translates to `X prop_2 U prop_3` (where `prop_2` represents \"talk to the safe rescuer\" and `prop_3` represents \"give aid to the injured hostile\").\n   - \"or else talk to the safe rescuer holds forever\" translates to `G prop_2`.\n   - The entire command can be structured as an implication: if `prop_1` holds, then either the first condition (talk to the safe rescuer until giving aid) or the second condition (talk to the safe rescuer forever)"}
{"id": 2691, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "unstable", "beam", "nor", "stay", "away", "from", "the", "active", "fire", "source", "holds,", "get", "help", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "avoid(active_fire_source)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unstable_beam)", "avoid(active_fire_source)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2 \u2192 F prop_3) FINISH"}
{"id": 3718, "sentence": ["Call", "for", "help", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "(a two-step grace period) before it must occur. This translates to saying that globally (G), the action of calling for help (prop_1) must eventually happen (F) within two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n    \"Call for help\" : \"prop_1\",\n    \"should always hold\" : \"G\",\n    \"at most a two-step grace period\" : \"X prop_1 U X prop_1\",\n    \"for recovery\" : \"\"\n}\n\n3. *FINAL:* G (X prop_1 U X prop_1)"}
{"id": 1535, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "safe", "hostile."], "tl": ["finally", "(", "not", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "prediction": "(not prop_1) if we assume prop_1 represents \"the robot gives aid to the safe hostile.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"The robot must eventually avoid giving aid to the safe hostile.\" : \"F(not prop_1)\"\n}\n\n3. *FINAL:* F(not prop_1)"}
{"id": 8325, "sentence": ["If", "call", "for", "help", "holds", "and", "deliver", "aid", "to", "the", "injured", "rescuer", "holds", "next,", "then", "record", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "deliver_aid(injured_rescuer)", "implies", "next", "next", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_rescuer)"], ["record(injured_victim)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_rescuer)"], []], "prediction": "3. *FINAL:* (prop_1 and prop_2) \u2192 X prop_3 FINISH"}
{"id": 6191, "sentence": ["Photograph", "unsafe", "rescuer", "holds", "at", "all", "times."], "tl": ["globally", "photo(unsafe_rescuer)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(unsafe_rescuer)"]], "bad_trace": [["photo(unsafe_rescuer)"], []], "prediction": "(which we can denote as prop_1)"}
{"id": 458, "sentence": ["Whenever", "neither", "begin", "recording", "injured", "victim", "nor", "go", "back", "to", "base", "holds,", "take", "a", "picture", "of", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(injured_victim)", "and", "go_home", ")", "implies", "finally", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(injured_victim)", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 9378, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "inactive", "flood", "holds", "at", "all", "times."], "tl": ["globally", "avoid(inactive_flood)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["avoid(inactive_flood)"]], "bad_trace": [["avoid(inactive_flood)"], []], "prediction": "(let's say prop_1)"}
{"id": 8586, "sentence": ["At", "every", "step,", "do", "not", "go", "near", "the", "active", "debris", "equals", "the", "value", "of", "take", "a", "video", "of", "fire", "source", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(active_debris)", "double_implies", "next", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["avoid(active_debris)"], ["record(fire_source)"]], "bad_trace": [["avoid(active_debris)"], []], "prediction": "(G). The phrase \"do not go near the active debris\" translates to a negation of a proposition (not prop_1). The phrase \"equals the value of take a video of fire source in the next step\" suggests that the condition is related to the action of taking a video, which can be represented as a proposition (prop_2). However, since the command focuses on the action of not going near the debris, we will primarily focus on that aspect.\n\n2. *Explanation dictionary* \u2013\n{\n  \"at every step\" : \"G\",\n  \"do not go near the active debris\" : \"not prop_1\",\n  \"equals the value of take a video of fire source in the next step\" : \"prop_2\"\n}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 2996, "sentence": ["At", "every", "step,", "begin", "recording", "safe", "victim", "equals", "the", "value", "of", "deliver", "aid", "to", "the", "safe", "hostile", "in", "the", "next", "step."], "tl": ["globally", "(", "record(safe_victim)", "double_implies", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(safe_victim)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["record(safe_victim)"], []], "prediction": "(G), we start recording (prop_1) the value of delivering aid to a safe hostile (prop_2) in the next step (X).\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step\" : \"G\",\n  \"begin recording\" : \"prop_1\",\n  \"safe victim equals the value of deliver aid to the safe hostile in the next step\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2194 X prop_2)"}
{"id": 6509, "sentence": ["Once", "take", "a", "picture", "of", "unsafe", "victim", "has", "occurred,", "take", "a", "video", "of", "flood", "will", "never", "occur", "again."], "tl": ["globally", "(", "photo(unsafe_victim)", "implies", "next", "globally", "not", "record(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(unsafe_victim)"], [], []], "bad_trace": [["photo(unsafe_victim)"], [], ["record(flood)"]], "prediction": "(taking a video of a flood), it should not happen again. This can be expressed using the \"until\" operator, indicating that the video taking can only happen if the picture taking has occurred, and after that, the flood video should not occur again.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Once take a picture of unsafe victim has occurred\" : \"F(prop_1)\",\n  \"take a video of flood will never occur again\" : \"G(not prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(not prop_2)"}
{"id": 7034, "sentence": ["Whenever", "give", "aid", "to", "the", "injured", "victim", "holds,", "get", "help", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "(", "next", "(", "next", "get_help", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], [], [], ["get_help"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "(giving aid to the injured victim), another action (getting help) should occur exactly three steps later. This can be expressed using the \"globally\" operator to indicate that the condition holds at all times, and the \"next\" operator to specify the timing of the subsequent action.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever give aid to the injured victim holds\" : \"G (prop_1)\",\n    \"get help holds exactly three steps later\" : \"X X X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X X X prop_2)"}
{"id": 2125, "sentence": ["Call", "for", "help", "can", "only", "happen", "after", "returning", "home."], "tl": ["not", "get_help", "until", "go_home"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["go_home"]], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(represented by prop_1) can only occur after the event of returning home (represented by prop_2)"}
{"id": 9858, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "talking", "to", "the", "safe", "hostile,", "then", "stay", "away", "from", "the", "probable", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(safe_hostile)", ")", "implies", "globally", "finally", "avoid(probable_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)", "avoid(probable_unstable_beam)"]], "bad_trace": [["get_help"], ["communicate(safe_hostile)"]], "prediction": "(prop_1 \u2192 F prop_2)\" where prop_1 represents \"call for help\" and prop_2 represents \"talking to the safe hostile.\" The consequence states that \"staying away from the probable unstable beam must occur infinitely often,\" which can be expressed as \"G F prop_3,\" where prop_3 represents \"stay away from the probable unstable beam.\" The entire command can be structured as an implication: if the condition holds, then the consequence must also hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every call for help is eventually followed by talking to the safe hostile\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"stay away from the probable unstable beam must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9820, "sentence": ["Either", "provide", "assistance", "to", "the", "injured", "hostile", "or", "begin", "recording", "safe", "civilian", "happens", "infinitely", "often."], "tl": ["globally", "finally", "deliver_aid(injured_hostile)", "or", "globally", "finally", "record(safe_civilian)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["deliver_aid(injured_hostile)"]], "bad_trace": [[]], "prediction": "(or) between the two actions, with the second action being qualified by the \"infinitely often\" condition.\n\n2. *Explanation dictionary* \u2013\n{\n  \"provide assistance to the injured hostile\": \"prop_1\",\n  \"begin recording safe civilian happens infinitely often\": \"prop_2 U G prop_2\"\n}\n\n3. *FINAL:* prop_1 or (prop_2 U G prop_2)"}
{"id": 8276, "sentence": ["If", "return", "to", "base", "holds,", "then", "in", "the", "next", "step", "do", "not", "go", "near", "the", "impending", "fire", "source", "persists", "until", "photographing", "injured", "rescuer", "holds,", "or", "else", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds", "forever."], "tl": ["go_home", "implies", "next", "(", "(", "avoid(impending_fire_source)", "until", "photo(injured_rescuer)", ")", "or", "globally", "avoid(impending_fire_source)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["go_home"], ["avoid(impending_fire_source)"], ["avoid(impending_fire_source)"], ["photo(injured_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "(where `prop_1` represents the condition of returning to base).\n   - \"then in the next step do not go near the impending fire source\" translates to `X not prop_2` (where `prop_2` represents the action of going near the fire source).\n   - \"persists until photographing injured rescuer holds\" translates to `prop_3 U prop_4` (where `prop_3` represents the condition of the fire source persisting and `prop_4` represents photographing the injured rescuer).\n   - \"or else do not go near the impending fire source holds forever\" translates to `G not prop_2` (indicating that the action of not going near the fire source should hold globally)"}
{"id": 4697, "sentence": ["Whenever", "neither", "get", "help", "nor", "talk", "to", "the", "safe", "hostile", "holds,", "record", "injured", "civilian", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "communicate(safe_hostile)", ")", "implies", "finally", "record(injured_civilian)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help", "communicate(safe_hostile)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 (prop_3 U F prop_4) FINISH"}
{"id": 9887, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(which we can denote as a proposition, say prop_1), the condition of going back to the base (denoted as prop_2) should never happen again. This can be formulated as: if we are at prop_1, then globally (G) it is not the case that prop_2 occurs.\n\n2. *Explanation dictionary* \u2013\n{\n  \"From some point onwards\" : \"prop_1\",\n  \"go back to base\" : \"prop_2\",\n  \"never occurs again\" : \"not prop_2\"\n}\n\n3. *FINAL:* prop_1 \u2192 G(not prop_2)"}
{"id": 8109, "sentence": ["Our", "agent", "must", "always", "avoid", "establishing", "communication", "with", "the", "injured", "victim."], "tl": ["globally", "(", "not", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[], [], []], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 4760, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(X prop_1 or X X prop_1)\"\n}\n\n3. *FINAL:* G prop_1 U (not prop_1 U (X prop_1 or X X prop_1))"}
{"id": 6321, "sentence": ["Whenever", "neither", "communicate", "with", "the", "safe", "hostile", "nor", "request", "assistance", "holds,", "begin", "recording", "debris", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(safe_hostile)", "and", "get_help", ")", "implies", "finally", "record(debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["communicate(safe_hostile)", "get_help"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 2686, "sentence": ["The", "system", "must", "eventually", "avoid", "the", "active", "unstable", "beam", "and", "take", "a", "video", "of", "unsafe", "rescuer."], "tl": ["finally", "(", "avoid(active_unstable_beam)", "and", "record(unsafe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [[], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)", "record(unsafe_rescuer)"]], "bad_trace": [[], ["avoid(active_unstable_beam)"], []], "prediction": "(F), which indicates that the conditions will be met at some point in the future. The two conditions are combined using the logical connective \"and\".\n\n2. *Explanation dictionary* \u2013\n{\n    \"eventually avoid the active unstable beam\": \"F prop_1\",\n    \"take a video of unsafe rescuer\": \"prop_2\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 6269, "sentence": ["When", "talk", "to", "the", "injured", "victim", "happens,", "photograph", "injured", "civilian", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "(", "photo(injured_civilian)", "or", "next", "photo(injured_civilian)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["communicate(injured_victim)", "photo(injured_civilian)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* prop_1 \u2192 (prop_2 or X prop_2) FINISH"}
{"id": 3102, "sentence": ["Whenever", "neither", "provide", "assistance", "to", "the", "safe", "hostile", "nor", "establish", "communication", "with", "the", "injured", "rescuer", "holds,", "talk", "to", "the", "injured", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "communicate(injured_rescuer)", ")", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(safe_hostile)", "communicate(injured_rescuer)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 4307, "sentence": ["If", "get", "help", "holds,", "then", "in", "the", "next", "step", "begin", "recording", "unstable", "beam", "persists", "until", "returning", "home", "holds,", "or", "else", "begin", "recording", "unstable", "beam", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "record(unstable_beam)", "until", "go_home", ")", "or", "globally", "record(unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], ["record(unstable_beam)"], ["record(unstable_beam)"], ["go_home"]], "bad_trace": [["get_help"], []], "prediction": "(prop_3 U prop_4)` or `G prop_2`.\n\n2. *Explanation dictionary*:\n   {\n     \"get help holds\" : \"prop_1\",\n     \"in the next step begin recording unstable beam\" : \"X prop_2\",\n     \"unstable beam persists until returning home holds\" : \"prop_3 U prop_4\",\n     \"or else begin recording unstable beam holds forever\" : \"G prop_2\"\n   }\n\n3. *FINAL:* prop_1 \u2192 (X prop_2 U (prop_3 U prop_4))"}
{"id": 3031, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "injured", "rescuer."], "tl": ["finally", "(", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], [], []], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"]], "prediction": "(avoid giving aid) in relation to a specific condition (the injured rescuer). This can be expressed in temporal logic as stating that it is eventually true that the robot avoids giving aid to the injured rescuer.\n\n2. *Explanation dictionary* \u2013\n{\n    \"The robot must eventually avoid giving aid to the injured rescuer.\" : \"F (not prop_1)\"\n}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 2662, "sentence": ["Take", "a", "video", "of", "debris", "holds", "at", "all", "times."], "tl": ["globally", "record(debris)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(debris)"]], "bad_trace": [["record(debris)"], []], "prediction": "(G)"}
{"id": 1895, "sentence": ["Whenever", "begin", "recording", "injured", "civilian", "and", "do", "not", "go", "near", "the", "inactive", "flood", "are", "equal,", "do", "not", "go", "near", "the", "inactive", "flood", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(injured_civilian)", "double_implies", "avoid(inactive_flood)", ")", "implies", "(", "avoid(inactive_flood)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(injured_civilian)", "avoid(inactive_flood)", "go_home"]], "bad_trace": [["record(injured_civilian)", "avoid(inactive_flood)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (not prop_2 \u2192 (not prop_2 and prop_3))) FINISH"}
{"id": 1269, "sentence": ["If", "every", "begin", "recording", "fire", "source", "is", "eventually", "followed", "by", "photographing", "flood,", "then", "take", "a", "photo", "of", "injured", "person", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(fire_source)", "implies", "finally", "photo(flood)", ")", "implies", "globally", "finally", "photo(injured_person)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}}, "good_trace": [["record(fire_source)"], ["photo(flood)", "photo(injured_person)"]], "bad_trace": [["record(fire_source)"], ["photo(flood)"]], "prediction": "(prop_1) is eventually followed by \"photographing flood\" (prop_2), then \"take a photo of injured person\" (prop_3) must occur infinitely often. This can be expressed in temporal logic as: if (G (prop_1 \u2192 F prop_2)), then (G F prop_3).\n\n2. *Explanation dictionary* \u2013\n{\n  \"every begin recording fire source is eventually followed by photographing flood\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"take a photo of injured person must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 1109, "sentence": ["Whenever", "get", "help", "and", "return", "home", "are", "equal,", "return", "home", "and", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "avoid(impending_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["get_help", "go_home", "avoid(impending_unstable_beam)"]], "bad_trace": [["get_help", "go_home"]], "prediction": "3. *FINAL:* G (prop_1 \u2194 prop_2) \u2192 (prop_2 and not prop_3) FINISH"}
{"id": 2074, "sentence": ["Take", "a", "picture", "of", "fire", "source", "holds", "at", "all", "times."], "tl": ["globally", "photo(fire_source)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], []], "prediction": "(G)"}
{"id": 426, "sentence": ["Whenever", "begin", "recording", "injured", "person", "and", "stay", "away", "from", "the", "active", "fire", "source", "are", "equal,", "stay", "away", "from", "the", "active", "fire", "source", "and", "record", "unsafe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(injured_person)", "double_implies", "avoid(active_fire_source)", ")", "implies", "(", "avoid(active_fire_source)", "double_implies", "record(unsafe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["record(injured_person)", "avoid(active_fire_source)", "record(unsafe_civilian)"]], "bad_trace": [["record(injured_person)", "avoid(active_fire_source)"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 1496, "sentence": ["This", "controller", "must", "eventually,", "avoid", "recording", "injured", "victim."], "tl": ["finally", "(", "not", "record(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(injured_victim)"], [], []], "bad_trace": [["record(injured_victim)"], ["record(injured_victim)"], ["record(injured_victim)"]], "prediction": "(F)"}
{"id": 42, "sentence": ["Globally,", "if", "communicate", "with", "the", "injured", "rescuer", "occurs", "then", "finally", "return", "to", "base", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)"], [], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "(G) if the action of \"communicate with the injured rescuer\" (prop_1) occurs, then \"finally\" (F) the action of \"return to base\" (prop_2) will happen. This can be expressed as: G (prop_1 \u2192 F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"communicate with the injured rescuer occurs\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally return to base happens.\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 7104, "sentence": ["The", "system", "must", "eventually", "return", "to", "base", "or", "talk", "to", "the", "safe", "rescuer."], "tl": ["finally", "(", "go_home", "or", "communicate(safe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "(F) to denote that one of these actions must occur at some point in the future. We can represent \"return to base\" with `prop_1` and \"talk to the safe rescuer\" with `prop_2`. The logical structure will be that it must eventually (F) either `prop_1` or `prop_2`.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must eventually return to base\": \"F prop_1\",\n  \"or talk to the safe rescuer\": \"or prop_2\"\n}\n\n3. *FINAL:* F (prop_1 or prop_2)"}
{"id": 966, "sentence": ["Either", "establish", "communication", "with", "the", "safe", "rescuer", "happens", "infinitely", "often,", "or", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "communicate(safe_rescuer)", "or", "next", "avoid(inactive_unstable_beam)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["communicate(safe_rescuer)"]], "bad_trace": [[], []], "prediction": "(eventually establishing communication infinitely often). The second part states \"do not go near the inactive unstable beam happens in the next step,\" which translates to \"X not prop_2\" (in the next step, do not go near the beam)"}
{"id": 5370, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "hostile", "and", "do", "not", "go", "near", "the", "probable", "fire", "source", "are", "equal,", "do", "not", "go", "near", "the", "probable", "fire", "source", "and", "return", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_hostile)", "double_implies", "avoid(probable_fire_source)", ")", "implies", "(", "avoid(probable_fire_source)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_hostile)", "avoid(probable_fire_source)", "go_home"]], "bad_trace": [["deliver_aid(injured_hostile)", "avoid(probable_fire_source)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (not prop_2 and prop_3)) FINISH"}
{"id": 4339, "sentence": ["From", "some", "point", "onwards,", "give", "aid", "to", "the", "safe", "hostile", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "deliver_aid(safe_hostile)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], ["deliver_aid(safe_hostile)"]], "prediction": "(which we can denote as \"X\" for the next step), aid is given (prop_1) until the condition of \"the safe hostile\" occurring (which we can denote as \"not prop_2\") is globally true (never happens again).\n\n2. *Explanation dictionary* \u2013\n{\n  \"From some point onwards\" : \"X\",\n  \"give aid\" : \"prop_1\",\n  \"the safe hostile never occurs again\" : \"G not prop_2\"\n}\n\n3. *FINAL:* X (prop_1 U G not prop_2)"}
{"id": 3799, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "returning", "home,", "then", "stay", "away", "from", "the", "active", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "avoid(active_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["go_home", "avoid(active_gas_leak)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "(\"If every call for help is eventually followed by returning home\") and the consequent (\"then stay away from the active gas leak must occur infinitely often\"). The antecedent can be expressed using the \"finally\" operator to indicate that after every call for help, returning home will eventually happen. The consequent indicates that the condition of staying away from the active gas leak must hold true infinitely often, which can be expressed using the \"globally\" operator combined with the \"finally\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every call for help is eventually followed by returning home\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"stay away from the active gas leak must occur infinitely often\" : \"F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 6394, "sentence": ["At", "every", "step,", "request", "assistance", "equals", "the", "value", "of", "do", "not", "go", "near", "the", "active", "gas", "leak", "in", "the", "next", "step."], "tl": ["globally", "(", "get_help", "double_implies", "next", "avoid(active_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["avoid(active_gas_leak)"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1) is equivalent to the negation of going near the gas leak (not prop_2) in the next step (X).\n\n2. *Explanation dictionary* \u2013\n{\n  \"request assistance\" : \"prop_1\",\n  \"do not go near the active gas leak in the next step\" : \"not prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2194 X(not prop_2))"}
{"id": 2878, "sentence": ["If", "go", "back", "to", "base", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "injured", "hostile", "persists", "until", "provide", "assistance", "to", "the", "safe", "rescuer", "holds,", "or", "else", "talk", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["go_home", "implies", "next", "(", "(", "communicate(injured_hostile)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "communicate(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "(where `prop_1` represents \"go back to base\").\n   - \"then in the next step talk to the injured hostile\" translates to `X prop_2` (where `prop_2` represents \"talk to the injured hostile\").\n   - \"persists until provide assistance to the safe rescuer holds\" translates to `prop_3 U prop_4` (where `prop_3` represents \"talk to the injured hostile\" and `prop_4` represents \"provide assistance to the safe rescuer\")"}
{"id": 1172, "sentence": ["Deliver", "aid", "to", "the", "injured", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "return", "home", "holds", "infinitely", "often."], "tl": ["deliver_aid(injured_rescuer)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["go_home"]], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"]], "prediction": "(returning home). The phrase \"must keep holding until\" suggests a temporal relationship where the action of delivering aid persists until the condition of returning home is satisfied. The phrase \"holds infinitely often\" implies that the condition of returning home will occur repeatedly over time.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Deliver aid to the injured rescuer\" : prop_1,\n  \"must keep holding\" : G(prop_1),\n  \"until\" : U,\n  \"return home\" : prop_2,\n  \"holds infinitely often\" : G(prop_2)\n}\n\n3. *FINAL:* G(prop_1 U prop_2) \u2227 G(prop_2)"}
{"id": 1233, "sentence": ["Whenever", "photograph", "safe", "rescuer", "and", "give", "aid", "to", "the", "safe", "rescuer", "are", "equal,", "give", "aid", "to", "the", "safe", "rescuer", "and", "photograph", "safe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(safe_rescuer)", "double_implies", "deliver_aid(safe_rescuer)", ")", "implies", "(", "deliver_aid(safe_rescuer)", "double_implies", "photo(safe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["photo(safe_rescuer)", "deliver_aid(safe_rescuer)", "photo(safe_civilian)"]], "bad_trace": [["photo(safe_rescuer)", "deliver_aid(safe_rescuer)"]], "prediction": "(photograph safe rescuer and give aid to the safe rescuer), then another condition must hold (give aid to the safe rescuer and photograph safe civilian are equal as well). This can be expressed using the \"implies\" operator to show that the first condition leads to the second condition. The \"globally\" operator is used to indicate that this must hold at all times.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever photograph safe rescuer and give aid to the safe rescuer are equal\" : \"prop_1\",\n    \"give aid to the safe rescuer and photograph safe civilian are equal as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 5500, "sentence": ["The", "system", "must", "always", "avoid", "returning", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(not prop_1), where prop_1 represents the state of \"returning to base.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must always avoid returning to base.\" : \"G(not prop_1)\"\n}\n\n3. *FINAL:* G(not prop_1)"}
{"id": 7827, "sentence": ["If", "every", "take", "a", "photo", "of", "safe", "victim", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "communicate", "with", "the", "safe", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(safe_victim)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(safe_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["photo(safe_victim)"], ["go_home", "communicate(safe_rescuer)"]], "bad_trace": [["photo(safe_victim)"], ["go_home"]], "prediction": "3. *FINAL:* (F(prop_1) \u2192 G(F(prop_2))) \u2192 G(prop_3) FINISH"}
{"id": 2558, "sentence": ["If", "talk", "to", "the", "safe", "victim", "holds", "and", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "next,", "then", "take", "a", "picture", "of", "fire", "source", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "communicate(safe_victim)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"], ["photo(fire_source)"]], "bad_trace": [["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 4066, "sentence": ["Either", "go", "back", "to", "base", "or", "take", "a", "video", "of", "gas", "leak", "happens", "infinitely", "often."], "tl": ["globally", "finally", "go_home", "or", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home"]], "bad_trace": [[]], "prediction": "(or) between two propositions. The first proposition is simply \"go back to base\" (prop_1), and the second proposition is \"gas leak happens infinitely often,\" which can be expressed as \"F prop_2\" (meaning that prop_2 will eventually be true at some point in the future, and this will happen infinitely often)"}
{"id": 8608, "sentence": ["Whenever", "neither", "deliver", "aid", "to", "the", "injured", "victim", "nor", "talk", "to", "the", "safe", "hostile", "holds,", "establish", "communication", "with", "the", "injured", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "communicate(safe_hostile)", ")", "implies", "finally", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_victim)", "communicate(safe_hostile)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 784, "sentence": ["Either", "get", "help", "or", "take", "a", "video", "of", "unsafe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "get_help", "or", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["get_help"]], "bad_trace": [[]], "prediction": "(F) to indicate that one of the two actions must occur at some point in the future, and we can use the \"or\" operator to combine the two actions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"get help\" : \"prop_1\",\n  \"take a video of unsafe victim\" : \"prop_2\",\n  \"infinitely often\" : \"G F\"\n}\n\n3. *FINAL:* G (F prop_1 or F prop_2)"}
{"id": 8558, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "safe", "rescuer", "nor", "provide", "assistance", "to", "the", "safe", "hostile", "holds,", "photograph", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(safe_rescuer)", "and", "deliver_aid(safe_hostile)", ")", "implies", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["photo(safe_rescuer)", "deliver_aid(safe_hostile)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 9021, "sentence": ["Once", "call", "for", "help", "has", "occurred,", "stay", "away", "from", "the", "probable", "flood", "will", "never", "occur", "again."], "tl": ["globally", "(", "get_help", "implies", "next", "globally", "not", "avoid(probable_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["avoid(probable_flood)"]], "prediction": "(F). The phrase \"stay away from the probable flood will never occur again\" suggests that after the help has been called, the condition of staying away from the flood should hold globally (G) from that point onward. Therefore, we can express this as: F(prop_1) \u2192 G(not prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Once call for help has occurred\" : \"F(prop_1)\",\n  \"stay away from the probable flood will never occur again\" : \"G(not prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(not prop_2)"}
{"id": 5696, "sentence": ["Both", "communicate", "with", "the", "safe", "rescuer", "and", "return", "home", "hold", "at", "every", "step."], "tl": ["globally", "(", "communicate(safe_rescuer)", "and", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_rescuer)", "go_home"]], "bad_trace": [["communicate(safe_rescuer)"], []], "prediction": "(1) the action of communicating with the safe rescuer, represented by `prop_1`, and (2) the action of returning home, represented by `prop_2`. The phrase \"at every step\" indicates that these conditions must be true globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Both communicate with the safe rescuer\" : \"prop_1\",\n  \"and return home\" : \"prop_2\",\n  \"at every step\" : \"G\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4822, "sentence": ["Globally,", "if", "request", "assistance", "occurs", "then", "finally", "take", "a", "picture", "of", "unstable", "beam", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], [], ["photo(unstable_beam)"]], "bad_trace": [["get_help"], [], []], "prediction": "(F) another proposition, which we can denote as prop_2, must occur.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"Globally\": \"G\",\n  \"if request assistance occurs\": \"prop_1\",\n  \"then finally take a picture of unstable beam happens\": \"F prop_2\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 4116, "sentence": ["Either", "get", "help", "happens", "infinitely", "often,", "or", "avoid", "the", "nearest", "gas", "leak", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "get_help", "or", "next", "avoid(nearest_gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["get_help"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (F(prop_1) U G(prop_1)) or X(prop_2) FINISH"}
{"id": 2593, "sentence": ["Every", "record", "flood", "is", "directly", "followed", "by", "give", "aid", "to", "the", "safe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "record(flood)", "implies", "next", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(flood)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["record(flood)"], []], "prediction": "(prop_1) leads to the action of giving aid to the safe victim (prop_2) in the next step (X).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Every record flood\" : \"prop_1\",\n  \"is directly followed by\" : \"\u2192\",\n  \"give aid to the safe victim in the next step\" : \"X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 5240, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "injured", "victim."], "tl": ["finally", "(", "not", "deliver_aid(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "3. *FINAL:* F not prop_1 FINISH"}
{"id": 8508, "sentence": ["If", "every", "deliver", "aid", "to", "the", "safe", "hostile", "is", "eventually", "followed", "by", "geting", "help,", "then", "avoid", "the", "impending", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "avoid(impending_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["deliver_aid(safe_hostile)"], ["get_help", "avoid(impending_unstable_beam)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["get_help"]], "prediction": "(prop_1 \u2192 F prop_2)\",\n     \"then avoid the impending unstable beam must occur infinitely often\" : \"G (prop_3)\"\n   }\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 5136, "sentence": ["Whenever", "communicate", "with", "the", "safe", "rescuer", "holds,", "eventually", "stay", "away", "from", "the", "inactive", "debris", "will", "hold."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [["communicate(safe_rescuer)"], [], ["avoid(inactive_debris)"]], "bad_trace": [["communicate(safe_rescuer)"], [], []], "prediction": "(prop_1)\" where \"prop_1\" represents the condition of communicating with the safe rescuer. The phrase \"eventually stay away from the inactive debris will hold\" indicates that at some point in the future, the condition of staying away from inactive debris must be true. This can be represented as \"F(prop_2)\" where \"prop_2\" represents the condition of staying away from inactive debris. The entire command can be expressed as \"G(prop_1) \u2192 F(prop_2)\", meaning that if the first condition holds globally, then the second condition must eventually hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever communicate with the safe rescuer holds\" : \"G(prop_1)\",\n  \"eventually stay away from the inactive debris will hold\" : \"F(prop_2)\"\n}\n\n3. *FINAL:* G(prop_1) \u2192 F(prop_2)"}
{"id": 8983, "sentence": ["Whenever", "establish", "communication", "with", "the", "injured", "rescuer", "holds,", "go", "back", "to", "base", "holds", "as", "well."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "go_home"], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "(which we can represent as `prop_1`), the action of going back to base (represented as `prop_2`) should also hold. This can be expressed using the globally operator (G) to indicate that this condition must always be true. The relationship is that the establishment of communication implies going back to base.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever communication with the injured rescuer is established\" : \"prop_1\",\n  \"go back to base holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 2449, "sentence": ["The", "robot", "must", "always", "avoid", "go", "home."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(G)"}
{"id": 6095, "sentence": ["Our", "agent", "must", "eventually", "take", "a", "picture", "of", "unstable", "beam", "or", "call", "for", "help."], "tl": ["finally", "(", "photo(unstable_beam)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["photo(unstable_beam)"]], "bad_trace": [[], [], []], "prediction": "(F) to indicate that one of these actions must occur at some point in the future. The logical \"or\" (or) connects the two possible actions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"eventually take a picture of unstable beam\": \"F prop_1\",\n  \"call for help\": \"prop_2\"\n}\n\n3. *FINAL:* F (prop_1 or prop_2)"}
{"id": 5559, "sentence": ["Either", "request", "assistance", "happens", "infinitely", "often,", "or", "return", "to", "base", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "get_help", "or", "next", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* F G prop_1 or X prop_2 FINISH"}
{"id": 7230, "sentence": ["This", "controller", "must", "eventually,", "avoid", "going", "back", "to", "base."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F), indicating that the condition must hold true at some point in the future. The action of avoiding going back to the base can be represented as a negation of the proposition that indicates being at the base (let's assume this is represented by prop_1)"}
{"id": 9881, "sentence": ["If", "communicate", "with", "the", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "injured", "rescuer", "persists", "until", "establishing", "communication", "with", "the", "safe", "hostile", "holds,", "or", "else", "talk", "to", "the", "injured", "rescuer", "holds", "forever."], "tl": ["communicate(safe_victim)", "implies", "next", "(", "(", "communicate(injured_rescuer)", "until", "communicate(safe_hostile)", ")", "or", "globally", "communicate(injured_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_victim)"], ["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"], ["communicate(safe_hostile)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "3. *FINAL:* `prop_1 \u2192 (X prop_2 U (prop_3 or G prop_2))` FINISH"}
{"id": 3618, "sentence": ["Stay", "away", "from", "the", "active", "unstable", "beam", "can", "only", "happen", "after", "doing", "not", "go", "near", "the", "probable", "flood."], "tl": ["not", "avoid(active_unstable_beam)", "until", "avoid(probable_flood)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [[], [], ["avoid(probable_flood)"]], "bad_trace": [["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"]], "prediction": "(not prop_2)"}
{"id": 6164, "sentence": ["Whenever", "provide", "assistance", "to", "the", "safe", "victim", "and", "take", "a", "picture", "of", "unsafe", "civilian", "are", "equal,", "take", "a", "picture", "of", "unsafe", "civilian", "and", "take", "a", "video", "of", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_victim)", "double_implies", "photo(unsafe_civilian)", ")", "implies", "(", "photo(unsafe_civilian)", "double_implies", "record(flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["deliver_aid(safe_victim)", "photo(unsafe_civilian)", "record(flood)"]], "bad_trace": [["deliver_aid(safe_victim)", "photo(unsafe_civilian)"]], "prediction": "(G) to indicate that the condition must always be satisfied. The logical structure can be broken down as follows:\n   - \"Whenever provide assistance to the safe victim\" translates to a condition that must hold.\n   - \"and take a picture of unsafe civilian\" is part of the condition.\n   - \"are equal\" indicates that the two actions must happen together.\n   - The conclusion is that both actions (taking a picture of the unsafe civilian and taking a video of the flood) must occur under the specified conditions.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"Whenever provide assistance to the safe victim\": \"G(prop_1)"}
{"id": 1211, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "rescuer", "and", "communicate", "with", "the", "injured", "hostile", "are", "equal,", "communicate", "with", "the", "injured", "hostile", "and", "do", "not", "go", "near", "the", "inactive", "fire", "source", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_rescuer)", "double_implies", "communicate(injured_hostile)", ")", "implies", "(", "communicate(injured_hostile)", "double_implies", "avoid(inactive_fire_source)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "communicate(injured_hostile)", "avoid(inactive_fire_source)"]], "bad_trace": [["deliver_aid(injured_rescuer)", "communicate(injured_hostile)"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_2 and not prop_3)) FINISH"}
{"id": 4256, "sentence": ["If", "communicate", "with", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "return", "home", "persists", "until", "doing", "not", "go", "near", "the", "probable", "unstable", "beam", "holds,", "or", "else", "return", "home", "holds", "forever."], "tl": ["communicate(injured_rescuer)", "implies", "next", "(", "(", "go_home", "until", "avoid(probable_unstable_beam)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)"], ["go_home"], ["go_home"], ["avoid(probable_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "(X prop_2 U not prop_4)"}
{"id": 8694, "sentence": ["Give", "aid", "to", "the", "safe", "hostile", "and", "take", "a", "video", "of", "safe", "rescuer", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "deliver_aid(safe_hostile)", "and", "finally", "record(safe_rescuer)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_hostile)"], ["record(safe_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(F). Therefore, we can express this as: F(prop_1) and F(prop_2), where prop_1 represents \"give aid to the safe hostile\" and prop_2 represents \"take a video of the safe rescuer.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"give aid to the safe hostile\": \"prop_1\",\n  \"take a video of the safe rescuer\": \"prop_2\",\n  \"will each happen at some point\": \"F(prop_1) and F(prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) and F(prop_2)"}
{"id": 4804, "sentence": ["If", "take", "a", "photo", "of", "safe", "civilian", "holds,", "then", "in", "the", "next", "step", "take", "a", "photo", "of", "safe", "rescuer", "persists", "until", "establishing", "communication", "with", "the", "injured", "rescuer", "holds,", "or", "else", "take", "a", "photo", "of", "safe", "rescuer", "holds", "forever."], "tl": ["photo(safe_civilian)", "implies", "next", "(", "(", "photo(safe_rescuer)", "until", "communicate(injured_rescuer)", ")", "or", "globally", "photo(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["photo(safe_civilian)"], ["photo(safe_rescuer)"], ["photo(safe_rescuer)"], ["communicate(injured_rescuer)"]], "bad_trace": [["photo(safe_civilian)"], []], "prediction": "(X prop_2 U prop_3)"}
{"id": 7750, "sentence": ["Whenever", "begin", "recording", "unsafe", "person", "holds,", "eventually", "do", "not", "go", "near", "the", "nearest", "unstable", "beam", "will", "hold."], "tl": ["globally", "(", "record(unsafe_person)", "implies", "finally", "avoid(nearest_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["record(unsafe_person)"], [], ["avoid(nearest_unstable_beam)"]], "bad_trace": [["record(unsafe_person)"], [], []], "prediction": "(the beginning of recording when an unsafe person holds), a specific outcome should eventually happen (not going near the nearest unstable beam). This can be expressed in temporal logic using the \"globally\" operator to indicate that the condition must always hold, and the \"finally\" operator to indicate that the outcome must eventually occur.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever begin recording unsafe person holds\" : \"G (prop_1)\",\n    \"eventually do not go near the nearest unstable beam\" : \"F (not prop_2)\"\n}\n\n3. *FINAL:* G(prop_1) \u2192 F(not prop_2)"}
{"id": 1748, "sentence": ["Globally,", "if", "stay", "away", "from", "the", "probable", "debris", "occurs", "then", "finally", "return", "home", "happens."], "tl": ["globally", "(", "avoid(probable_debris)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_debris)"], [], ["go_home"]], "bad_trace": [["avoid(probable_debris)"], [], []], "prediction": "(prop_1).\n   - \"then finally return home happens\" indicates that if the condition is true, then at some point in the future (eventually), returning home (prop_2) must happen, which corresponds to the F operator.\n\n2. *Explanation dictionary*:\n   {\n     \"Globally\" : \"G\",\n     \"if stay away from the probable debris occurs\" : \"prop_1\",\n     \"then finally return home happens\" : \"F(prop_2)\"\n   }\n\n3. *FINAL:* G(prop_1 \u2192 F(prop_2))"}
{"id": 5531, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "(prop_1) should hold globally (G), and if it does not hold, it must hold within the next two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Request assistance should always hold\": \"G prop_1\",\n  \"with at most a two-step grace period for recovery\": \"prop_1 U X prop_1\"\n}\n\n3. *FINAL:* G (prop_1 U X prop_1)"}
{"id": 1046, "sentence": ["From", "some", "point", "onwards,", "communicate", "with", "the", "safe", "rescuer", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "communicate(safe_rescuer)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], [], []], "bad_trace": [["communicate(safe_rescuer)"], [], ["communicate(safe_rescuer)"]], "prediction": "3. *FINAL:* X prop_1 \u2192 G not prop_1 FINISH"}
{"id": 7358, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "establish", "communication", "with", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["go_home", "communicate(injured_hostile)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "(\"If every get help is eventually followed by going back to base\") and the consequent (\"then establish communication with the injured hostile must occur infinitely often\"). The antecedent can be expressed using the \"finally\" operator to indicate that the event of going back to base will eventually happen after getting help. The consequent indicates that establishing communication must happen infinitely often, which can be expressed using the \"globally\" operator combined with the \"finally\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"If every get help is eventually followed by going back to base\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"then establish communication with the injured hostile must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9088, "sentence": ["When", "get", "help", "happens,", "deliver", "aid", "to", "the", "injured", "hostile", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "get_help", "implies", "(", "deliver_aid(injured_hostile)", "or", "next", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help", "deliver_aid(injured_hostile)"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* prop_1 \u2192 (prop_2 or X prop_2) FINISH"}
{"id": 2400, "sentence": ["The", "system", "must", "avoid", "the", "active", "gas", "leak", "and", "take", "a", "photo", "of", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(active_gas_leak)", "and", "photo(fire_source)", ")", ")", "and", "globally", "(", "avoid(active_gas_leak)", "or", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["avoid(active_gas_leak)"], ["photo(fire_source)"], ["avoid(active_gas_leak)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 8832, "sentence": ["Whenever", "neither", "deliver", "aid", "to", "the", "injured", "victim", "nor", "stay", "away", "from", "the", "active", "gas", "leak", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "avoid(active_gas_leak)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)", "avoid(active_gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 2535, "sentence": ["Get", "help", "and", "provide", "assistance", "to", "the", "injured", "victim", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "get_help", "and", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_victim)"]], "bad_trace": [[], [], []], "prediction": "(F).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Get help\" : \"prop_1\",\n  \"provide assistance to the injured victim\" : \"prop_2\",\n  \"will each happen at some point\" : \"F\"\n}\n\n3. *FINAL:* F(prop_1) and F(prop_2)"}
{"id": 8837, "sentence": ["Whenever", "neither", "stay", "away", "from", "the", "nearest", "fire", "source", "nor", "talk", "to", "the", "injured", "hostile", "holds,", "establish", "communication", "with", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(nearest_fire_source)", "and", "communicate(injured_hostile)", ")", "implies", "finally", "communicate(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(nearest_fire_source)", "communicate(injured_hostile)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2 \u2192 F prop_3) FINISH"}
{"id": 9258, "sentence": ["You", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(\"You\") to eventually avoid getting help. In temporal logic, \"eventually\" corresponds to the operator \"F\" (finally)"}
{"id": 3325, "sentence": ["From", "some", "point", "onwards,", "avoid", "the", "nearest", "debris", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "avoid(nearest_debris)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}}, "good_trace": [["avoid(nearest_debris)"], [], []], "bad_trace": [["avoid(nearest_debris)"], [], ["avoid(nearest_debris)"]], "prediction": "(let's say prop_1) that must hold true. The phrase \"never occurs again\" indicates that this condition must hold globally (G) after that point. Therefore, we can express this as: starting from some point, it must be the case that the nearest debris (prop_1) does not occur again globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"From some point onwards\" : \"X\",\n  \"avoid the nearest debris\" : \"not prop_1\",\n  \"never occurs again\" : \"G(not prop_1)\"\n}\n\n3. *FINAL:* X \u2192 G(not prop_1)"}
{"id": 3446, "sentence": ["This", "controller", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "fire", "source."], "tl": ["finally", "(", "not", "avoid(nearest_fire_source)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["avoid(nearest_fire_source)"], [], []], "bad_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_fire_source)"], ["avoid(nearest_fire_source)"]], "prediction": "(staying away from the nearest fire source) at some point in the future. The phrase \"must eventually\" suggests that this condition should be satisfied at least once in the future, which translates to the use of the \"finally\" operator (F)"}
{"id": 130, "sentence": ["This", "controller", "must", "always", "avoid", "staying", "away", "from", "the", "inactive", "gas", "leak."], "tl": ["globally", "(", "not", "avoid(inactive_gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(inactive_gas_leak)"], [], []], "prediction": "(not prop_1)\"\n}\n\n3. *FINAL:* G(not prop_1)"}
{"id": 6968, "sentence": ["Whenever", "take", "a", "video", "of", "gas", "leak", "holds,", "go", "home", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "record(gas_leak)", "implies", "next", "(", "next", "(", "next", "go_home", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)"], [], [], ["go_home"]], "bad_trace": [["record(gas_leak)"], [], [], []], "prediction": "(represented by prop_1) holds, then the condition of going home (represented by prop_2)"}
{"id": 8001, "sentence": ["Our", "agent", "must", "eventually", "stay", "away", "from", "the", "inactive", "fire", "source", "or", "begin", "recording", "unstable", "beam."], "tl": ["finally", "(", "avoid(inactive_fire_source)", "or", "record(unstable_beam)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [[], ["avoid(inactive_fire_source)"]], "bad_trace": [[], [], []], "prediction": "    \"or\": \"or\""}
{"id": 7770, "sentence": ["You", "must", "eventually,", "avoid", "returning", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(\"You\") to avoid returning home at some point in the future. The phrase \"must eventually\" translates to the temporal logic operator \"finally\" (F)"}
{"id": 3367, "sentence": ["Record", "unstable", "beam", "and", "establish", "communication", "with", "the", "safe", "rescuer", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(unstable_beam)", "and", "communicate(safe_rescuer)", ")", ")", "and", "globally", "(", "record(unstable_beam)", "or", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["record(unstable_beam)"], ["communicate(safe_rescuer)"], ["record(unstable_beam)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 3952, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(not prop_1 U (prop_1))\n}\n\n3. *FINAL:* G (prop_1 U (prop_1))"}
{"id": 7934, "sentence": ["If", "do", "not", "go", "near", "the", "active", "unstable", "beam", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "injured", "hostile."], "tl": ["globally", "finally", "avoid(active_unstable_beam)", "implies", "globally", "finally", "deliver_aid(injured_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[]], "bad_trace": [["avoid(active_unstable_beam)"]], "prediction": "(where prop_1 represents \"go near the active unstable beam\") occurring infinitely often, which can be expressed as \"G (not prop_1)\".\n   - \"then so does deliver aid to the injured hostile\" translates to the action of delivering aid to the injured hostile, represented by \"prop_2\".\n   - The overall structure is an implication where the first part is the condition and the second part is the consequence.\n\n2. *Explanation dictionary*:\n   {\n     \"do not go near the active unstable beam happens infinitely often\": \"G (not prop_1)\",\n     \"deliver aid to the injured hostile\": \"prop_2\"\n   }\n\n3. *FINAL:* G (not prop_1)"}
{"id": 644, "sentence": ["Whenever", "take", "a", "photo", "of", "injured", "person", "and", "take", "a", "picture", "of", "injured", "civilian", "are", "equal,", "take", "a", "picture", "of", "injured", "civilian", "and", "go", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(injured_person)", "double_implies", "photo(injured_civilian)", ")", "implies", "(", "photo(injured_civilian)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_person)", "photo(injured_civilian)", "go_home"]], "bad_trace": [["photo(injured_person)", "photo(injured_civilian)"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_3 and prop_4)) FINISH"}
{"id": 1926, "sentence": ["If", "give", "aid", "to", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "provide", "assistance", "to", "the", "injured", "victim", "persists", "until", "doing", "not", "go", "near", "the", "impending", "debris", "holds,", "or", "else", "provide", "assistance", "to", "the", "injured", "victim", "holds", "forever."], "tl": ["deliver_aid(injured_rescuer)", "implies", "next", "(", "(", "deliver_aid(injured_victim)", "until", "avoid(impending_debris)", ")", "or", "globally", "deliver_aid(injured_victim)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["avoid(impending_debris)"]], "bad_trace": [["deliver_aid(injured_rescuer)"], []], "prediction": "(where `prop_3` represents \"go near the impending debris\")"}
{"id": 1790, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G). Therefore, we can represent this as G(prop_1), where prop_1 is the placeholder for the proposition \"help.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"help holds at all times\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 5987, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "victim,", "then", "avoid", "the", "active", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(injured_victim)", ")", "implies", "globally", "finally", "avoid(active_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["communicate(injured_victim)", "avoid(active_gas_leak)"]], "bad_trace": [["get_help"], ["communicate(injured_victim)"]], "prediction": "(prop_1) is eventually followed by establishing communication with the injured victim (prop_2), then the consequence is that avoiding the active gas leak (prop_3) must occur infinitely often. This can be expressed using the implication operator (\u2192) and the globally operator (G) to indicate that the condition must hold at all times, and the finally operator (F) to indicate that the consequence must happen infinitely often.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every get help is eventually followed by establishing communication with the injured victim\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"avoid the active gas leak must occur infinitely often\" : \"G (prop_3)\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 8620, "sentence": ["You", "must", "Eventually,", "both", "begin", "recording", "unsafe", "rescuer", "and", "establish", "communication", "with", "the", "injured", "rescuer", "hold", "simultaneously."], "tl": ["finally", "(", "record(unsafe_rescuer)", "and", "communicate(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(unsafe_rescuer)", "communicate(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "    \"both...and\": \"and\""}
{"id": 1821, "sentence": ["Give", "aid", "to", "the", "safe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "deliver_aid(safe_rescuer)", "and", "next", "deliver_aid(safe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], [], []], "prediction": "(prop_1 U (not prop_1 U (X prop_1 or X X prop_1)))"}
{"id": 481, "sentence": ["The", "system", "must", "always", "maintain", "both", "take", "a", "photo", "of", "gas", "leak", "and", "take", "a", "photo", "of", "fire", "source."], "tl": ["globally", "(", "photo(gas_leak)", "and", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(gas_leak)", "photo(fire_source)"], ["photo(gas_leak)", "photo(fire_source)"], ["photo(gas_leak)", "photo(fire_source)"]], "bad_trace": [["photo(gas_leak)"], ["photo(gas_leak)"], ["photo(fire_source)"]], "prediction": "(globally) maintain two conditions: taking a photo of a gas leak and taking a photo of a fire source. Each of these conditions can be represented by proposition placeholders, prop_1 for taking a photo of a gas leak and prop_2 for taking a photo of a fire source. The logical structure indicates that both conditions must hold true simultaneously.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always maintain both take a photo of gas leak and take a photo of fire source\" : \"G (prop_1 and prop_2)\",\n  \"take a photo of gas leak\" : \"prop_1\",\n  \"take a photo of fire source\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 269, "sentence": ["If", "deliver", "aid", "to", "the", "safe", "victim", "holds", "and", "take", "a", "picture", "of", "fire", "source", "holds", "next,", "then", "record", "safe", "person", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(safe_victim)", "and", "next", "photo(fire_source)", "implies", "next", "next", "record(safe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["deliver_aid(safe_victim)"], ["photo(fire_source)"], ["record(safe_person)"]], "bad_trace": [["deliver_aid(safe_victim)"], ["photo(fire_source)"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 7984, "sentence": ["Both", "establish", "communication", "with", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "safe", "hostile", "hold", "at", "every", "step."], "tl": ["globally", "(", "communicate(safe_victim)", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(safe_victim)", "communicate(safe_hostile)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(at every step).\n\n2. *Explanation dictionary* \u2013\n{\n    \"Both\" : \"and\",\n    \"establish communication with the safe victim\" : \"prop_1\",\n    \"establish communication with the safe hostile hold\" : \"prop_2\",\n    \"at every step\" : \"G\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 2866, "sentence": ["At", "every", "step,", "go", "back", "to", "base", "equals", "the", "value", "of", "photograph", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "go_home", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["go_home"], ["photo(unsafe_victim)"]], "bad_trace": [["go_home"], []], "prediction": "(in this case, \"photograph unsafe victim\") in the next step. This can be expressed as a globally quantified statement that at every step, the base should equal the value of the proposition \"photograph unsafe victim\" in the next step.\n\n2. *Explanation dictionary* \u2013\n{\n  \"At every step\" : \"G\",\n  \"go back to base equals the value of photograph unsafe victim\" : \"base = prop_1\",\n  \"in the next step\" : \"X prop_2\"\n}\n\n3. *FINAL:* G (base = X prop_1)"}
{"id": 5798, "sentence": ["Whenever", "talk", "to", "the", "injured", "victim", "holds,", "begin", "recording", "unstable", "beam", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "next", "(", "next", "(", "next", "record(unstable_beam)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["communicate(injured_victim)"], [], [], ["record(unstable_beam)"]], "bad_trace": [["communicate(injured_victim)"], [], [], []], "prediction": "(talking to the injured victim), another event should start (begin recording) after a specific condition is met (unstable beam holds) exactly three steps later. This can be expressed using the \"globally\" operator to indicate that the first condition must always lead to the second condition occurring after the specified time frame.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever talk to the injured victim holds\" : \"G (prop_1 \u2192 X prop_2)\",\n    \"begin recording\" : \"prop_2\",\n    \"unstable beam holds exactly three steps later\" : \"X X X prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X (prop_2 U (X X X prop_3)))"}
{"id": 5681, "sentence": ["Either", "go", "back", "to", "base", "happens", "infinitely", "often,", "or", "deliver", "aid", "to", "the", "safe", "victim", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "go_home", "or", "next", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home"]], "bad_trace": [[], []], "prediction": "(prop_1)\" where prop_1 represents \"go back to base.\" The second part states that \"deliver aid to the safe victim happens in the next step,\" which can be expressed as \"X (prop_2)\" where prop_2 represents \"deliver aid to the safe victim.\" The overall structure is an \"or\" statement between these two parts.\n\n2. *Explanation dictionary* \u2013\n{\n  \"go back to base happens infinitely often\" : \"F (prop_1)\",\n  \"deliver aid to the safe victim happens in the next step\" : \"X (prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) or X(prop_2)"}
{"id": 856, "sentence": ["Talk", "to", "the", "injured", "rescuer", "and", "stay", "away", "from", "the", "impending", "fire", "source", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "communicate(injured_rescuer)", "and", "finally", "avoid(impending_fire_source)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["communicate(injured_rescuer)"], ["avoid(impending_fire_source)"]], "bad_trace": [[], [], []], "prediction": "(F).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Talk to the injured rescuer\": \"prop_1\",\n  \"stay away from the impending fire source\": \"prop_2\",\n  \"will each happen at some point\": \"F\"\n}\n\n3. *FINAL:* F(prop_1) and F(prop_2)"}
{"id": 4543, "sentence": ["If", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "holds", "and", "take", "a", "picture", "of", "flood", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(inactive_unstable_beam)", "and", "next", "photo(flood)", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], ["photo(flood)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_unstable_beam)"], ["photo(flood)"], []], "prediction": "3. *FINAL:* (not prop_1 and X prop_2) \u2192 prop_3 FINISH"}
{"id": 5757, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "(prop_1) should hold globally (G), and if it does not hold, it must hold within the next two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Request assistance should always hold\" : \"G prop_1\",\n  \"with at most a two-step grace period for recovery\" : \"not prop_1 U (X prop_1)\"\n}\n\n3. *FINAL:* G prop_1 U (X prop_1)"}
{"id": 9377, "sentence": ["If", "every", "take", "a", "video", "of", "flood", "is", "eventually", "followed", "by", "avoid", "the", "inactive", "debris,", "then", "avoid", "the", "nearest", "debris", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(flood)", "implies", "finally", "avoid(inactive_debris)", ")", "implies", "globally", "finally", "avoid(nearest_debris)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}}, "good_trace": [["record(flood)"], ["avoid(inactive_debris)", "avoid(nearest_debris)"]], "bad_trace": [["record(flood)"], ["avoid(inactive_debris)"]], "prediction": "3. *FINAL:* (F(prop_1) \u2192 G(prop_3)) U F(prop_2) FINISH"}
{"id": 6648, "sentence": ["Whenever", "neither", "record", "fire", "source", "nor", "get", "help", "holds,", "take", "a", "video", "of", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(fire_source)", "and", "get_help", ")", "implies", "finally", "record(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(fire_source)", "get_help"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not (prop_1 or prop_2)) \u2192 F(prop_3) FINISH"}
{"id": 4265, "sentence": ["Whenever", "take", "a", "photo", "of", "safe", "person", "and", "get", "help", "are", "equal,", "get", "help", "and", "avoid", "the", "probable", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(safe_person)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "avoid(probable_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["photo(safe_person)", "get_help", "avoid(probable_unstable_beam)"]], "bad_trace": [["photo(safe_person)", "get_help"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 7141, "sentence": ["The", "robot", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(F), which signifies that the condition must be met eventually. We can represent the action of avoiding getting help with a proposition placeholder, such as prop_1.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The robot must eventually avoid getting help.\" : \"F(prop_1)\"\n}\n\n3. *FINAL:* F(prop_1)"}
{"id": 8653, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "get", "help", "and", "avoid", "the", "nearest", "gas", "leak."], "tl": ["globally", "(", "get_help", "and", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["get_help", "avoid(nearest_gas_leak)"], ["get_help", "avoid(nearest_gas_leak)"], ["get_help", "avoid(nearest_gas_leak)"]], "bad_trace": [["get_help"], ["get_help"], ["avoid(nearest_gas_leak)"]], "prediction": "(prop_1 and prop_2)\",\n  \"get help\" : \"prop_1\",\n  \"avoid the nearest gas leak\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 3174, "sentence": ["If", "every", "take", "a", "video", "of", "gas", "leak", "is", "eventually", "followed", "by", "going", "home,", "then", "give", "aid", "to", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(gas_leak)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(gas_leak)"], ["go_home", "deliver_aid(injured_victim)"]], "bad_trace": [["record(gas_leak)"], ["go_home"]], "prediction": "3. *FINAL:* F(prop_1 \u2192 F(prop_2)) \u2192 G(prop_3) FINISH"}
{"id": 5040, "sentence": ["Every", "provide", "assistance", "to", "the", "injured", "hostile", "is", "directly", "followed", "by", "recording", "debris", "in", "the", "next", "step."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "implies", "next", "record(debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["record(debris)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "(G). The phrase \"is directly followed by recording debris in the next step\" indicates a temporal relationship where the action of providing assistance leads to the action of recording debris in the next step (X). Therefore, we can express this as: if assistance is provided, then in the next step, debris is recorded.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Every provide assistance to the injured hostile\" : \"G prop_1\",\n  \"is directly followed by recording debris in the next step\" : \"prop_1 \u2192 X prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 47, "sentence": ["Our", "agent", "must", "eventually", "talk", "to", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "injured", "hostile."], "tl": ["finally", "(", "communicate(safe_victim)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[], ["communicate(safe_victim)"], ["communicate(safe_victim)", "communicate(injured_hostile)"]], "bad_trace": [[], ["communicate(safe_victim)"], []], "prediction": "(F)"}
{"id": 3088, "sentence": ["The", "robot", "must", "Eventually,", "both", "go", "back", "to", "base", "and", "record", "debris", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "record(debris)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["go_home", "record(debris)"]], "bad_trace": [[], [], []], "prediction": "(F) achieve two conditions: going back to base (prop_1) and recording debris hold (prop_2) at the same time (and). Therefore, we need to express that both conditions must hold simultaneously at some point in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both go back to base and record debris hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 8491, "sentence": ["Take", "a", "video", "of", "safe", "rescuer", "and", "do", "not", "go", "near", "the", "impending", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(safe_rescuer)", "and", "avoid(impending_fire_source)", ")", ")", "and", "globally", "(", "record(safe_rescuer)", "or", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["record(safe_rescuer)"], ["avoid(impending_fire_source)"], ["record(safe_rescuer)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) and G (prop_1 or prop_2) FINISH"}
{"id": 2187, "sentence": ["Whenever", "neither", "take", "a", "video", "of", "flood", "nor", "take", "a", "video", "of", "safe", "civilian", "holds,", "take", "a", "video", "of", "debris", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(flood)", "and", "record(safe_civilian)", ")", "implies", "finally", "record(debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(flood)", "record(safe_civilian)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 4079, "sentence": ["Take", "a", "video", "of", "injured", "victim", "and", "deliver", "aid", "to", "the", "injured", "victim", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(injured_victim)", "and", "deliver_aid(injured_victim)", ")", ")", "and", "globally", "(", "record(injured_victim)", "or", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 8463, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G). Therefore, we can represent this as G(prop_1), where prop_1 is the placeholder for the proposition \"help.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"help holds at all times\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 3033, "sentence": ["Whenever", "neither", "avoid", "the", "probable", "gas", "leak", "nor", "take", "a", "photo", "of", "flood", "holds,", "take", "a", "video", "of", "unstable", "beam", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(probable_gas_leak)", "and", "photo(flood)", ")", "implies", "finally", "record(unstable_beam)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["avoid(probable_gas_leak)", "photo(flood)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 F prop_3) FINISH"}
{"id": 3299, "sentence": ["Take", "a", "picture", "of", "debris", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(debris)", "and", "next", "photo(debris)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["photo(debris)"], [], ["photo(debris)"]], "bad_trace": [["photo(debris)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_2 U (X prop_2))) FINISH"}
{"id": 4675, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "photo", "of", "unstable", "beam", "and", "communicate", "with", "the", "injured", "hostile", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["photo(unstable_beam)"], ["communicate(injured_hostile)"], []], "bad_trace": [["photo(unstable_beam)", "communicate(injured_hostile)"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 9800, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "unsafe", "person", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(unsafe_person)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["photo(unsafe_person)"], [], []], "bad_trace": [["photo(unsafe_person)"], [], ["photo(unsafe_person)"]], "prediction": "3. *FINAL:* X (not prop_1) G (not prop_1) FINISH"}
{"id": 3893, "sentence": ["Whenever", "give", "aid", "to", "the", "safe", "rescuer", "holds,", "eventually", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "will", "hold."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "finally", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["avoid(impending_unstable_beam)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], []], "prediction": "(prop_1 \u2192 ...)\", where prop_1 represents the condition of giving aid to the safe rescuer. The phrase \"eventually do not go near the impending unstable beam will hold\" indicates that if the condition is true, then at some point in the future, the action of not going near the beam must hold. This can be represented as \"F (not prop_2)\", where prop_2 represents the action of going near the beam. Therefore, the entire command can be expressed as \"G (prop_1 \u2192 F (not prop_2))\".\n\n2. *Explanation dictionary* \u2013\n{\n    \"Whenever give aid to the safe rescuer holds\": \"G (prop_1 \u2192 ...)\",\n    \"eventually do not go near the impending unstable beam will hold\": \"F (not prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F (not prop_2))"}
{"id": 8380, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "victim", "holds,", "then", "in", "the", "next", "step", "go", "back", "to", "base", "persists", "until", "calling", "for", "help", "holds,", "or", "else", "go", "back", "to", "base", "holds", "forever."], "tl": ["deliver_aid(injured_victim)", "implies", "next", "(", "(", "go_home", "until", "get_help", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["go_home"], ["go_home"], ["get_help"]], "bad_trace": [["deliver_aid(injured_victim)"], []], "prediction": "(X prop_2 U prop_3)"}
{"id": 1488, "sentence": ["Talk", "to", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "injured", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "communicate(safe_victim)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["communicate(safe_victim)"], ["communicate(injured_hostile)"], []], "bad_trace": [["communicate(safe_victim)", "communicate(injured_hostile)"]], "prediction": "    \"mutually exclusive at all times\" : \"G (prop_1 \u2192 not prop_2) and G (prop_2 \u2192 not prop_1)\""}
{"id": 6299, "sentence": ["Whenever", "neither", "provide", "assistance", "to", "the", "safe", "victim", "nor", "photograph", "injured", "civilian", "holds,", "give", "aid", "to", "the", "injured", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_victim)", "and", "photo(injured_civilian)", ")", "implies", "finally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(safe_victim)", "photo(injured_civilian)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 97, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(which we can denote as a proposition, say prop_1), the condition of going back to the base (denoted as prop_2) should never happen again. This can be formulated as: if we are in a state where we have gone back to the base, it should not happen again in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"some point onwards\" : \"G prop_1\",\n  \"go back to base\" : \"prop_2\",\n  \"never occurs again\" : \"G not prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 G not prop_2)"}
{"id": 4141, "sentence": ["The", "system", "must", "always", "avoid", "geting", "help."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "(always) the proposition representing \"getting help\" (let's denote it as prop_1)"}
{"id": 96, "sentence": ["Whenever", "take", "a", "photo", "of", "flood", "and", "photograph", "injured", "civilian", "are", "equal,", "photograph", "injured", "civilian", "and", "talk", "to", "the", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(flood)", "double_implies", "photo(injured_civilian)", ")", "implies", "(", "photo(injured_civilian)", "double_implies", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(flood)", "photo(injured_civilian)", "communicate(safe_victim)"]], "bad_trace": [["photo(flood)", "photo(injured_civilian)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 6099, "sentence": ["Whenever", "communicate", "with", "the", "safe", "hostile", "holds,", "give", "aid", "to", "the", "safe", "victim", "holds", "as", "well."], "tl": ["globally", "(", "communicate(safe_hostile)", "implies", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_hostile)", "deliver_aid(safe_victim)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["communicate(safe_hostile)"], []], "prediction": "(prop_1 \u2192 F prop_2)\", where \"prop_1\" represents \"communicate with the safe hostile holds\" and \"prop_2\" represents \"give aid to the safe victim holds\". The \"G\" operator indicates that this condition must always hold, and the \"F\" operator indicates that the action of giving aid will eventually occur when the condition is met.\n\n2. *Explanation dictionary* \u2013\n{\n  \"communicate with the safe hostile holds\": \"prop_1\",\n  \"give aid to the safe victim holds\": \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 523, "sentence": ["The", "system", "must", "always", "avoid", "recording", "unsafe", "victim."], "tl": ["globally", "(", "not", "record(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["record(unsafe_victim)"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 6841, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "do", "not", "go", "near", "the", "probable", "gas", "leak", "and", "establish", "communication", "with", "the", "injured", "victim", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "avoid(probable_gas_leak)", "and", "communicate(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(probable_gas_leak)"], ["communicate(injured_victim)"], []], "bad_trace": [["avoid(probable_gas_leak)", "communicate(injured_victim)"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 4592, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "picture", "of", "flood", "and", "request", "assistance", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(flood)", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], ["get_help"], []], "bad_trace": [["photo(flood)", "get_help"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 180, "sentence": ["If", "every", "go", "back", "to", "base", "is", "eventually", "followed", "by", "photographing", "gas", "leak,", "then", "stay", "away", "from", "the", "nearest", "fire", "source", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "photo(gas_leak)", ")", "implies", "globally", "finally", "avoid(nearest_fire_source)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["go_home"], ["photo(gas_leak)", "avoid(nearest_fire_source)"]], "bad_trace": [["go_home"], ["photo(gas_leak)"]], "prediction": "(prop_1) is eventually followed by photographing a gas leak (prop_2), then the consequence is that staying away from the nearest fire source (prop_3) must occur infinitely often. This can be expressed using the implication operator (\u2192) and the globally operator (G) to indicate that the consequence must hold true at all times.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every go back to base is eventually followed by photographing gas leak\": \"G (prop_1 \u2192 F prop_2)\",\n  \"stay away from the nearest fire source must occur infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 5573, "sentence": ["This", "controller", "must", "eventually", "do", "not", "go", "near", "the", "probable", "debris", "and", "record", "unsafe", "victim."], "tl": ["finally", "(", "avoid(probable_debris)", "and", "record(unsafe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [[], ["avoid(probable_debris)"], ["avoid(probable_debris)", "record(unsafe_victim)"]], "bad_trace": [[], ["avoid(probable_debris)"], []], "prediction": "3. *FINAL:* F (not prop_1 and prop_2) FINISH"}
{"id": 2381, "sentence": ["If", "return", "to", "base", "happens", "infinitely", "often,", "then", "so", "does", "call", "for", "help."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "get_help"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "(F) in conjunction with the \"globally\" operator (G) to indicate that the event will keep happening. The structure of the command can be broken down as follows:\n   - \"return to base happens infinitely often\" translates to G(F(prop_1)).\n   - \"call for help happens infinitely often\" translates to G(F(prop_2)).\n   - The overall structure is a conditional (implies) where the first part is the condition and the second part is the consequence.\n\n2. *Explanation dictionary* \u2013\n{\n  \"return to base happens infinitely often\" : \"G(F(prop_1))\",\n  \"call for help happens infinitely often\" : \"G(F(prop_2))\"\n}\n\n3. *FINAL:* G(F(prop_1)) \u2192 G(F(prop_2))"}
{"id": 2813, "sentence": ["Whenever", "request", "assistance", "and", "return", "to", "base", "are", "equal,", "return", "to", "base", "and", "avoid", "the", "nearest", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "avoid(nearest_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["get_help", "go_home", "avoid(nearest_flood)"]], "bad_trace": [["get_help", "go_home"]], "prediction": "   - The entire command can be expressed as: G((prop_1 and prop_2) \u2192 (prop_2 and prop_3))."}
{"id": 2571, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "begin", "recording", "safe", "person", "and", "stay", "away", "from", "the", "probable", "gas", "leak", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "record(safe_person)", "and", "avoid(probable_gas_leak)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["record(safe_person)"], ["avoid(probable_gas_leak)"], []], "bad_trace": [["record(safe_person)", "avoid(probable_gas_leak)"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 3478, "sentence": ["This", "controller", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(F) to denote that the condition will be met at some point in the future. We can represent \"avoid getting help\" as \"not getting help,\" which we can denote with a placeholder like prop_1. Therefore, the complete formula will be F(not prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"This controller must eventually avoid getting help.\" : \"F(not prop_1)\"\n}\n\n3. *FINAL:* F(not prop_1)"}
{"id": 4542, "sentence": ["Either", "go", "back", "to", "base", "or", "communicate", "with", "the", "injured", "hostile", "happens", "infinitely", "often."], "tl": ["globally", "finally", "go_home", "or", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"]], "bad_trace": [[]], "prediction": "(prop_1 or prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 2231, "sentence": ["If", "every", "record", "unsafe", "person", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "provide", "assistance", "to", "the", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(unsafe_person)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(unsafe_person)"], ["go_home", "deliver_aid(safe_victim)"]], "bad_trace": [["record(unsafe_person)"], ["go_home"]], "prediction": "(prop_1 \u2192 F prop_2),\" where prop_1 represents \"record unsafe person\" and prop_2 represents \"going back to base.\" The consequence states that \"provide assistance to the safe victim must occur infinitely often,\" which can be expressed as \"G F prop_3,\" where prop_3 represents \"provide assistance to the safe victim.\" The entire command can be structured as an implication.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every record unsafe person is eventually followed by going back to base\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"provide assistance to the safe victim must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 3205, "sentence": ["Whenever", "return", "to", "base", "holds,", "eventually", "provide", "assistance", "to", "the", "safe", "hostile", "will", "hold."], "tl": ["globally", "(", "go_home", "implies", "finally", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home"], [], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], [], []], "prediction": "(prop_1)\",\n  \"eventually provide assistance to the safe hostile will hold\" : \"F (prop_2)\"\n}\n\n3. *FINAL:* G (prop_1) \u2192 F (prop_2)"}
{"id": 8817, "sentence": ["If", "photograph", "unsafe", "civilian", "ever", "holds,", "begin", "recording", "safe", "rescuer", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "photo(unsafe_civilian)", ")", "implies", "(", "not", "photo(unsafe_civilian)", "until", "(", "record(safe_rescuer)", "and", "not", "photo(unsafe_civilian)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["record(safe_rescuer)"], ["photo(unsafe_civilian)"]], "bad_trace": [["photo(unsafe_civilian)"]], "prediction": "(representing \"photograph unsafe civilian holds\") is true at any point in the future (eventually).\n   - \"begin recording safe rescuer\" translates to the action of starting to record, represented by `prop_2`.\n   - \"must have held beforehand\" indicates that before the recording starts, the proposition `prop_3` (representing \"safe rescuer has held\") must have been true at some point in the past. This can be expressed using the \"until\" operator, indicating that `prop_3` must hold until `prop_2` becomes true.\n\n2. *Explanation dictionary*:\n```json\n{\n  \"photograph unsafe civilian ever holds\": \"F prop_1\",\n  \"begin recording safe rescuer\": \"prop_2\",\n  \"must have held beforehand\": \"G (prop_3 U prop_2)\"\n}\n```\n\n3. *FINAL:* F prop_1 \u2192 (G (prop_3 U prop_2))"}
{"id": 7647, "sentence": ["Our", "agent", "must", "Eventually,", "both", "go", "back", "to", "base", "and", "avoid", "the", "nearest", "gas", "leak", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["go_home", "avoid(nearest_gas_leak)"]], "bad_trace": [[], [], []], "prediction": "(F) achieve two conditions simultaneously: going back to base (prop_1) and avoiding the nearest gas leak (prop_2). The phrase \"both... and\" indicates that these two conditions must hold at the same time, which is represented using the conjunction operator (and).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both go back to base and avoid the nearest gas leak hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 9142, "sentence": ["The", "robot", "must", "always", "have", "either", "deliver", "aid", "to", "the", "injured", "hostile", "or", "stay", "away", "from", "the", "probable", "unstable", "beam."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "or", "avoid(probable_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["avoid(probable_unstable_beam)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"], [], []], "prediction": "(globally) have one of two conditions: either it delivers aid to the injured hostile (which we can represent as prop_1) or it stays away from the probable unstable beam (which we can represent as prop_2). This can be expressed in temporal logic as a globally quantified expression of a disjunction (logical OR) between these two propositions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always have either deliver aid to the injured hostile\" : \"prop_1\",\n  \"stay away from the probable unstable beam\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 827, "sentence": ["You", "must", "always", "have", "either", "photograph", "injured", "victim", "or", "photograph", "unstable", "beam."], "tl": ["globally", "(", "photo(injured_victim)", "or", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(injured_victim)"], ["photo(unstable_beam)"], ["photo(injured_victim)"]], "bad_trace": [["photo(injured_victim)"], [], []], "prediction": "(G), indicating that the condition must hold at all times. The phrase \"either...or...\" indicates a disjunction (or) between two propositions: \"photograph injured victim\" and \"photograph unstable beam.\" We can represent these propositions as prop_1 and prop_2, respectively.\n\n2. *Explanation dictionary* \u2013\n{\n  \"must always have\" : \"G\",\n  \"either photograph injured victim\" : \"prop_1\",\n  \"or photograph unstable beam\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 3831, "sentence": ["If", "take", "a", "video", "of", "unsafe", "person", "holds,", "then", "in", "the", "next", "step", "deliver", "aid", "to", "the", "injured", "hostile", "persists", "until", "calling", "for", "help", "holds,", "or", "else", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["record(unsafe_person)", "implies", "next", "(", "(", "deliver_aid(injured_hostile)", "until", "get_help", ")", "or", "globally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["record(unsafe_person)"], ["deliver_aid(injured_hostile)"], ["deliver_aid(injured_hostile)"], ["get_help"]], "bad_trace": [["record(unsafe_person)"], []], "prediction": "  \"deliver aid"}
{"id": 5414, "sentence": ["The", "robot", "must", "Please", "photograph", "debris", "and", "then", "take", "a", "photo", "of", "safe", "person."], "tl": ["(", "photo(debris)", "until", "photo(safe_person)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["photo(debris)", "photo(safe_person)"]], "bad_trace": [[], [], []], "prediction": "(represented by prop_1), and then it must take a photo of a safe person (represented by prop_2)"}
{"id": 9610, "sentence": ["Whenever", "establish", "communication", "with", "the", "safe", "victim", "holds,", "eventually", "begin", "recording", "flood", "will", "hold."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "record(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["communicate(safe_victim)"], [], ["record(flood)"]], "bad_trace": [["communicate(safe_victim)"], [], []], "prediction": "(G). The phrase \"eventually begin recording flood will hold\" indicates that at some point in the future, the proposition for beginning to record the flood will be true, which can be represented using the finally operator (F)"}
{"id": 2117, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "calling", "for", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(F)"}
{"id": 1192, "sentence": ["If", "every", "deliver", "aid", "to", "the", "injured", "victim", "is", "eventually", "followed", "by", "requesting", "assistance,", "then", "return", "home", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["get_help", "go_home"]], "bad_trace": [["deliver_aid(injured_victim)"], ["get_help"]], "prediction": "3. *FINAL:* (F(prop_1) \u2192 G(F(prop_2))) FINISH"}
{"id": 3929, "sentence": ["Whenever", "neither", "record", "fire", "source", "nor", "photograph", "fire", "source", "holds,", "avoid", "the", "probable", "fire", "source", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(fire_source)", "and", "photo(fire_source)", ")", "implies", "finally", "avoid(probable_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}}, "good_trace": [["record(fire_source)", "photo(fire_source)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) \u2192 not F prop_3) FINISH"}
{"id": 8699, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "hostile", "ever", "holds,", "request", "assistance", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "deliver_aid(injured_hostile)", ")", "implies", "(", "not", "deliver_aid(injured_hostile)", "until", "(", "get_help", "and", "not", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"]], "prediction": "(\u2192) and the \"finally\" (F)"}
{"id": 3271, "sentence": ["You", "must", "always", "maintain", "both", "avoid", "the", "active", "fire", "source", "and", "establish", "communication", "with", "the", "injured", "hostile."], "tl": ["globally", "(", "avoid(active_fire_source)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["avoid(active_fire_source)", "communicate(injured_hostile)"], ["avoid(active_fire_source)", "communicate(injured_hostile)"], ["avoid(active_fire_source)", "communicate(injured_hostile)"]], "bad_trace": [["avoid(active_fire_source)"], ["avoid(active_fire_source)"], ["communicate(injured_hostile)"]], "prediction": "(1) avoiding the active fire source and (2) establishing communication with the injured hostile. The phrase \"must always\" translates to the temporal operator \"globally\" (G), indicating that these conditions should hold at all times. Therefore, we can express this as a conjunction of the two propositions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the active fire source\": \"prop_1\",\n  \"establish communication with the injured hostile\": \"prop_2\",\n  \"must always\": \"G\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 6963, "sentence": ["If", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds,", "then", "in", "the", "next", "step", "return", "home", "persists", "until", "recording", "injured", "rescuer", "holds,", "or", "else", "return", "home", "holds", "forever."], "tl": ["avoid(nearest_gas_leak)", "implies", "next", "(", "(", "go_home", "until", "record(injured_rescuer)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_gas_leak)"], ["go_home"], ["go_home"], ["record(injured_rescuer)"]], "bad_trace": [["avoid(nearest_gas_leak)"], []], "prediction": "3. *FINAL:* (prop_1 \u2192 (X prop_2 U prop_3)) or (not prop_1 \u2192 G prop_2) FINISH"}
{"id": 6964, "sentence": ["The", "system", "must", "eventually", "take", "a", "photo", "of", "gas", "leak", "or", "request", "assistance."], "tl": ["finally", "(", "photo(gas_leak)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["photo(gas_leak)"]], "bad_trace": [[], [], []], "prediction": "  \"or\": \"or\""}
{"id": 3763, "sentence": ["Whenever", "neither", "go", "home", "nor", "begin", "recording", "safe", "civilian", "holds,", "communicate", "with", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(safe_civilian)", ")", "implies", "finally", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "record(safe_civilian)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G(not prop_1 and not prop_2 \u2192 F prop_4) FINISH"}
{"id": 8089, "sentence": ["If", "go", "home", "holds", "and", "stay", "away", "from", "the", "inactive", "gas", "leak", "holds", "next,", "then", "stay", "away", "from", "the", "nearest", "flood", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "avoid(inactive_gas_leak)", "implies", "next", "next", "avoid(nearest_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["go_home"], ["avoid(inactive_gas_leak)"], ["avoid(nearest_flood)"]], "bad_trace": [["go_home"], ["avoid(inactive_gas_leak)"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 1524, "sentence": ["If", "do", "not", "go", "near", "the", "active", "debris", "holds", "and", "call", "for", "help", "holds", "next,", "then", "take", "a", "video", "of", "injured", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(active_debris)", "and", "next", "get_help", "implies", "next", "next", "record(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(active_debris)"], ["get_help"], ["record(injured_rescuer)"]], "bad_trace": [["avoid(active_debris)"], ["get_help"], []], "prediction": "(not prop_1 and prop_2)"}
{"id": 9994, "sentence": ["Request", "assistance", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G). Therefore, we can express this as G(prop_1), where prop_1 represents the proposition \"request for assistance holds.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"Request assistance holds at all times.\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 50, "sentence": ["Photograph", "gas", "leak", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(gas_leak)", "and", "next", "photo(gas_leak)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["photo(gas_leak)"], [], ["photo(gas_leak)"]], "bad_trace": [["photo(gas_leak)"], [], [], []], "prediction": "(or held) with a grace period of at most two steps for recovery. This can be expressed in temporal logic as stating that if a gas leak is detected (prop_1), then it should hold globally (G) that the recovery condition (prop_2) must be satisfied within the next two steps (X prop_2 U X prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Photograph\": \"prop_1\",\n  \"gas\": \"prop_1\",\n  \"leak\": \"prop_1\",\n  \"should\": \"\",\n  \"always\": \"G\",\n  \"hold,\": \"prop_1\",\n  \"with\": \"\",\n  \"at\": \"\",\n  \"most\": \"\",\n  \"a\": \"\",\n  \"two-step\": \"X\",\n  \"grace\": \"\",\n  \"period\": \"\",\n  \"for\": \"\",\n  \"recovery.\": \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 (prop_2 U X prop_2))"}
{"id": 1598, "sentence": ["If", "take", "a", "photo", "of", "injured", "civilian", "holds,", "then", "in", "the", "next", "step", "communicate", "with", "the", "safe", "victim", "persists", "until", "delivering", "aid", "to", "the", "safe", "rescuer", "holds,", "or", "else", "communicate", "with", "the", "safe", "victim", "holds", "forever."], "tl": ["photo(injured_civilian)", "implies", "next", "(", "(", "communicate(safe_victim)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "communicate(safe_victim)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(injured_civilian)"], ["communicate(safe_victim)"], ["communicate(safe_victim)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["photo(injured_civilian)"], []], "prediction": "(X prop_2 U prop_3)"}
{"id": 8819, "sentence": ["From", "some", "point", "onwards,", "call", "for", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "(G) to indicate that from that point onwards, prop_1 will not occur.\n\n2. *Explanation dictionary* \u2013\n{\n  \"From some point onwards\" : \"X\",\n  \"call for help\" : \"prop_1\",\n  \"never occurs again\" : \"not prop_1\"\n}\n\n3. *FINAL:* X (prop_1 \u2192 G (not prop_1))"}
{"id": 6007, "sentence": ["Talk", "to", "the", "safe", "hostile", "must", "hold", "until", "begin", "recording", "safe", "victim", "does,", "or", "else", "talk", "to", "the", "safe", "hostile", "holds", "forever."], "tl": ["(", "communicate(safe_hostile)", "until", "record(safe_victim)", ")", "or", "globally", "communicate(safe_hostile)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_hostile)"], ["communicate(safe_hostile)"], ["record(safe_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* prop_1 U prop_2 or G prop_1 FINISH"}
{"id": 3343, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "hostile", "nor", "return", "home", "holds,", "stay", "away", "from", "the", "probable", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "go_home", ")", "implies", "finally", "avoid(probable_gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["deliver_aid(safe_hostile)", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 F prop_3 FINISH"}
{"id": 5020, "sentence": ["You", "must", "always", "have", "either", "take", "a", "picture", "of", "gas", "leak", "or", "take", "a", "photo", "of", "unsafe", "civilian."], "tl": ["globally", "(", "photo(gas_leak)", "or", "photo(unsafe_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(gas_leak)"], ["photo(unsafe_civilian)"], ["photo(gas_leak)"]], "bad_trace": [["photo(gas_leak)"], [], []], "prediction": "(G), indicating that the condition must hold at all times. The phrase \"either... or...\" indicates a disjunction (or) between two propositions: \"take a picture of gas leak\" and \"take a photo of unsafe civilian.\" We can represent these actions with placeholders prop_1 and prop_2.\n\n2. *Explanation dictionary* \u2013\n{\n  \"must always have\" : \"G\",\n  \"either take a picture of gas leak\" : \"prop_1\",\n  \"or take a photo of unsafe civilian\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 8888, "sentence": ["If", "go", "home", "holds", "and", "request", "assistance", "holds", "next,", "then", "give", "aid", "to", "the", "safe", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "get_help", "implies", "next", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home"], ["get_help"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], ["get_help"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 425, "sentence": ["Our", "agent", "must", "eventually", "request", "assistance", "or", "talk", "to", "the", "injured", "rescuer."], "tl": ["finally", "(", "get_help", "or", "communicate(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "  \"or\" : \"or\""}
{"id": 9286, "sentence": ["The", "robot", "must", "eventually", "get", "help", "and", "go", "back", "to", "base."], "tl": ["finally", "(", "get_help", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["get_help"], ["get_help", "go_home"]], "bad_trace": [[], ["get_help"], []], "prediction": "(prop_1), where prop_1 represents the event of getting help. The phrase \"go back to base\" translates to prop_2, where prop_2 represents the action of going back to base. The conjunction of these two requirements is expressed as F(prop_1) and prop_2.\n\n2. *Explanation dictionary* \u2013\n{\n  \"eventually get help\": \"F(prop_1)\",\n  \"go back to base\": \"prop_2\"\n}\n\n3. *FINAL:* F(prop_1)"}
{"id": 2924, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "victim", "is", "eventually", "followed", "by", "photographing", "fire", "source,", "then", "record", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "photo(fire_source)", ")", "implies", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["communicate(safe_victim)"], ["photo(fire_source)", "record(gas_leak)"]], "bad_trace": [["communicate(safe_victim)"], ["photo(fire_source)"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent states that \"every establish communication with the safe victim is eventually followed by photographing fire source,\" which can be expressed as \"G (prop_1 \u2192 F prop_2)\" where prop_1 represents the establishment of communication and prop_2 represents photographing the fire source. The consequent states that \"record gas leak must occur infinitely often,\" which can be expressed as \"G F prop_3,\" where prop_3 represents recording the gas leak. The entire command can be expressed as \"G (prop_1 \u2192 F prop_2) \u2192 G F prop_3.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"every establish communication with the safe victim is eventually followed by photographing fire source\": \"G (prop_1 \u2192 F prop_2)\",\n  \"record gas leak must occur infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9957, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "go", "back", "to", "base", "and", "request", "assistance", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "go_home", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], ["get_help"], []], "bad_trace": [["go_home", "get_help"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 4328, "sentence": ["Whenever", "return", "to", "base", "and", "give", "aid", "to", "the", "safe", "hostile", "are", "equal,", "give", "aid", "to", "the", "safe", "hostile", "and", "communicate", "with", "the", "injured", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(safe_hostile)", ")", "implies", "(", "deliver_aid(safe_hostile)", "double_implies", "communicate(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_hostile)", "communicate(injured_victim)"]], "bad_trace": [["go_home", "deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 2773, "sentence": ["Whenever", "return", "to", "base", "holds,", "record", "safe", "rescuer", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "record(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home", "record(safe_rescuer)"], ["record(safe_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "(G) to indicate that the implication must hold at all times.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever return to base holds\" : \"G(prop_1)\",\n  \"record safe rescuer holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G(prop_1 \u2192 prop_2)"}
{"id": 1341, "sentence": ["Whenever", "record", "debris", "holds,", "communicate", "with", "the", "injured", "victim", "holds", "as", "well."], "tl": ["globally", "(", "record(debris)", "implies", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(debris)", "communicate(injured_victim)"], ["communicate(injured_victim)"]], "bad_trace": [["record(debris)"], []], "prediction": "  \"implies\" : \"\u2192\""}
{"id": 4566, "sentence": ["Whenever", "go", "back", "to", "base", "and", "communicate", "with", "the", "safe", "victim", "are", "equal,", "communicate", "with", "the", "safe", "victim", "and", "provide", "assistance", "to", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "communicate(safe_victim)", ")", "implies", "(", "communicate(safe_victim)", "double_implies", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home", "communicate(safe_victim)", "deliver_aid(injured_hostile)"]], "bad_trace": [["go_home", "communicate(safe_victim)"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_3 and prop_4)) FINISH"}
{"id": 6143, "sentence": ["Whenever", "begin", "recording", "safe", "person", "and", "take", "a", "photo", "of", "injured", "victim", "are", "equal,", "take", "a", "photo", "of", "injured", "victim", "and", "provide", "assistance", "to", "the", "injured", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_person)", "double_implies", "photo(injured_victim)", ")", "implies", "(", "photo(injured_victim)", "double_implies", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(safe_person)", "photo(injured_victim)", "deliver_aid(injured_rescuer)"]], "bad_trace": [["record(safe_person)", "photo(injured_victim)"]], "prediction": "3. *FINAL:* G(prop_1 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 4099, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "victim", "holds,", "avoid", "the", "nearest", "gas", "leak", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "(", "next", "(", "next", "avoid(nearest_gas_leak)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], [], ["avoid(nearest_gas_leak)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "(prop_1 \u2192 X X X prop_2)\",\n    \"avoid the nearest gas leak holds exactly three steps later\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X X X prop_2)"}
{"id": 741, "sentence": ["Once", "deliver", "aid", "to", "the", "injured", "victim", "has", "occurred,", "deliver", "aid", "to", "the", "injured", "rescuer", "will", "never", "occur", "again."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "globally", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], [], ["deliver_aid(injured_rescuer)"]], "prediction": "(F) condition. The second part of the command, \"deliver aid to the injured rescuer will never occur again,\" indicates that after the first event, the action of delivering aid to the rescuer should not happen in the future, which can be expressed using \"globally\" (G) to ensure it never happens again. Therefore, the entire command can be structured as: F(prop_1) \u2192 G(not prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Once deliver aid to the injured victim has occurred\" : \"F(prop_1)\",\n  \"deliver aid to the injured rescuer will never occur again\" : \"G(not prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(not prop_2)"}
{"id": 274, "sentence": ["If", "take", "a", "picture", "of", "unstable", "beam", "happens", "infinitely", "often,", "then", "so", "does", "record", "gas", "leak."], "tl": ["globally", "finally", "photo(unstable_beam)", "implies", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [[]], "bad_trace": [["photo(unstable_beam)"]], "prediction": "(prop_1)\" where \"prop_1\" is the proposition for taking a picture of the unstable beam. The phrase \"then so does record gas leak\" can be represented as \"F (prop_2)\" where \"prop_2\" is the proposition for recording a gas leak. The entire command can be expressed as \"prop_1 U prop_2\" indicating that if the first condition holds infinitely often, then the second condition must also hold.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n    \"take a picture of unstable beam happens infinitely often\": \"F(prop_1)\",\n    \"record gas leak\": \"F(prop_2)\"\n}\n```\n\n3. *FINAL:* F(prop_1) \u2192 F(prop_2)"}
{"id": 1384, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "victim", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "safe", "hostile,", "then", "go", "back", "to", "base", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "deliver_aid(safe_hostile)", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_victim)"], ["deliver_aid(safe_hostile)", "go_home"]], "bad_trace": [["communicate(safe_victim)"], ["deliver_aid(safe_hostile)"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent can be expressed as \"G (prop_1 \u2192 F prop_2)\" where prop_1 represents establishing communication and prop_2 represents giving aid. The consequent can be expressed as \"G F prop_3\" where prop_3 represents going back to base. The entire statement can be combined using implication.\n\n2. *Explanation dictionary* \u2013\n{\n  \"establish communication with the safe victim\" : \"prop_1\",\n  \"give aid to the safe hostile\" : \"prop_2\",\n  \"go back to base\" : \"prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9833, "sentence": ["Record", "gas", "leak", "holds", "at", "all", "times."], "tl": ["globally", "record(gas_leak)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(gas_leak)"]], "bad_trace": [["record(gas_leak)"], []], "prediction": "(G), which indicates that the condition must hold in every state of the system. We can represent \"gas leak holds\" with a placeholder, such as prop_1.\n\n2. *Explanation dictionary* \u2013\n{\n  \"gas leak holds\" : \"prop_1\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 9854, "sentence": ["Whenever", "give", "aid", "to", "the", "safe", "rescuer", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "equal,", "establish", "communication", "with", "the", "safe", "hostile", "and", "take", "a", "video", "of", "gas", "leak", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_rescuer)", "double_implies", "communicate(safe_hostile)", ")", "implies", "(", "communicate(safe_hostile)", "double_implies", "record(gas_leak)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "communicate(safe_hostile)", "record(gas_leak)"]], "bad_trace": [["deliver_aid(safe_rescuer)", "communicate(safe_hostile)"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 8626, "sentence": ["You", "must", "do", "not", "go", "near", "the", "active", "unstable", "beam", "holds", "at", "all", "times."], "tl": ["globally", "avoid(active_unstable_beam)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["You", "must", "prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["avoid(active_unstable_beam)"]], "bad_trace": [["avoid(active_unstable_beam)"], []], "prediction": "(\"You\") must not approach a specific condition (\"go near the active unstable beam\")"}
{"id": 2320, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F)"}
{"id": 4601, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "take", "a", "picture", "of", "injured", "person", "and", "photograph", "injured", "civilian."], "tl": ["globally", "(", "photo(injured_person)", "and", "photo(injured_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["photo(injured_person)", "photo(injured_civilian)"], ["photo(injured_person)", "photo(injured_civilian)"], ["photo(injured_person)", "photo(injured_civilian)"]], "bad_trace": [["photo(injured_person)"], ["photo(injured_person)"], ["photo(injured_civilian)"]], "prediction": "(G), and the conjunction of the two actions is represented using the \"and\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n    \"Our agent must always maintain both take a picture of injured person and photograph injured civilian.\" : \"G (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 5725, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "nearest", "flood", "and", "do", "not", "go", "near", "the", "active", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(nearest_flood)", "and", "avoid(active_fire_source)", ")", ")", "and", "globally", "(", "avoid(nearest_flood)", "or", "avoid(active_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [["avoid(nearest_flood)"], ["avoid(active_fire_source)"], ["avoid(nearest_flood)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) \u2192 (not prop_1 and not prop_2) FINISH"}
{"id": 6878, "sentence": ["Whenever", "photograph", "unsafe", "victim", "holds,", "return", "to", "base", "holds", "as", "well."], "tl": ["globally", "(", "photo(unsafe_victim)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unsafe_victim)", "go_home"], ["go_home"]], "bad_trace": [["photo(unsafe_victim)"], []], "prediction": "(G). The phrase \"return to base holds as well\" indicates that when the first condition is true, the second condition must also be true. This can be expressed using the implication operator (\u2192). Therefore, the complete formula states that globally, if the first condition is true, then the second condition must also be true.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Whenever photograph unsafe victim holds\" : \"G prop_1\",\n  \"return to base holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 6810, "sentence": ["If", "every", "take", "a", "video", "of", "gas", "leak", "is", "eventually", "followed", "by", "geting", "help,", "then", "establish", "communication", "with", "the", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(gas_leak)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "communicate(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(gas_leak)"], ["get_help", "communicate(safe_victim)"]], "bad_trace": [["record(gas_leak)"], ["get_help"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent can be expressed as \"G (prop_1 \u2192 F prop_2)\", meaning globally, if prop_1 (taking a video of a gas leak) occurs, then eventually prop_2 (getting help) will follow. The consequent states that prop_3 (establishing communication with the safe victim) must occur infinitely often, which can be expressed as \"G F prop_3\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"taking a video of a gas leak\" : \"prop_1\",\n  \"getting help\" : \"prop_2\",\n  \"establishing communication with the safe victim\" : \"prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 4545, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "give", "aid", "to", "the", "safe", "hostile", "and", "record", "safe", "rescuer."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "and", "record(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(safe_rescuer)"], ["deliver_aid(safe_hostile)", "record(safe_rescuer)"], ["deliver_aid(safe_hostile)", "record(safe_rescuer)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["record(safe_rescuer)"]], "prediction": "(globally), indicating that the conditions must hold at all times. The conjunction \"both ... and ...\" indicates that both conditions need to be satisfied simultaneously.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Our agent must always maintain both give aid to the safe hostile and record safe rescuer.\" : \"G (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 7210, "sentence": ["Either", "avoid", "the", "probable", "debris", "or", "return", "home", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(probable_debris)", "or", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_debris)"]], "bad_trace": [[]], "prediction": "(F) combined with the \"globally\" operator (G) to indicate that the event will happen repeatedly. Thus, we can express this as: (F prop_1) or (F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the probable debris\" : \"prop_1\",\n  \"return home\" : \"prop_2\",\n  \"infinitely often\" : \"F\"\n}\n\n3. *FINAL:* F(prop_1) or F(prop_2)"}
{"id": 9313, "sentence": ["You", "must", "Eventually,", "both", "take", "a", "photo", "of", "flood", "and", "take", "a", "picture", "of", "fire", "source", "hold", "simultaneously."], "tl": ["finally", "(", "photo(flood)", "and", "photo(fire_source)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(flood)", "photo(fire_source)"]], "bad_trace": [[], [], []], "prediction": "(F) both conditions (taking a photo of a flood and taking a picture of a fire source) must hold true at the same time (using the 'and' operator).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both take a photo of flood and take a picture of fire source hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 1424, "sentence": ["The", "system", "must", "always", "have", "either", "photograph", "fire", "source", "or", "go", "back", "to", "base."], "tl": ["globally", "(", "photo(fire_source)", "or", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(fire_source)"], ["go_home"], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], []], "prediction": "(globally) have one of two conditions: either it must have a photograph of the fire source (represented by prop_1) or it must go back to base (represented by prop_2). This can be expressed using the globally operator (G) combined with a logical or (or) between the two propositions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"The system must always have either photograph fire source\" : \"G (prop_1 or prop_2)\",\n  \"photograph fire source\" : \"prop_1\",\n  \"go back to base\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 6540, "sentence": ["Whenever", "go", "back", "to", "base", "and", "take", "a", "video", "of", "unsafe", "person", "are", "equal,", "take", "a", "video", "of", "unsafe", "person", "and", "deliver", "aid", "to", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "record(unsafe_person)", ")", "implies", "(", "record(unsafe_person)", "double_implies", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home", "record(unsafe_person)", "deliver_aid(injured_hostile)"]], "bad_trace": [["go_home", "record(unsafe_person)"]], "prediction": "3. *FINAL:* G (prop_1 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 2491, "sentence": ["This", "controller", "must", "always", "maintain", "both", "give", "aid", "to", "the", "injured", "victim", "and", "record", "injured", "victim."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "and", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)", "record(injured_victim)"], ["deliver_aid(injured_victim)", "record(injured_victim)"], ["deliver_aid(injured_victim)", "record(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(injured_victim)"]], "prediction": "(at all times). Therefore, we can express this as a conjunction of two propositions that must always be true.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always maintain both give aid to the injured victim and record injured victim\" : \"G (prop_1 and prop_2)\",\n  \"give aid to the injured victim\" : \"prop_1\",\n  \"record injured victim\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4625, "sentence": ["Whenever", "avoid", "the", "inactive", "unstable", "beam", "holds,", "from", "the", "next", "step", "onwards", "provide", "assistance", "to", "the", "safe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(inactive_unstable_beam)", "implies", "next", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["avoid(inactive_unstable_beam)"], [], []], "prediction": "(where prop_1 represents \"the inactive unstable beam holds\"). The phrase \"from the next step onwards\" indicates that the following condition applies starting from the next state, which can be represented with the \"next\" operator (X). The phrase \"provide assistance to the safe rescuer will eventually hold\" indicates that eventually (F) the condition of providing assistance to the safe rescuer (prop_2) will be true. Therefore, the entire command can be structured as: if prop_1 holds, then from the next step onwards, prop_2 will eventually hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the inactive unstable beam holds\" : \"prop_1\",\n  \"provide assistance to the safe rescuer will eventually hold\" : \"prop_2\"\n}\n\n3. *FINAL:* (prop_1 \u2192 X F prop_2)"}
{"id": 3849, "sentence": ["In", "this", "task,", "avoid", "the", "probable", "flood,", "then", "call", "for", "help."], "tl": ["(", "avoid(probable_flood)", "until", "get_help", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_flood)", "get_help"]], "bad_trace": [[], [], []], "prediction": "(prop_1) that must hold true until the action of calling for help (prop_2)"}
{"id": 881, "sentence": ["Whenever", "go", "home", "holds,", "from", "the", "next", "step", "onwards", "photograph", "gas", "leak", "will", "eventually", "hold."], "tl": ["globally", "(", "go_home", "implies", "next", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home"], [], ["photo(gas_leak)"]], "bad_trace": [["go_home"], [], []], "prediction": "(prop_1 \u2192 ...)\",\n  \"from the next step onwards\" : \"X ...\",\n  \"photograph gas leak will eventually hold\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X F prop_2)"}
{"id": 4576, "sentence": ["From", "some", "point", "onwards,", "return", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(G)"}
{"id": 8078, "sentence": ["If", "deliver", "aid", "to", "the", "safe", "rescuer", "holds", "and", "provide", "assistance", "to", "the", "injured", "hostile", "holds", "next,", "then", "return", "home", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(injured_hostile)"], ["go_home"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(injured_hostile)"], []], "prediction": "(X).\n   - \"then return home holds in the step after that\" indicates that if the previous conditions are met, then in the step after the next (which is the second step from now), `prop_3` (return home) should hold.\n\n   Therefore, the entire command can be expressed as: if `prop_1` and `prop_2` hold now, then `prop_3` should hold in the step after the next.\n\n2. *Explanation dictionary*:\n   {\n     \"deliver aid to the safe rescuer holds\": \"prop_1\",\n     \"provide assistance to the injured hostile holds\": \"prop_2\",\n     \"return home holds\": \"prop_3\"\n   }\n\n3. *FINAL:* (prop_1 and prop_2)"}
{"id": 6863, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "return", "home", "and", "provide", "assistance", "to", "the", "injured", "rescuer", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "go_home", "and", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_rescuer)"], []], "bad_trace": [["go_home", "deliver_aid(injured_rescuer)"]], "prediction": "3. *FINAL:* G not (prop_1 and prop_2) FINISH"}
{"id": 950, "sentence": ["If", "request", "assistance", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "safe", "hostile."], "tl": ["globally", "finally", "get_help", "implies", "globally", "finally", "deliver_aid(safe_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [[]], "bad_trace": [["get_help"]], "prediction": "(F) in conjunction with the \"globally\" operator (G) to express that both events will happen repeatedly over time.\n\n2. *Explanation dictionary* \u2013\n{\n  \"request assistance happens infinitely often\" : \"G F prop_1\",\n  \"deliver aid to the safe hostile happens infinitely often\" : \"G F prop_2\"\n}\n\n3. *FINAL:* (G F prop_1) \u2192 (G F prop_2)"}
{"id": 5254, "sentence": ["If", "take", "a", "picture", "of", "injured", "civilian", "holds,", "then", "in", "the", "next", "step", "stay", "away", "from", "the", "active", "unstable", "beam", "persists", "until", "returning", "home", "holds,", "or", "else", "stay", "away", "from", "the", "active", "unstable", "beam", "holds", "forever."], "tl": ["photo(injured_civilian)", "implies", "next", "(", "(", "avoid(active_unstable_beam)", "until", "go_home", ")", "or", "globally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["photo(injured_civilian)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["go_home"]], "bad_trace": [["photo(injured_civilian)"], []], "prediction": "3. *FINAL:* prop_1 \u2192 (X prop_2 U prop_3) or (prop_2 G) FINISH"}
{"id": 7889, "sentence": ["From", "some", "point", "onwards,", "get", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "(let's say prop_1) should not be true in any future state. Therefore, we can express this as \"from some point onwards, it is globally true that getting help does not occur,\" which translates to \"F (prop_1) \u2192 G (not prop_1)\".\n\n2. *Explanation dictionary* \u2013\n{\n  \"From some point onwards\" : \"F\",\n  \"get help\" : \"prop_1\",\n  \"never occurs again\" : \"G (not prop_1)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(not prop_1)"}
{"id": 7929, "sentence": ["Communicate", "with", "the", "safe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(safe_rescuer)", "and", "next", "communicate(safe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], [], ["communicate(safe_rescuer)"]], "bad_trace": [["communicate(safe_rescuer)"], [], [], []], "prediction": "(G) the communication (prop_1) should hold, and if it does not hold, it should be restored within two steps (X prop_1 U (X prop_1)).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Communicate\" : \"prop_1\",\n  \"with the safe rescuer\" : \"prop_1\",\n  \"should always hold\" : \"G prop_1\",\n  \"with at most a two-step grace period for recovery\" : \"not prop_1 U (X prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1))"}
{"id": 8826, "sentence": ["Whenever", "deliver", "aid", "to", "the", "injured", "rescuer", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "establish", "communication", "with", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_rescuer)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "get_help", "communicate(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_rescuer)", "get_help"]], "prediction": "3. *FINAL:* G ((prop_1 \u2194 prop_2) \u2192 (prop_3 \u2194 prop_4)) FINISH"}
{"id": 5395, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(prop_1), then it should hold (prop_1) within two steps.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Go home\" : \"prop_1\",\n  \"should always hold\" : \"G\",\n  \"with at most a two-step grace period for recovery\" : \"not prop_1 U (prop_1)\"\n}\n\n3. *FINAL:* G (not prop_1 U (prop_1))"}
{"id": 5375, "sentence": ["Both", "do", "not", "go", "near", "the", "nearest", "fire", "source", "and", "do", "not", "go", "near", "the", "impending", "fire", "source", "hold", "at", "every", "step."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "and", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["avoid(nearest_fire_source)", "avoid(impending_fire_source)"]], "bad_trace": [["avoid(nearest_fire_source)"], []], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) FINISH"}
{"id": 1389, "sentence": ["Request", "assistance", "and", "take", "a", "video", "of", "injured", "civilian", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "get_help", "and", "record(injured_civilian)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help"], ["record(injured_civilian)"], []], "bad_trace": [["get_help", "record(injured_civilian)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 29, "sentence": ["The", "robot", "must", "Eventually,", "both", "record", "unstable", "beam", "and", "do", "not", "go", "near", "the", "nearest", "flood", "hold", "simultaneously."], "tl": ["finally", "(", "record(unstable_beam)", "and", "avoid(nearest_flood)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["record(unstable_beam)", "avoid(nearest_flood)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* F(prop_1 and not prop_2) FINISH"}
{"id": 9168, "sentence": ["If", "talk", "to", "the", "safe", "rescuer", "holds", "and", "talk", "to", "the", "injured", "victim", "holds", "next,", "then", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "communicate(safe_rescuer)", "and", "next", "communicate(injured_victim)", "implies", "next", "next", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["communicate(safe_rescuer)"], ["communicate(injured_victim)"], ["avoid(impending_unstable_beam)"]], "bad_trace": [["communicate(safe_rescuer)"], ["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* (prop_1 and prop_2) \u2192 X(not prop_3) U X  FINISH"}
{"id": 6793, "sentence": ["If", "record", "unsafe", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "get", "help."], "tl": ["globally", "finally", "record(unsafe_civilian)", "implies", "globally", "finally", "get_help"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["record(unsafe_civilian)"]], "prediction": "(representing \"record unsafe civilian happens\") is true infinitely often, then the proposition `prop_2` (representing \"get help\")"}
{"id": 5157, "sentence": ["Whenever", "take", "a", "photo", "of", "unstable", "beam", "holds,", "eventually", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "will", "hold."], "tl": ["globally", "(", "photo(unstable_beam)", "implies", "finally", "avoid(inactive_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}}, "good_trace": [["photo(unstable_beam)"], [], ["avoid(inactive_gas_leak)"]], "bad_trace": [["photo(unstable_beam)"], [], []], "prediction": "(prop_1 \u2192 F (not prop_2))\", where prop_1 represents \"take a photo of unstable beam\" and prop_2 represents \"go near the inactive gas leak\". The \"eventually\" part indicates that the negation of going near the gas leak will hold at some point in the future.\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a photo of unstable beam holds\" : \"prop_1\",\n  \"do not go near the inactive gas leak will hold\" : \"not prop_2\",\n  \"whenever\" : \"G\",\n  \"eventually\" : \"F\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F (not prop_2))"}
{"id": 9275, "sentence": ["If", "communicate", "with", "the", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "stay", "away", "from", "the", "nearest", "gas", "leak", "persists", "until", "staying", "away", "from", "the", "active", "gas", "leak", "holds,", "or", "else", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds", "forever."], "tl": ["communicate(safe_victim)", "implies", "next", "(", "(", "avoid(nearest_gas_leak)", "until", "avoid(active_gas_leak)", ")", "or", "globally", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["communicate(safe_victim)"], ["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"], ["avoid(active_gas_leak)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(where `prop_1` represents the condition of communicating with the safe victim).\n   - \"then in the next step stay away from the nearest gas leak persists\" translates to `X prop_2` (where `prop_2` represents the action of staying away from the nearest gas leak).\n   - \"until staying away from the active gas leak holds\" translates to `prop_3` (where `prop_3` represents the condition of staying away from the active gas leak).\n   - \"or else stay away from the nearest gas leak holds forever\" translates to `G prop_2` (indicating that staying away from the nearest gas leak should hold globally)"}
{"id": 6495, "sentence": ["Whenever", "go", "back", "to", "base", "and", "get", "help", "are", "equal,", "get", "help", "and", "stay", "away", "from", "the", "inactive", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "avoid(inactive_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["go_home", "get_help", "avoid(inactive_unstable_beam)"]], "bad_trace": [["go_home", "get_help"]], "prediction": "(prop_1) and \"get help\" (prop_2) are equal, then the actions \"get help\" (prop_2) and \"stay away from the inactive unstable beam\" (prop_3) must also be equal. This can be expressed using the globally operator (G) to indicate that this condition must always be satisfied. The equality of actions can be represented using the double_implies operator (\u2194).\n\n2. *Explanation dictionary* \u2013\n{\n  \"go back to base\": \"prop_1\",\n  \"get help\": \"prop_2\",\n  \"stay away from the inactive unstable beam\": \"prop_3\",\n  \"are equal\": \"double_implies\"\n}\n\n3. *FINAL:* G (prop_1 double_implies prop_2) \u2192 (prop_2 double_implies prop_3)"}
{"id": 2829, "sentence": ["You", "must", "eventually", "deliver", "aid", "to", "the", "injured", "rescuer", "or", "take", "a", "picture", "of", "unsafe", "civilian."], "tl": ["finally", "(", "deliver_aid(injured_rescuer)", "or", "photo(unsafe_civilian)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [[], ["deliver_aid(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(F) to indicate that one of these actions must happen at some point in the future. The logical \"or\" operator (or) is used to connect the two possible actions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"eventually deliver aid to the injured rescuer\" : \"F prop_1\",\n  \"take a picture of unsafe civilian\" : \"prop_2\"\n}\n\n3. *FINAL:* F (prop_1 or prop_2)"}
{"id": 3225, "sentence": ["Whenever", "go", "home", "and", "give", "aid", "to", "the", "safe", "rescuer", "are", "equal,", "give", "aid", "to", "the", "safe", "rescuer", "and", "establish", "communication", "with", "the", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(safe_rescuer)", ")", "implies", "(", "deliver_aid(safe_rescuer)", "double_implies", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_rescuer)", "communicate(safe_victim)"]], "bad_trace": [["go_home", "deliver_aid(safe_rescuer)"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 4534, "sentence": ["This", "controller", "must", "Please", "return", "to", "base", "and", "then", "communicate", "with", "the", "injured", "victim."], "tl": ["(", "go_home", "until", "communicate(injured_victim)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "communicate(injured_victim)"]], "bad_trace": [[], [], []], "prediction": "(X prop_2)"}
{"id": 7116, "sentence": ["This", "controller", "must", "eventually", "go", "home", "and", "take", "a", "video", "of", "gas", "leak."], "tl": ["finally", "(", "go_home", "and", "record(gas_leak)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [[], ["go_home"], ["go_home", "record(gas_leak)"]], "bad_trace": [[], ["go_home"], []], "prediction": "(prop_1 and prop_2)"}
{"id": 2494, "sentence": ["Whenever", "neither", "do", "not", "go", "near", "the", "impending", "flood", "nor", "do", "not", "go", "near", "the", "nearest", "debris", "holds,", "return", "home", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(impending_flood)", "and", "avoid(nearest_debris)", ")", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_flood)", "avoid(nearest_debris)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2 \u2192 F prop_3) FINISH"}
{"id": 6044, "sentence": ["If", "every", "provide", "assistance", "to", "the", "safe", "rescuer", "is", "eventually", "followed", "by", "recording", "unstable", "beam,", "then", "take", "a", "picture", "of", "unsafe", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "finally", "record(unstable_beam)", ")", "implies", "globally", "finally", "photo(unsafe_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["record(unstable_beam)", "photo(unsafe_rescuer)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["record(unstable_beam)"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent can be expressed as a globally quantified statement about the eventual occurrence of recording an unstable beam after providing assistance. The consequent states that taking a picture of the unsafe rescuer must happen infinitely often.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every provide assistance to the safe rescuer is eventually followed by recording unstable beam\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"take a picture of unsafe rescuer must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 1499, "sentence": ["If", "every", "take", "a", "picture", "of", "unstable", "beam", "is", "eventually", "followed", "by", "returning", "home,", "then", "establish", "communication", "with", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(unstable_beam)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(unstable_beam)"], ["go_home", "communicate(injured_victim)"]], "bad_trace": [["photo(unstable_beam)"], ["go_home"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent states that \"every take a picture of unstable beam is eventually followed by returning home,\" which can be expressed as \"globally, if a picture is taken, then eventually returning home occurs.\" The consequent states that \"establish communication with the injured victim must occur infinitely often,\" which can be expressed as \"establishing communication with the injured victim occurs infinitely often.\" The entire command can be structured as an implication where the antecedent leads to the consequent.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every take a picture of unstable beam is eventually followed by returning home\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"establish communication with the injured victim must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 5286, "sentence": ["Whenever", "record", "safe", "civilian", "holds,", "go", "back", "to", "base", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "record(safe_civilian)", "implies", "next", "(", "next", "(", "next", "go_home", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_civilian)"], [], [], ["go_home"]], "bad_trace": [["record(safe_civilian)"], [], [], []], "prediction": "(prop_1 \u2192 X X X prop_2)`, where `prop_2` represents \"go back to base\".\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"Whenever record safe civilian holds\": \"prop_1\",\n  \"go back to base holds exactly three steps later\": \"X X X prop_2\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 X X X prop_2)"}
{"id": 7231, "sentence": ["This", "controller", "must", "eventually,", "avoid", "doing", "not", "go", "near", "the", "active", "flood."], "tl": ["finally", "(", "not", "avoid(active_flood)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_flood"], "args_ref": ["active flood"]}}, "good_trace": [["avoid(active_flood)"], [], []], "bad_trace": [["avoid(active_flood)"], ["avoid(active_flood)"], ["avoid(active_flood)"]], "prediction": "(not going near the active flood) at some point in the future. The phrase \"must eventually\" translates to the temporal operator \"finally\" (F), indicating that the condition should be satisfied at some point in the future. The action of \"not go near the active flood\" can be represented as a negation of a proposition (prop_1)"}
{"id": 7400, "sentence": ["Photograph", "unsafe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unsafe_rescuer)", "and", "next", "photo(unsafe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(unsafe_rescuer)"], [], ["photo(unsafe_rescuer)"]], "bad_trace": [["photo(unsafe_rescuer)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 \u2192 X (prop_2 U (not prop_2))) FINISH"}
{"id": 4946, "sentence": ["Call", "for", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G)"}
{"id": 1289, "sentence": ["Either", "do", "not", "go", "near", "the", "active", "debris", "or", "avoid", "the", "nearest", "gas", "leak", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_debris)", "or", "globally", "finally", "avoid(nearest_gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["avoid(active_debris)"]], "bad_trace": [[]], "prediction": "  \"Either ... or ...\" : \"prop_3 or prop_4\""}
{"id": 313, "sentence": ["Communicate", "with", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(G). Therefore, we can represent this command as G(prop_1), where prop_1 represents the action of communicating with the safe victim.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Communicate with the safe victim holds at all times.\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 4537, "sentence": ["The", "system", "must", "always", "avoid", "calling", "for", "help."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* G not prop_1 FINISH"}
{"id": 9593, "sentence": ["Globally,", "if", "get", "help", "occurs", "then", "finally", "take", "a", "photo", "of", "safe", "rescuer", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], [], ["photo(safe_rescuer)"]], "bad_trace": [["get_help"], [], []], "prediction": "(G) if the event \"get help\" occurs (prop_1), then \"finally\" (F) the event \"take a photo of safe rescuer\" should happen (prop_2). This can be expressed as: G (prop_1 \u2192 F prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally,\" : \"G\",\n  \"if\" : \"\u2192\",\n  \"get help occurs\" : \"prop_1\",\n  \"then\" : \"\u2192\",\n  \"finally take a photo of safe rescuer happens.\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 9401, "sentence": ["At", "every", "step,", "photograph", "injured", "rescuer", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "rescuer", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(injured_rescuer)", "double_implies", "next", "photo(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(injured_rescuer)"], ["photo(unsafe_rescuer)"]], "bad_trace": [["photo(injured_rescuer)"], []], "prediction": "(G) to indicate that this condition must be true at all times, and the next operator (X) to refer to the next step.\n\n2. *Explanation dictionary* \u2013\n{\n    \"At every step\" : \"G\",\n    \"photograph injured rescuer\" : \"prop_1\",\n    \"equals\" : \"\u2194\",\n    \"the value of\" : \"\",\n    \"take a photo of unsafe rescuer\" : \"prop_2\",\n    \"in the next step\" : \"X\"\n}\n\n3. *FINAL:* G (prop_1 \u2194 X prop_2)"}
{"id": 9093, "sentence": ["Whenever", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "and", "deliver", "aid", "to", "the", "injured", "hostile", "are", "equal,", "deliver", "aid", "to", "the", "injured", "hostile", "and", "avoid", "the", "active", "debris", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "avoid(impending_unstable_beam)", "double_implies", "deliver_aid(injured_hostile)", ")", "implies", "(", "deliver_aid(injured_hostile)", "double_implies", "avoid(active_debris)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [["avoid(impending_unstable_beam)", "deliver_aid(injured_hostile)", "avoid(active_debris)"]], "bad_trace": [["avoid(impending_unstable_beam)", "deliver_aid(injured_hostile)"]], "prediction": "3. *FINAL:* G((not prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 8468, "sentence": ["Whenever", "call", "for", "help", "holds,", "take", "a", "video", "of", "debris", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["get_help", "record(debris)"], ["record(debris)"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1)\",\n  \"take a video of debris holds as well\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 prop_2)"}
{"id": 763, "sentence": ["If", "take", "a", "picture", "of", "injured", "victim", "happens", "infinitely", "often,", "then", "so", "does", "begin", "recording", "fire", "source."], "tl": ["globally", "finally", "photo(injured_victim)", "implies", "globally", "finally", "record(fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [[]], "bad_trace": [["photo(injured_victim)"]], "prediction": "(prop_1)\" where prop_1 is the proposition that \"take a picture of injured victim\". The phrase \"then so does begin recording fire source\" can be represented as \"G(prop_2)\" where prop_2 is the proposition that \"begin recording fire source\". The entire command can be expressed as \"F(prop_1) \u2192 G(prop_2)\", indicating that if the first condition holds infinitely often, then the second condition must also hold globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a picture of injured victim happens infinitely often\" : \"F(prop_1)\",\n  \"begin recording fire source\" : \"G(prop_2)\"\n}\n\n3. *FINAL:* F(prop_1) \u2192 G(prop_2)"}
{"id": 3700, "sentence": ["Talk", "to", "the", "injured", "rescuer", "holds", "at", "all", "times."], "tl": ["globally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(injured_rescuer)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "3. *FINAL:* G prop_1 FINISH"}
{"id": 8652, "sentence": ["If", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds,", "then", "in", "the", "next", "step", "go", "home", "persists", "until", "delivering", "aid", "to", "the", "injured", "rescuer", "holds,", "or", "else", "go", "home", "holds", "forever."], "tl": ["avoid(impending_fire_source)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(injured_rescuer)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_fire_source)"], ["go_home"], ["go_home"], ["deliver_aid(injured_rescuer)"]], "bad_trace": [["avoid(impending_fire_source)"], []], "prediction": "3. *FINAL:* (not prop_1) \u2192 (X prop_2 U prop_3) or"}
{"id": 4088, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "begin", "recording", "gas", "leak", "and", "request", "assistance."], "tl": ["globally", "(", "record(gas_leak)", "and", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)", "get_help"], ["record(gas_leak)", "get_help"], ["record(gas_leak)", "get_help"]], "bad_trace": [["record(gas_leak)"], ["record(gas_leak)"], ["get_help"]], "prediction": "(1) it must begin recording a gas leak, and (2) it must request assistance. The phrase \"must always\" indicates that these conditions should hold globally. Therefore, we can express this as a conjunction of the two propositions, both of which must hold globally.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always maintain both begin recording gas leak and request assistance\" : \"G (prop_1 and prop_2)\",\n  \"begin recording gas leak\" : \"prop_1\",\n  \"request assistance\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 6361, "sentence": ["Whenever", "neither", "go", "home", "nor", "begin", "recording", "gas", "leak", "holds,", "communicate", "with", "the", "safe", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(gas_leak)", ")", "implies", "finally", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home", "record(gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2)) \u2192 F prop_3 FINISH"}
{"id": 9154, "sentence": ["If", "every", "record", "injured", "person", "is", "eventually", "followed", "by", "avoid", "the", "active", "unstable", "beam,", "then", "take", "a", "picture", "of", "safe", "civilian", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(injured_person)", "implies", "finally", "avoid(active_unstable_beam)", ")", "implies", "globally", "finally", "photo(safe_civilian)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(injured_person)"], ["avoid(active_unstable_beam)", "photo(safe_civilian)"]], "bad_trace": [["record(injured_person)"], ["avoid(active_unstable_beam)"]], "prediction": "3. *FINAL:* prop_1 \u2192 F(prop_2) \u2192 G(F(prop_3)) FINISH"}
{"id": 2, "sentence": ["Go", "back", "to", "base", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(prop_1) should hold globally (G), but it can be delayed for up to two steps (X prop_1 U X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Go back to base\" : \"prop_1\",\n  \"should always hold\" : \"G\",\n  \"with at most a two-step grace period\" : \"X prop_1 U X prop_1\"\n}\n\n3. *FINAL:* G (prop_1 U (X prop_1))"}
{"id": 6808, "sentence": ["Request", "assistance", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G). Therefore, we can express this as G(prop_1), where prop_1 represents the proposition \"request for assistance holds.\"\n\n2. *Explanation dictionary* \u2013\n{\n  \"Request assistance holds at all times.\" : \"G(prop_1)\"\n}\n\n3. *FINAL:* G(prop_1)"}
{"id": 6433, "sentence": ["You", "must", "always", "maintain", "both", "record", "unsafe", "civilian", "and", "photograph", "unstable", "beam."], "tl": ["globally", "(", "record(unsafe_civilian)", "and", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unsafe_civilian)", "photo(unstable_beam)"], ["record(unsafe_civilian)", "photo(unstable_beam)"], ["record(unsafe_civilian)", "photo(unstable_beam)"]], "bad_trace": [["record(unsafe_civilian)"], ["record(unsafe_civilian)"], ["photo(unstable_beam)"]], "prediction": "(\"You\") must consistently (always) maintain two conditions: the first condition is that \"record unsafe civilian\" must hold, and the second condition is that \"photograph unstable beam\" must also hold. The phrase \"always\" translates to the temporal operator \"G\" (globally), indicating that both conditions must be true at all times.\n\n2. *Explanation dictionary* \u2013\n{\n  \"always maintain both record unsafe civilian and photograph unstable beam\" : \"G (prop_1 and prop_2)\",\n  \"record unsafe civilian\" : \"prop_1\",\n  \"photograph unstable beam\" : \"prop_2\"\n}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 9044, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "begining", "recording", "debris."], "tl": ["finally", "(", "not", "record(debris)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(debris)"], [], []], "bad_trace": [["record(debris)"], ["record(debris)"], ["record(debris)"]], "prediction": "(F)"}
{"id": 7087, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "impending", "flood", "and", "photograph", "injured", "victim", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(impending_flood)", "and", "photo(injured_victim)", ")", ")", "and", "globally", "(", "avoid(impending_flood)", "or", "photo(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(impending_flood)"], ["photo(injured_victim)"], ["avoid(impending_flood)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 9567, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "begining", "recording", "safe", "rescuer,", "then", "establish", "communication", "with", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "record(safe_rescuer)", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["record(safe_rescuer)", "communicate(injured_hostile)"]], "bad_trace": [["go_home"], ["record(safe_rescuer)"]], "prediction": "(go_home \u2192 F (begin_recording_safe_rescuer))\".\n   - \"then establish communication with the injured hostile must occur infinitely often\" indicates that the consequent must hold infinitely often, which can be expressed as \"G (establish_communication_with_injured_hostile)\".\n\n2. *Explanation dictionary*:\n   {\n     \"every go home is eventually followed by beginning recording safe rescuer\" : \"G (go_home \u2192 F (begin_recording_safe_rescuer))\",\n     \"establish communication with the injured hostile must occur infinitely often\" : \"G (establish_communication_with_injured_hostile)\"\n   }\n\n3. *FINAL:* G (go_home \u2192 F (begin_recording_safe_rescuer)) \u2192 G (establish_communication_with_injured_hostile)"}
{"id": 2914, "sentence": ["Whenever", "deliver", "aid", "to", "the", "safe", "rescuer", "holds,", "from", "the", "next", "step", "onwards", "take", "a", "photo", "of", "gas", "leak", "will", "eventually", "hold."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "next", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["photo(gas_leak)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], []], "prediction": "(prop_1 \u2192 ...)\", where \"prop_1\" represents the condition of delivering aid to the safe rescuer. The phrase \"from the next step onwards\" indicates that the following action will take place in the next step, which can be represented as \"X ...\". The action \"take a photo of gas leak will eventually hold\" indicates that this action will eventually happen, represented as \"F prop_2\". Therefore, the complete formula combines these elements to express that whenever the condition holds, the action will take place in the next step and will eventually be true.\n\n2. *Explanation dictionary* \u2013\n```json\n{\n  \"Whenever deliver aid to the safe rescuer holds\": \"G (prop_1 \u2192 ...)\",\n  \"from the next step onwards\": \"X ...\",\n  \"take a photo of gas leak will eventually hold\": \"F prop_2\"\n}\n```\n\n3. *FINAL:* G (prop_1 \u2192 X F prop_2)"}
{"id": 3424, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "do", "not", "go", "near", "the", "impending", "debris", "and", "establish", "communication", "with", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "avoid(impending_debris)", "and", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["avoid(impending_debris)"], ["communicate(safe_victim)"], []], "bad_trace": [["avoid(impending_debris)", "communicate(safe_victim)"]], "prediction": "(where prop_1 represents \"go near the impending debris\").\n   - \"and establish communication with the safe victim hold\" can be represented as prop_2 (where prop_2 represents \"establish communication with the safe victim hold\").\n   - The phrase \"both do not go near the impending debris and establish communication with the safe victim hold\" can be combined using the and operator.\n   - Therefore, the entire expression can be formulated as G not (not prop_1 and prop_2)"}
{"id": 7377, "sentence": ["Whenever", "communicate", "with", "the", "injured", "victim", "holds,", "from", "the", "next", "step", "onwards", "get", "help", "will", "eventually", "hold."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "next", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_victim)"], [], ["get_help"]], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "(prop_1 \u2192 X F prop_2)\",\n    \"from the next step onwards\" : \"X\",\n    \"get help will eventually hold\" : \"F prop_2\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 X F prop_2)"}
{"id": 3493, "sentence": ["Take", "a", "photo", "of", "safe", "civilian", "and", "get", "help", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "photo(safe_civilian)", "and", "get_help", ")", ")", "and", "globally", "(", "photo(safe_civilian)", "or", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(safe_civilian)"], ["get_help"], ["photo(safe_civilian)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* G (prop_1 or prop_2) and not (prop_1 and prop_2) FINISH"}
{"id": 8083, "sentence": ["If", "begin", "recording", "unsafe", "person", "ever", "holds,", "give", "aid", "to", "the", "injured", "rescuer", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "record(unsafe_person)", ")", "implies", "(", "not", "record(unsafe_person)", "until", "(", "deliver_aid(injured_rescuer)", "and", "not", "record(unsafe_person)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["record(unsafe_person)"]], "bad_trace": [["record(unsafe_person)"]], "prediction": "3. *FINAL:* (prop_1 and prop_2) \u2192 (F prop_3 U (not (prop_1 and prop_2"}
{"id": 5937, "sentence": ["If", "take", "a", "video", "of", "gas", "leak", "holds", "and", "talk", "to", "the", "injured", "victim", "holds", "next,", "then", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(gas_leak)", "and", "next", "communicate(injured_victim)", "implies", "next", "next", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["record(gas_leak)"], ["communicate(injured_victim)"], ["avoid(impending_fire_source)"]], "bad_trace": [["record(gas_leak)"], ["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* (prop_1 and X prop_2) \u2192 not prop_3 FINISH"}
{"id": 1433, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "inactive", "flood", "and", "provide", "assistance", "to", "the", "safe", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "avoid(inactive_flood)", "and", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["avoid(inactive_flood)"], ["deliver_aid(safe_hostile)"], []], "bad_trace": [["avoid(inactive_flood)", "deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) FINISH"}
{"id": 2841, "sentence": ["Take", "a", "picture", "of", "safe", "person", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(safe_person)", "and", "next", "photo(safe_person)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["photo(safe_person)"], [], ["photo(safe_person)"]], "bad_trace": [["photo(safe_person)"], [], [], []], "prediction": "(grace period).\n\n2. *Explanation dictionary* \u2013\n{\n    \"Take a picture of safe person\" : \"prop_1\",\n    \"should always hold\" : \"G\",\n    \"with at most a two-step grace period for recovery\" : \"U\"\n}\n\n3. *FINAL:* F(prop_1 \u2192 G(prop_2 U X(prop_2)) )"}
{"id": 152, "sentence": ["Take", "a", "picture", "of", "flood", "holds", "at", "all", "times."], "tl": ["globally", "photo(flood)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(flood)"]], "bad_trace": [["photo(flood)"], []], "prediction": "(G)"}
{"id": 2180, "sentence": ["If", "go", "home", "happens", "infinitely", "often,", "then", "so", "does", "do", "not", "go", "near", "the", "active", "fire", "source."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "avoid(active_fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "(F) in conjunction with the \"globally\" operator (G) to indicate that the condition holds at all times. The implication structure is represented using the \"implies\" operator (\u2192)"}
{"id": 8308, "sentence": ["If", "take", "a", "video", "of", "fire", "source", "holds", "and", "do", "not", "go", "near", "the", "active", "unstable", "beam", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(fire_source)", "and", "next", "avoid(active_unstable_beam)", "implies", "next", "next", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["record(fire_source)"], ["avoid(active_unstable_beam)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["record(fire_source)"], ["avoid(active_unstable_beam)"], []], "prediction": "3. *FINAL:* (prop_1 and not prop_2) \u2192 X prop_3 FINISH"}
{"id": 6769, "sentence": ["You", "must", "Eventually,", "both", "request", "assistance", "and", "communicate", "with", "the", "safe", "hostile", "hold", "simultaneously."], "tl": ["finally", "(", "get_help", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help", "communicate(safe_hostile)"]], "bad_trace": [[], [], []], "prediction": "(F) to indicate that this condition will eventually be met, and the \"and\" operator to combine the two propositions.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Eventually, both request assistance and communicate with the safe hostile hold simultaneously.\" : \"F (prop_1 and prop_2)\"\n}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 6980, "sentence": ["Whenever", "return", "to", "base", "and", "give", "aid", "to", "the", "injured", "hostile", "are", "equal,", "give", "aid", "to", "the", "injured", "hostile", "and", "get", "help", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(injured_hostile)", ")", "implies", "(", "deliver_aid(injured_hostile)", "double_implies", "get_help", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "deliver_aid(injured_hostile)", "get_help"]], "bad_trace": [["go_home", "deliver_aid(injured_hostile)"]], "prediction": "3. *FINAL:* G((prop_1 and prop_2) \u2192 (prop_3 and prop_4)) FINISH"}
{"id": 9172, "sentence": ["If", "avoid", "the", "active", "unstable", "beam", "holds", "and", "call", "for", "help", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(active_unstable_beam)", "and", "next", "get_help", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(active_unstable_beam)"], ["get_help"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(active_unstable_beam)"], ["get_help"], []], "prediction": "(where `prop_1` represents \"avoid the active unstable beam holds\").\n   - \"and call for help holds\" translates to `prop_2` (where `prop_2` represents \"call for help holds\").\n   - \"next\" indicates that the next condition applies, which is represented by the `next` operator (X).\n   - \"then deliver aid to the injured victim holds\" translates to `prop_3` (where `prop_3` represents \"deliver aid to the injured victim holds\")"}
{"id": 8605, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "return", "home", "holds,", "take", "a", "picture", "of", "injured", "person", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "photo(injured_person)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not prop_1 and not prop_2) \u2192 F prop_3 FINISH"}
{"id": 126, "sentence": ["If", "every", "begin", "recording", "safe", "victim", "is", "eventually", "followed", "by", "photographing", "unsafe", "victim,", "then", "take", "a", "picture", "of", "unsafe", "person", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(safe_victim)", "implies", "finally", "photo(unsafe_victim)", ")", "implies", "globally", "finally", "photo(unsafe_person)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(safe_victim)"], ["photo(unsafe_victim)", "photo(unsafe_person)"]], "bad_trace": [["record(safe_victim)"], ["photo(unsafe_victim)"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent can be expressed as a globally quantified condition that uses the \"eventually\" operator, while the consequent uses the \"infinitely often\" concept, which can be represented by the \"globally\" operator.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every begin recording safe victim is eventually followed by photographing unsafe victim\" : \"G (prop_1 \u2192 F prop_2)\",\n  \"take a picture of unsafe person must occur infinitely often\" : \"G prop_3\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 F prop_2)"}
{"id": 7522, "sentence": ["Whenever", "request", "assistance", "and", "give", "aid", "to", "the", "injured", "rescuer", "are", "equal,", "give", "aid", "to", "the", "injured", "rescuer", "and", "avoid", "the", "active", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "deliver_aid(injured_rescuer)", ")", "implies", "(", "deliver_aid(injured_rescuer)", "double_implies", "avoid(active_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_flood"], "args_ref": ["active flood"]}}, "good_trace": [["get_help", "deliver_aid(injured_rescuer)", "avoid(active_flood)"]], "bad_trace": [["get_help", "deliver_aid(injured_rescuer)"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 2649, "sentence": ["Whenever", "get", "help", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "equal,", "establish", "communication", "with", "the", "safe", "hostile", "and", "take", "a", "photo", "of", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "communicate(safe_hostile)", ")", "implies", "(", "communicate(safe_hostile)", "double_implies", "photo(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help", "communicate(safe_hostile)", "photo(unstable_beam)"]], "bad_trace": [["get_help", "communicate(safe_hostile)"]], "prediction": "(getting help and establishing communication with the safe), then two other conditions should also be met (establishing communication with the safe and taking a photo of the unstable beam). This can be expressed using the \"globally\" operator to indicate that this condition holds at all times. The structure can be broken down as follows:\n   - \"Whenever get help\" translates to \"G (prop_1)"}
{"id": 2678, "sentence": ["This", "controller", "must", "eventually", "get", "help", "or", "take", "a", "video", "of", "unsafe", "person."], "tl": ["finally", "(", "get_help", "or", "record(unsafe_person)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "  \"or\": \"or\""}
{"id": 3095, "sentence": ["Stay", "away", "from", "the", "inactive", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "avoid(inactive_fire_source)", "and", "next", "avoid(inactive_fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}}, "good_trace": [["avoid(inactive_fire_source)"], [], ["avoid(inactive_fire_source)"]], "bad_trace": [["avoid(inactive_fire_source)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or (not prop_1 U (X prop_1))) FINISH"}
{"id": 7043, "sentence": ["This", "controller", "must", "eventually", "go", "home", "or", "talk", "to", "the", "injured", "victim."], "tl": ["finally", "(", "go_home", "or", "communicate(injured_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "(F) to indicate that one of these actions must occur at some point in the future. We can express this as a disjunction (or)"}
{"id": 3008, "sentence": ["If", "return", "home", "holds", "and", "take", "a", "video", "of", "unsafe", "victim", "holds", "next,", "then", "call", "for", "help", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "record(unsafe_victim)", "implies", "next", "next", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], ["record(unsafe_victim)"], ["get_help"]], "bad_trace": [["go_home"], ["record(unsafe_victim)"], []], "prediction": "(prop_1 and X prop_2)"}
{"id": 9736, "sentence": ["Whenever", "photograph", "injured", "victim", "and", "request", "assistance", "are", "equal,", "request", "assistance", "and", "go", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(injured_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_victim)", "get_help", "go_home"]], "bad_trace": [["photo(injured_victim)", "get_help"]], "prediction": "3. *FINAL:* G (prop_1 and prop_2 \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 8552, "sentence": ["If", "get", "help", "holds", "and", "do", "not", "go", "near", "the", "active", "debris", "holds", "next,", "then", "communicate", "with", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "avoid(active_debris)", "implies", "next", "next", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["avoid(active_debris)"], ["communicate(safe_rescuer)"]], "bad_trace": [["get_help"], ["avoid(active_debris)"], []], "prediction": "(where `prop_1` represents \"get help\").\n   - \"and do not go near the active debris holds\" translates to `not prop_2` (where `prop_2` represents \"go near the active debris\").\n   - \"next,\" indicates that the following condition applies in the next step, which is represented by `X`.\n   - \"then communicate with the safe rescuer holds\" translates to `prop_3` (where `prop_3` represents \"communicate with the safe rescuer\")"}
{"id": 9047, "sentence": ["Talk", "to", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(G)"}
{"id": 3368, "sentence": ["Establish", "communication", "with", "the", "injured", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(injured_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* G prop_1 FINISH"}
{"id": 3805, "sentence": ["If", "every", "take", "a", "picture", "of", "gas", "leak", "is", "eventually", "followed", "by", "recording", "unstable", "beam,", "then", "avoid", "the", "impending", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(gas_leak)", "implies", "finally", "record(unstable_beam)", ")", "implies", "globally", "finally", "avoid(impending_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_gas_leak"], "args_ref": ["impending gas leak"]}}, "good_trace": [["photo(gas_leak)"], ["record(unstable_beam)", "avoid(impending_gas_leak)"]], "bad_trace": [["photo(gas_leak)"], ["record(unstable_beam)"]], "prediction": "(the \"if\" part) and the consequent (the \"then\" part). The antecedent states that \"every take a picture of gas leak is eventually followed by recording unstable beam,\" which can be expressed as \"prop_1 \u2192 F prop_2.\" The consequent states that \"avoid the impending gas leak must occur infinitely often,\" which can be expressed as \"G F prop_3.\" The entire command can be structured as an implication where the antecedent leads to the consequent.\n\n2. *Explanation dictionary* \u2013\n{\n  \"every take a picture of gas leak is eventually followed by recording unstable beam\" : \"prop_1 \u2192 F prop_2\",\n  \"avoid the impending gas leak must occur infinitely often\" : \"G F prop_3\"\n}\n\n3. *FINAL:* (prop_1 \u2192 F prop_2)"}
{"id": 1092, "sentence": ["Communicate", "with", "the", "injured", "rescuer", "can", "only", "happen", "after", "returning", "to", "base."], "tl": ["not", "communicate(injured_rescuer)", "until", "go_home"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"]], "prediction": "(prop_1) can only happen after the condition of returning to base (prop_2)"}
{"id": 6344, "sentence": ["If", "return", "home", "holds", "and", "photograph", "unstable", "beam", "holds", "next,", "then", "provide", "assistance", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "photo(unstable_beam)", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home"], ["photo(unstable_beam)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["go_home"], ["photo(unstable_beam)"], []], "prediction": "(where `prop_1` represents \"return home\").\n   - \"and photograph unstable beam holds\" translates to `prop_2` (where `prop_2` represents \"photograph unstable beam\").\n   - \"next,\" indicates that the following condition will hold in the next step, which is represented by the `next` operator.\n   - \"then provide assistance to the injured victim holds\" translates to `prop_3` (where `prop_3` represents \"provide assistance to the injured victim\")"}
{"id": 9974, "sentence": ["Whenever", "stay", "away", "from", "the", "inactive", "flood", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "give", "aid", "to", "the", "injured", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "avoid(inactive_flood)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "deliver_aid(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_flood)", "get_help", "deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_flood)", "get_help"]], "prediction": "3. *FINAL:* G ((prop_1 and prop_2) \u2192 (prop_2 and prop_3)) FINISH"}
{"id": 926, "sentence": ["If", "stay", "away", "from", "the", "impending", "unstable", "beam", "holds,", "then", "in", "the", "next", "step", "go", "home", "persists", "until", "delivering", "aid", "to", "the", "safe", "victim", "holds,", "or", "else", "go", "home", "holds", "forever."], "tl": ["avoid(impending_unstable_beam)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(safe_victim)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_unstable_beam)"], ["go_home"], ["go_home"], ["deliver_aid(safe_victim)"]], "bad_trace": [["avoid(impending_unstable_beam)"], []], "prediction": "(go home) will hold.\n   - \"until delivering aid to the safe victim holds\" means that `prop_2` will continue to hold until `prop_3` (delivering aid to the safe victim)"}
