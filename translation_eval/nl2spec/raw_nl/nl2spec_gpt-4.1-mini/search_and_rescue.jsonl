{"id": 4249, "sentence": ["If", "every", "record", "flood", "is", "eventually", "followed", "by", "talking", "to", "the", "safe", "victim,", "then", "avoid", "the", "impending", "debris", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(flood)", "implies", "finally", "communicate(safe_victim)", ")", "implies", "globally", "finally", "avoid(impending_debris)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["record(flood)"], ["communicate(safe_victim)", "avoid(impending_debris)"]], "bad_trace": [["record(flood)"], ["communicate(safe_victim)"]], "prediction": "(record flood event).\n- \"is eventually followed by talking to the safe victim\" means that whenever prop_1 occurs, prop_2 (talking to the safe victim) eventually happens afterward: prop_1 \u2192 F prop_2.\n- \"If ... then ...\" indicates an implication: (G (prop_1 \u2192 F prop_2)) \u2192 ...\n- \"avoid the impending debris must occur infinitely often\" means that prop_3 (avoid impending debris) happens infinitely often, which is expressed as G F prop_3.\n- Putting it all together: if always (every record flood is eventually followed by talking to the safe victim), then always eventually avoid impending debris.\n\n2. Explanation dictionary:\n{\n  \"every record flood\": \"prop_1\",\n  \"eventually followed by talking to the safe victim\": \"F prop_2\",\n  \"every record flood is eventually followed by talking to the safe victim\": \"prop_1 \u2192 F prop_2\",\n  \"always (every record flood is eventually followed by talking to the safe victim)\": \"G (prop_1 \u2192 F prop_2)"}
{"id": 7765, "sentence": ["This", "controller", "must", "always", "avoid", "begining", "recording", "fire", "source."], "tl": ["globally", "(", "not", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [[], [], []], "bad_trace": [["record(fire_source)"], [], []], "prediction": "(globally), the proposition representing \"beginning recording fire source\" should not be true. We represent \"beginning recording fire source\" as prop_1. The word \"always\" maps to the globally operator G, and \"avoid\" maps to negation not. So the formula is G (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"always avoid beginning recording fire source\": \"G (not prop_1)\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 8523, "sentence": ["The", "robot", "must", "always", "avoid", "give", "aid", "to", "the", "safe", "victim."], "tl": ["globally", "(", "not", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["deliver_aid(safe_victim)"], [], []], "prediction": "(G). The phrase \"avoid give aid to the safe victim\" means that the proposition representing \"give aid to the safe victim\" should never be true. We represent \"give aid to the safe victim\" as prop_1. Therefore, \"always avoid give aid to the safe victim\" translates to globally not prop_1, i.e., G (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must always\": \"G\", \"give aid to the safe victim\": \"prop_1\", \"avoid give aid to the safe victim\": \"not prop_1\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 7657, "sentence": ["From", "some", "point", "onwards,", "take", "a", "photo", "of", "unsafe", "civilian", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(unsafe_civilian)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(unsafe_civilian)"], [], []], "bad_trace": [["photo(unsafe_civilian)"], [], ["photo(unsafe_civilian)"]], "prediction": "(F), indicating that starting at some future point. \"Take a photo of unsafe civilian\" is represented by prop_1. \"Never occurs again\" means that once prop_1 happens, it does not happen again afterwards, which can be expressed as \"globally not prop_1\" after that point. Combining these, from some point onwards (F), prop_1 occurs, and from that point on, prop_1 never occurs again (G not prop_1). This can be captured as: eventually (prop_1 and globally not prop_1 from next step), but since prop_1 cannot be both true and false at the same time, the intended meaning is that from some point onwards, prop_1 never occurs again, so the formula is: eventually globally not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"take a photo of unsafe civilian\": \"prop_1\", \"never occurs again\": \"G not prop_1\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 9494, "sentence": ["If", "every", "stay", "away", "from", "the", "inactive", "fire", "source", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "rescuer,", "then", "go", "back", "to", "base", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(inactive_fire_source)", "implies", "finally", "communicate(injured_rescuer)", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(inactive_fire_source)"], ["communicate(injured_rescuer)", "go_home"]], "bad_trace": [["avoid(inactive_fire_source)"], ["communicate(injured_rescuer)"]], "prediction": "- Combining these: (globally (prop_1 implies finally prop_2)) implies (globally finally prop_3)."}
{"id": 2879, "sentence": ["In", "this", "task,", "take", "a", "photo", "of", "flood,", "then", "return", "home."], "tl": ["(", "photo(flood)", "until", "go_home", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)", "go_home"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (prop_1 until prop_2) and F prop_2 FINISH"}
{"id": 5144, "sentence": ["If", "get", "help", "holds", "and", "talk", "to", "the", "safe", "hostile", "holds", "next,", "then", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "communicate(safe_hostile)", "implies", "next", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["get_help"], ["communicate(safe_hostile)"], []], "prediction": "- The entire statement is an implication: (prop_1 and next prop_2) implies next next prop_3."}
{"id": 9557, "sentence": ["If", "give", "aid", "to", "the", "injured", "victim", "holds", "and", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "next,", "then", "go", "home", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "and", "next", "deliver_aid(safe_hostile)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(safe_hostile)"], ["go_home"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(safe_hostile)"], []], "prediction": "3. FINAL: (prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 3920, "sentence": ["Either", "take", "a", "picture", "of", "flood", "or", "deliver", "aid", "to", "the", "safe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "photo(flood)", "or", "globally", "finally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(flood)"]], "bad_trace": [[]], "prediction": "3. FINAL: (or (globally (finally prop_1)) (globally (finally prop_2))) FINISH"}
{"id": 9945, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "hostile", "nor", "talk", "to", "the", "safe", "rescuer", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "communicate(safe_rescuer)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_hostile)", "communicate(safe_rescuer)"]], "bad_trace": [[]], "prediction": "3. FINAL: G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 7422, "sentence": ["If", "every", "stay", "away", "from", "the", "probable", "fire", "source", "is", "eventually", "followed", "by", "taking", "a", "video", "of", "gas", "leak,", "then", "take", "a", "video", "of", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(probable_fire_source)", "implies", "finally", "record(gas_leak)", ")", "implies", "globally", "finally", "record(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["avoid(probable_fire_source)"], ["record(gas_leak)", "record(safe_victim)"]], "bad_trace": [["avoid(probable_fire_source)"], ["record(gas_leak)"]], "prediction": "3. *FINAL:* (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 9673, "sentence": ["If", "begin", "recording", "injured", "civilian", "ever", "holds,", "call", "for", "help", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "record(injured_civilian)", ")", "implies", "(", "not", "record(injured_civilian)", "until", "(", "get_help", "and", "not", "record(injured_civilian)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help"], ["record(injured_civilian)"]], "bad_trace": [["record(injured_civilian)"]], "prediction": "(prop_1) becomes true, then \"call for help\" (prop_2) must have held at some point before that. The phrase \"must have held beforehand\" indicates that \"call for help\" was true at some time in the past before \"begin recording injured civilian\" became true. Since LTL is future-oriented, expressing \"must have held beforehand\" is done by stating that whenever \"begin recording injured civilian\" eventually holds, it is implied that \"call for help\" held previously. This can be captured by stating that globally, if \"begin recording injured civilian\" eventually holds, then \"call for help\" held before. Using the \"until\" operator, we can express that \"call for help\" held until \"begin recording injured civilian\" holds. So the formula is: globally, (if finally prop_1 then prop_2 until prop_1)"}
{"id": 9232, "sentence": ["Whenever", "take", "a", "video", "of", "fire", "source", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "take", "a", "photo", "of", "safe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(fire_source)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "photo(safe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(fire_source)", "get_help", "photo(safe_civilian)"]], "bad_trace": [["record(fire_source)", "get_help"]], "prediction": "(take a video of fire source) and prop_2 (call for help) have the same truth value. Equality can be expressed as (prop_1 and prop_2) or (not prop_1 and not prop_2), which is logically equivalent to double_implies: prop_1 double_implies prop_2.\n- \"call for help and take a photo of safe civilian are equal as well\" means prop_2 (call for help) and prop_3 (take a photo of safe civilian) are equal, i.e., prop_2 double_implies prop_3.\n- \"Whenever ... are equal, ... are equal as well\" means globally, if the first equality holds, then the second equality holds as well. So globally ( (prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3) ).\n\n2. Explanation dictionary:\n{\n  \"take a video of fire source and call for help are equal\": \"(prop_1 double_implies prop_2)"}
{"id": 6272, "sentence": ["Record", "fire", "source", "and", "take", "a", "photo", "of", "unsafe", "person", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "record(fire_source)", "and", "finally", "photo(unsafe_person)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(fire_source)"], ["photo(unsafe_person)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 342, "sentence": ["Take", "a", "photo", "of", "injured", "victim", "and", "call", "for", "help", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "photo(injured_victim)", "and", "get_help", ")", ")", "and", "globally", "(", "photo(injured_victim)", "or", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_victim)"], ["get_help"], ["photo(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (G (not (prop_1 and prop_2))) and (G (prop_1 or prop_2)) FINISH"}
{"id": 2964, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "begin", "recording", "gas", "leak", "holds,", "give", "aid", "to", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "record(gas_leak)", ")", "implies", "finally", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "record(gas_leak)"]], "bad_trace": [[]], "prediction": "So the formula is: globally ((not prop_1 and not prop_2) implies finally prop_3)"}
{"id": 2020, "sentence": ["This", "controller", "must", "eventually", "deliver", "aid", "to", "the", "safe", "victim", "and", "go", "home."], "tl": ["finally", "(", "deliver_aid(safe_victim)", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["deliver_aid(safe_victim)"], ["deliver_aid(safe_victim)", "go_home"]], "bad_trace": [[], ["deliver_aid(safe_victim)"], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 6678, "sentence": ["You", "must", "always", "have", "either", "return", "to", "base", "or", "talk", "to", "the", "injured", "hostile."], "tl": ["globally", "(", "go_home", "or", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["go_home"]], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (prop_1 or prop_2) FINISH"}
{"id": 6056, "sentence": ["This", "controller", "must", "Please", "deliver", "aid", "to", "the", "injured", "rescuer", "and", "then", "begin", "recording", "unsafe", "civilian."], "tl": ["(", "deliver_aid(injured_rescuer)", "until", "record(unsafe_civilian)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "record(unsafe_civilian)"]], "bad_trace": [[], [], []], "prediction": "(prop_1 \u2192 F prop_2), but since prop_1 is an event, to express \"then\" we use until: prop_2 happens after prop_1.\n- More precisely, \"deliver aid\" must happen first, and then \"begin recording\" must happen after that.\n- So the formula is: F prop_1 and (prop_1 \u2192 F prop_2), or equivalently: F (prop_1 and F prop_2)"}
{"id": 4855, "sentence": ["Whenever", "neither", "call", "for", "help", "nor", "avoid", "the", "nearest", "fire", "source", "holds,", "return", "to", "base", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "avoid(nearest_fire_source)", ")", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "avoid(nearest_fire_source)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 9741, "sentence": ["Return", "home", "can", "only", "happen", "after", "avoid", "the", "active", "debris."], "tl": ["not", "go_home", "until", "avoid(active_debris)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [[], [], ["avoid(active_debris)"]], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(prop_1) occurs, it must be preceded by \"avoid the active debris\" (prop_2). In temporal logic, this is expressed as: it is always the case (globally)"}
{"id": 8152, "sentence": ["Whenever", "provide", "assistance", "to", "the", "safe", "victim", "and", "get", "help", "are", "equal,", "get", "help", "and", "begin", "recording", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["deliver_aid(safe_victim)", "get_help", "record(unstable_beam)"]], "bad_trace": [["deliver_aid(safe_victim)", "get_help"]], "prediction": "(prop_1 and prop_2) or (not prop_1 and not prop_2).\n- \"get help and begin recording unstable beam are equal as well\" means that the truth values of \"get help\" (prop_2) and \"begin recording unstable beam\" (prop_3) are also the same.\n- \"Whenever ... are equal, ... are equal as well\" translates to globally (G) if the first equality holds, then the second equality holds as well. So, G((first equality) implies (second equality)).\n\n2. Explanation dictionary:\n{\n  \"provide assistance to the safe victim\": \"prop_1\",\n  \"get help\": \"prop_2\",\n  \"begin recording unstable beam\": \"prop_3\",\n  \"provide assistance to the safe victim and get help are equal\": \"((prop_1 and prop_2)"}
{"id": 1973, "sentence": ["Whenever", "go", "back", "to", "base", "holds,", "call", "for", "help", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "get_help"], ["get_help"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 318, "sentence": ["If", "take", "a", "picture", "of", "injured", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "injured", "victim."], "tl": ["globally", "finally", "photo(injured_civilian)", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[]], "bad_trace": [["photo(injured_civilian)"]], "prediction": "3. FINAL: (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 5065, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 2547, "sentence": ["From", "some", "point", "onwards,", "take", "a", "photo", "of", "flood", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(flood)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(flood)"], [], []], "bad_trace": [["photo(flood)"], [], ["photo(flood)"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 6746, "sentence": ["If", "take", "a", "photo", "of", "unsafe", "rescuer", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "unsafe", "civilian", "persists", "until", "photographing", "unstable", "beam", "holds,", "or", "else", "take", "a", "picture", "of", "unsafe", "civilian", "holds", "forever."], "tl": ["photo(unsafe_rescuer)", "implies", "next", "(", "(", "photo(unsafe_civilian)", "until", "photo(unstable_beam)", ")", "or", "globally", "photo(unsafe_civilian)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(unsafe_rescuer)"], ["photo(unsafe_civilian)"], ["photo(unsafe_civilian)"], ["photo(unstable_beam)"]], "bad_trace": [["photo(unsafe_rescuer)"], []], "prediction": "(\"If ... then ... else ...\").\n- \"take a photo of unsafe rescuer holds\" is represented by prop_1.\n- \"in the next step take a picture of unsafe civilian persists until photographing unstable beam holds\" means: starting from the next step (next), prop_2 (\"unsafe civilian\") holds continuously until prop_3 (\"photographing unstable beam\") holds. This is expressed as next (prop_2 until prop_3).\n- \"or else take a picture of unsafe civilian holds forever\" means if the condition is false, then globally prop_2 holds.\n- The entire formula is an implication with an else clause, so it is: (prop_1 implies next (prop_2 until prop_3)) and (not prop_1 implies globally prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a photo of unsafe rescuer holds\": \"prop_1\",\n  \"in the next step take a picture of unsafe civilian persists until photographing unstable beam holds\": \"next (prop_2 until prop_3)"}
{"id": 2385, "sentence": ["Whenever", "neither", "do", "not", "go", "near", "the", "inactive", "flood", "nor", "do", "not", "go", "near", "the", "nearest", "debris", "holds,", "talk", "to", "the", "safe", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(inactive_flood)", "and", "avoid(nearest_debris)", ")", "implies", "finally", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["avoid(inactive_flood)", "avoid(nearest_debris)"]], "bad_trace": [[]], "prediction": "- This is expressed as: globally (not (prop_1 or prop_2) implies finally prop_3)."}
{"id": 1542, "sentence": ["If", "call", "for", "help", "holds", "and", "establish", "communication", "with", "the", "injured", "hostile", "holds", "next,", "then", "establish", "communication", "with", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "communicate(injured_hostile)", "implies", "next", "next", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["communicate(injured_hostile)"], ["communicate(safe_rescuer)"]], "bad_trace": [["get_help"], ["communicate(injured_hostile)"], []], "prediction": "3. FINAL: (prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 7957, "sentence": ["Provide", "assistance", "to", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(safe_victim)"]], "bad_trace": [["deliver_aid(safe_victim)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 5668, "sentence": ["The", "system", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "3. *FINAL:* (G (not prop_1)) FINISH"}
{"id": 2597, "sentence": ["The", "robot", "must", "do", "not", "go", "near", "the", "nearest", "flood", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "avoid(nearest_flood)", "and", "next", "avoid(nearest_flood)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["The", "robot", "must", "prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["avoid(nearest_flood)"], [], ["avoid(nearest_flood)"]], "bad_trace": [["avoid(nearest_flood)"], [], [], []], "prediction": "(G) the condition holds.\n- \"with at most a two-step grace period for recovery\" means that if the robot goes near the flood (prop_1 becomes true), it can be true for at most two steps before the condition \"not prop_1\" must hold again. This is captured by allowing up to two steps where prop_1 can be true, but after that, \"not prop_1\" must hold globally.\n- This can be expressed as: globally, prop_1 can only hold for at most two steps before \"not prop_1\" holds again. Using until and next operators, we can say: G (prop_1 \u2192 (prop_1 U (next prop_1 U (next next not prop_1))))"}
{"id": 7000, "sentence": ["Once", "request", "assistance", "has", "occurred,", "deliver", "aid", "to", "the", "injured", "hostile", "will", "never", "occur", "again."], "tl": ["globally", "(", "get_help", "implies", "next", "globally", "not", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["deliver_aid(injured_hostile)"]], "prediction": "(request assistance) becomes true, the rest of the property should hold globally. The phrase \"deliver aid to the injured hostile will never occur again\" means that prop_2 (deliver aid to the injured hostile) should never be true after that point. So, after prop_1 occurs, prop_2 is always false. This can be expressed as: globally (if prop_1 has occurred in the past or now, then prop_2 is false). Since LTL does not have past operators, we express \"once prop_1 has occurred\" as \"prop_1 has occurred at some point in the past or now\" which is equivalent to \"prop_1 has occurred at some point in the past or now\" = \"F prop_1\" holds in the past, but since we cannot refer to the past, we can express the property as: \"Once prop_1 occurs, from that point on, prop_2 never occurs again.\" This is: G (prop_1 \u2192 G (not prop_2))"}
{"id": 2570, "sentence": ["Stay", "away", "from", "the", "nearest", "debris", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "go", "home", "holds", "infinitely", "often."], "tl": ["avoid(nearest_debris)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_debris)"], ["avoid(nearest_debris)"], ["go_home"]], "bad_trace": [["avoid(nearest_debris)"], ["avoid(nearest_debris)"], ["avoid(nearest_debris)"]], "prediction": "(prop_1) representing \"near debris\" should never be true, so we use globally not prop_1: G (not prop_1).\n- \"must keep holding until\" indicates that some condition (prop_2) must hold continuously until another condition (prop_3) becomes true.\n- \"from some point on, go home holds infinitely often\" means that eventually (finally) from some point onwards, the proposition \"go home\" (prop_3) holds infinitely often. In LTL, \"infinitely often\" is expressed as \"globally finally\" (G F prop_3).\n\nPutting it all together:\n\n- The agent must always stay away from debris: G (not prop_1)\n- The agent must keep holding prop_2 until prop_3 becomes true: prop_2 U prop_3\n- From some point on, prop_3 holds infinitely often: F (G F prop_3)"}
{"id": 3275, "sentence": ["Whenever", "communicate", "with", "the", "injured", "hostile", "holds,", "eventually", "take", "a", "picture", "of", "injured", "civilian", "will", "hold."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "finally", "photo(injured_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["communicate(injured_hostile)"], [], ["photo(injured_civilian)"]], "bad_trace": [["communicate(injured_hostile)"], [], []], "prediction": "(prop_2) will be true. The entire sentence is a temporal implication: whenever prop_1 holds, eventually prop_2 holds.\n\n2. *Explanation dictionary* \u2013 {\"communicate with the injured hostile holds\": \"prop_1\", \"eventually take a picture of injured civilian will hold\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 8561, "sentence": ["Either", "avoid", "the", "inactive", "gas", "leak", "or", "record", "unsafe", "person", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(inactive_gas_leak)", "or", "globally", "finally", "record(unsafe_person)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["avoid(inactive_gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* ( (globally (not prop_1)) or (globally (finally prop_2)) ) FINISH"}
{"id": 2587, "sentence": ["Our", "agent", "must", "eventually", "call", "for", "help", "or", "provide", "assistance", "to", "the", "safe", "rescuer."], "tl": ["finally", "(", "get_help", "or", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 254, "sentence": ["Deliver", "aid", "to", "the", "safe", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "take", "a", "video", "of", "safe", "civilian", "holds", "infinitely", "often."], "tl": ["deliver_aid(safe_rescuer)", "until", "(", "globally", "(", "finally", "record(safe_civilian)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["record(safe_civilian)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"]], "prediction": "(from some point on) prop_2 holds.\n- \"holds infinitely often\" means that prop_2 holds infinitely often, which can be expressed as \"globally finally prop_2\" (G F prop_2).\n\nPutting it all together: prop_1 holds until eventually prop_2 holds infinitely often.\n\n2. *Explanation dictionary* \u2013\n{\n  \"Deliver aid to the safe rescuer\": \"prop_1\",\n  \"must keep holding until\": \"until\",\n  \"from some point on, take a video of safe civilian\": \"F prop_2\",\n  \"holds infinitely often\": \"G F prop_2\"\n}\n\n3. *FINAL:* (prop_1) until (G F prop_2)"}
{"id": 8344, "sentence": ["Talk", "to", "the", "injured", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(injured_rescuer)", "and", "next", "communicate(injured_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["communicate(injured_rescuer)"]], "bad_trace": [["communicate(injured_rescuer)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1) and G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 2101, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "talking", "to", "the", "injured", "victim,", "then", "photograph", "flood", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(injured_victim)", ")", "implies", "globally", "finally", "photo(flood)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["get_help"], ["communicate(injured_victim)", "photo(flood)"]], "bad_trace": [["get_help"], ["communicate(injured_victim)"]], "prediction": "3. *FINAL:* (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 2049, "sentence": ["At", "every", "step,", "talk", "to", "the", "injured", "victim", "equals", "the", "value", "of", "take", "a", "picture", "of", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_victim)", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["communicate(injured_victim)"], ["photo(unsafe_victim)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* globally (prop_1 double_implies next prop_2) FINISH"}
{"id": 285, "sentence": ["If", "avoid", "the", "inactive", "debris", "holds,", "then", "in", "the", "next", "step", "avoid", "the", "active", "unstable", "beam", "persists", "until", "give", "aid", "to", "the", "safe", "rescuer", "holds,", "or", "else", "avoid", "the", "active", "unstable", "beam", "holds", "forever."], "tl": ["avoid(inactive_debris)", "implies", "next", "(", "(", "avoid(active_unstable_beam)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["avoid(inactive_debris)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["avoid(inactive_debris)"], []], "prediction": "- The entire sentence is an implication: if prop_1 then (next (prop_2 until prop_3)) or globally prop_2."}
{"id": 4021, "sentence": ["At", "every", "step,", "take", "a", "picture", "of", "safe", "rescuer", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "civilian", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(safe_rescuer)", "double_implies", "next", "photo(unsafe_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(safe_rescuer)"], ["photo(unsafe_civilian)"]], "bad_trace": [["photo(safe_rescuer)"], []], "prediction": "(G), meaning the property holds at all times.\n- \"take a picture of safe rescuer\" is represented by prop_1.\n- \"equals\" corresponds to logical equivalence, so \"double_implies\" (\u2194).\n- \"take a photo of unsafe civilian in the next step\" is represented by prop_2, but since it refers to the next step, we use \"next\" (X prop_2).\n- Putting it all together: globally, prop_1 double_implies next prop_2.\n\n2. Explanation dictionary:\n{\"At every step\": \"G\", \"take a picture of safe rescuer\": \"prop_1\", \"equals\": \"double_implies\", \"take a photo of unsafe civilian in the next step\": \"X prop_2\"}\n\n3. FINAL: G (prop_1 double_implies next prop_2)"}
{"id": 9209, "sentence": ["Whenever", "neither", "return", "home", "nor", "talk", "to", "the", "injured", "rescuer", "holds,", "talk", "to", "the", "injured", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "communicate(injured_rescuer)", ")", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "communicate(injured_rescuer)"]], "bad_trace": [[]], "prediction": "- This maps to: G((not prop_1 and not prop_2) implies F prop_3)"}
{"id": 1645, "sentence": ["Whenever", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "holds,", "from", "the", "next", "step", "onwards", "request", "assistance", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(impending_unstable_beam)", "implies", "next", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_unstable_beam)"], [], ["get_help"]], "bad_trace": [["avoid(impending_unstable_beam)"], [], []], "prediction": "3. *FINAL:* globally ( (not prop_1) implies (next (finally prop_2)) ) FINISH"}
{"id": 6279, "sentence": ["Take", "a", "video", "of", "injured", "rescuer", "can", "only", "happen", "after", "calling", "for", "help."], "tl": ["not", "record(injured_rescuer)", "until", "get_help"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["get_help"]], "bad_trace": [["record(injured_rescuer)"], ["record(injured_rescuer)"], ["record(injured_rescuer)"]], "prediction": "(prop_2 implies that prop_1 has occurred in the past).\" However, since past operators are not allowed, we use the standard pattern: \"prop_2 implies that prop_1 has happened before,\" which is equivalent to \"globally (prop_2 implies that prop_1 has happened previously)\" or \"globally (prop_2 implies that prop_1 has occurred before prop_2).\" Since we cannot use past operators, we use the standard future-only pattern: \"globally (prop_2 implies that prop_1 has happened before)\" is equivalent to \"globally (prop_2 implies that prop_1 has happened previously)"}
{"id": 4776, "sentence": ["Either", "take", "a", "picture", "of", "unstable", "beam", "or", "photograph", "unsafe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "photo(unstable_beam)", "or", "globally", "finally", "photo(unsafe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unstable_beam)"]], "bad_trace": [[]], "prediction": "  \"either ... or ...\": \"or\""}
{"id": 2903, "sentence": ["Return", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or (not prop_1 and (next prop_1 or next next prop_1))) and G (not"}
{"id": 2013, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "injured", "victim,", "then", "record", "safe", "civilian", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "deliver_aid(injured_victim)", ")", "implies", "globally", "finally", "record(safe_civilian)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_victim)", "record(safe_civilian)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_victim)"]], "prediction": "- The entire sentence is an implication: (globally (prop_1 \u2192 finally prop_2)) \u2192 (globally finally prop_3)."}
{"id": 5369, "sentence": ["Whenever", "call", "for", "help", "holds,", "from", "the", "next", "step", "onwards", "give", "aid", "to", "the", "safe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "get_help", "implies", "next", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* (prop_1) implies (G next (F prop_2)) FINISH"}
{"id": 2047, "sentence": ["If", "begin", "recording", "injured", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "photograph", "injured", "rescuer."], "tl": ["globally", "finally", "record(injured_civilian)", "implies", "globally", "finally", "photo(injured_rescuer)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [[]], "bad_trace": [["record(injured_civilian)"]], "prediction": "3. *FINAL:* (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 8818, "sentence": ["Whenever", "avoid", "the", "active", "fire", "source", "holds,", "from", "the", "next", "step", "onwards", "do", "not", "go", "near", "the", "impending", "flood", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(active_fire_source)", "implies", "next", "finally", "avoid(impending_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}}, "good_trace": [["avoid(active_fire_source)"], [], ["avoid(impending_flood)"]], "bad_trace": [["avoid(active_fire_source)"], [], []], "prediction": "(representing \"avoid the active fire source\").\n- \"from the next step onwards\" indicates that the condition \"do not go near the impending flood will eventually hold\" applies starting from the next step.\n- \"do not go near the impending flood will eventually hold\" means \"it is not the case that eventually prop_2 holds\" (where prop_2 represents \"go near the impending flood\").\n- Combining these, whenever prop_1 holds, from the next step onwards, it must be that \"not eventually prop_2\" holds.\n- Using temporal logic, this is expressed as: globally (if prop_1 holds now, then in the next step and onwards, not eventually prop_2).\n\n2. Explanation dictionary:\n{\n  \"avoid the active fire source holds\": \"prop_1\",\n  \"go near the impending flood will eventually hold\": \"F prop_2\",\n  \"do not go near the impending flood will eventually hold\": \"not F prop_2\",\n  \"from the next step onwards\": \"next ( ... )"}
{"id": 2244, "sentence": ["From", "some", "point", "onwards,", "record", "unstable", "beam", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "record(unstable_beam)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"], [], []], "bad_trace": [["record(unstable_beam)"], [], ["record(unstable_beam)"]], "prediction": "3. *FINAL:* F (globally (not prop_1)) FINISH"}
{"id": 9358, "sentence": ["This", "controller", "must", "always", "avoid", "establishing", "communication", "with", "the", "safe", "victim."], "tl": ["globally", "(", "not", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["communicate(safe_victim)"], [], []], "prediction": "(globally), the proposition representing \"establishing communication with the safe victim\" must not be true. We represent \"establishing communication with the safe victim\" as prop_1. The word \"always\" maps to the globally operator G, and \"avoid\" maps to negation not.\n\n2. *Explanation dictionary* \u2013 {\"always avoid establishing communication with the safe victim\": \"G (not prop_1)\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 8754, "sentence": ["Whenever", "begin", "recording", "safe", "person", "and", "communicate", "with", "the", "safe", "rescuer", "are", "equal,", "communicate", "with", "the", "safe", "rescuer", "and", "record", "debris", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_person)", "double_implies", "communicate(safe_rescuer)", ")", "implies", "(", "communicate(safe_rescuer)", "double_implies", "record(debris)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(safe_person)", "communicate(safe_rescuer)", "record(debris)"]], "bad_trace": [["record(safe_person)", "communicate(safe_rescuer)"]], "prediction": "3. FINAL: G ((prop_1 and prop_2) implies (prop_2"}
{"id": 7378, "sentence": ["Whenever", "request", "assistance", "holds,", "begin", "recording", "unsafe", "person", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(unsafe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["get_help", "record(unsafe_person)"], ["record(unsafe_person)"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 5012, "sentence": ["Whenever", "communicate", "with", "the", "safe", "victim", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "communicate(safe_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_victim)", "get_help", "go_home"]], "bad_trace": [["communicate(safe_victim)", "get_help"]], "prediction": "(prop_1) and \"call for help\" (prop_2) have the same truth value, i.e., (prop_1 \u2194 prop_2).\n- \"call for help and go back to base are equal as well\" means that under the same condition, \"call for help\" (prop_2) and \"go back to base\" (prop_3) also have the same truth value, i.e., (prop_2 \u2194 prop_3).\n- The entire sentence says that whenever the first equality holds, the second equality also holds. This is a globally true implication: G((prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3)).\n\n2. Explanation dictionary:\n{\n  \"communicate with the safe victim and call for help are equal\": \"(prop_1 double_implies prop_2)\",\n  \"call for help and go back to base are equal as well\": \"(prop_2 double_implies prop_3)"}
{"id": 5425, "sentence": ["Go", "home", "and", "give", "aid", "to", "the", "injured", "hostile", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "go_home", "and", "deliver_aid(injured_hostile)", ")", ")", "and", "globally", "(", "go_home", "or", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_hostile)"], ["go_home"]], "bad_trace": [[], []], "prediction": "- G not (prop_1 and prop_2)  (never coincide)"}
{"id": 8488, "sentence": ["If", "every", "do", "not", "go", "near", "the", "nearest", "flood", "is", "eventually", "followed", "by", "returning", "to", "base,", "then", "talk", "to", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_flood)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(nearest_flood)"], ["go_home", "communicate(injured_rescuer)"]], "bad_trace": [["avoid(nearest_flood)"], ["go_home"]], "prediction": "G ( (prop_1 \u2192 F prop_2) \u2192 G F prop_3 ) FINISH"}
{"id": 4260, "sentence": ["Provide", "assistance", "to", "the", "safe", "hostile", "can", "only", "happen", "after", "geting", "help."], "tl": ["not", "deliver_aid(safe_hostile)", "until", "get_help"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["get_help"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* (prop_2 implies (not prop_2 until prop_1)) FINISH"}
{"id": 5125, "sentence": ["Either", "avoid", "the", "active", "gas", "leak", "or", "take", "a", "photo", "of", "unsafe", "person", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_gas_leak)", "or", "globally", "finally", "photo(unsafe_person)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["avoid(active_gas_leak)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* (not prop_1) or (globally finally prop_2) FINISH"}
{"id": 6638, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "and", "avoid", "the", "impending", "debris", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "avoid(inactive_unstable_beam)", "and", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], ["avoid(impending_debris)"], []], "bad_trace": [["avoid(inactive_unstable_beam)", "avoid(impending_debris)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 4114, "sentence": ["Our", "agent", "must", "always", "avoid", "going", "back", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 1403, "sentence": ["Every", "begin", "recording", "injured", "civilian", "is", "directly", "followed", "by", "photographing", "gas", "leak", "in", "the", "next", "step."], "tl": ["globally", "(", "record(injured_civilian)", "implies", "next", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(injured_civilian)"], ["photo(gas_leak)"]], "bad_trace": [["record(injured_civilian)"], []], "prediction": "3. *FINAL:* G (prop_1 implies next prop_2) FINISH"}
{"id": 8976, "sentence": ["Provide", "assistance", "to", "the", "injured", "hostile", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(injured_hostile)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 6727, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 3692, "sentence": ["If", "take", "a", "photo", "of", "debris", "happens", "infinitely", "often,", "then", "so", "does", "talk", "to", "the", "injured", "victim."], "tl": ["globally", "finally", "photo(debris)", "implies", "globally", "finally", "communicate(injured_victim)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[]], "bad_trace": [["photo(debris)"]], "prediction": "(globally(finally(prop_1))) implies (globally(finally(prop_2))) FINISH"}
{"id": 3933, "sentence": ["Globally,", "if", "communicate", "with", "the", "injured", "victim", "occurs", "then", "finally", "photograph", "unsafe", "rescuer", "happens."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "finally", "photo(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["communicate(injured_victim)"], [], ["photo(unsafe_rescuer)"]], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "(communicate with the injured victim) holds, then eventually (finally) prop_2 (photograph unsafe rescuer) holds. So the formula is G (prop_1 implies F prop_2).\n\n2. *Explanation dictionary* \u2013 {\"communicate with the injured victim occurs\": \"prop_1\", \"finally photograph unsafe rescuer happens\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 3376, "sentence": ["Whenever", "neither", "call", "for", "help", "nor", "go", "home", "holds,", "take", "a", "photo", "of", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. FINAL: G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 4956, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "safe", "civilian", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(safe_civilian)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["photo(safe_civilian)"], [], []], "bad_trace": [["photo(safe_civilian)"], [], ["photo(safe_civilian)"]], "prediction": "(prop_1) is always false. This can be expressed as \"finally (globally (not prop_1))\".\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F (G ...)\", \"safe civilian never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 3704, "sentence": ["This", "controller", "must", "eventually,", "avoid", "staying", "away", "from", "the", "impending", "gas", "leak."], "tl": ["finally", "(", "not", "avoid(impending_gas_leak)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_gas_leak"], "args_ref": ["impending gas leak"]}}, "good_trace": [["avoid(impending_gas_leak)"], [], []], "bad_trace": [["avoid(impending_gas_leak)"], ["avoid(impending_gas_leak)"], ["avoid(impending_gas_leak)"]], "prediction": "(F)"}
{"id": 4259, "sentence": ["Whenever", "take", "a", "video", "of", "debris", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "record", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(debris)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(debris)", "get_help", "record(unstable_beam)"]], "bad_trace": [["record(debris)", "get_help"]], "prediction": "- This is a globally (always) implication: globally, if (prop_1 and prop_2) then (prop_2 and prop_3)."}
{"id": 1162, "sentence": ["Take", "a", "picture", "of", "unstable", "beam", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unstable_beam)", "and", "next", "photo(unstable_beam)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(unstable_beam)"], [], ["photo(unstable_beam)"]], "bad_trace": [["photo(unstable_beam)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1) and G (not prop_1 implies (next prop_1 or next next prop_1)) FINISH"}
{"id": 7165, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 7538, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "picture", "of", "injured", "victim", "and", "take", "a", "picture", "of", "debris", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(injured_victim)", "and", "photo(debris)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["photo(injured_victim)"], ["photo(debris)"], []], "bad_trace": [["photo(injured_victim)", "photo(debris)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 9239, "sentence": ["Begin", "recording", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "record(fire_source)", "and", "next", "record(fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["record(fire_source)"], [], ["record(fire_source)"]], "bad_trace": [["record(fire_source)"], [], [], []], "prediction": "3. *FINAL:* G prop_1 and G (not prop_1 implies (next prop_1 or next next prop_1)) FINISH"}
{"id": 8822, "sentence": ["Whenever", "communicate", "with", "the", "safe", "hostile", "holds,", "go", "home", "holds", "as", "well."], "tl": ["globally", "(", "communicate(safe_hostile)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_hostile)", "go_home"], ["go_home"]], "bad_trace": [["communicate(safe_hostile)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 3433, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "begin", "recording", "fire", "source", "holds,", "give", "aid", "to", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(fire_source)", ")", "implies", "finally", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "record(fire_source)"]], "bad_trace": [[]], "prediction": "  \"Whenever ... holds, ... eventually holds\": \"G ((not prop_1 and not prop_2) implies F prop_3)\""}
{"id": 80, "sentence": ["If", "photograph", "flood", "holds,", "then", "in", "the", "next", "step", "get", "help", "persists", "until", "doing", "not", "go", "near", "the", "probable", "flood", "holds,", "or", "else", "get", "help", "holds", "forever."], "tl": ["photo(flood)", "implies", "next", "(", "(", "get_help", "until", "avoid(probable_flood)", ")", "or", "globally", "get_help", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], ["get_help"], ["get_help"], ["avoid(probable_flood)"]], "bad_trace": [["photo(flood)"], []], "prediction": "- The entire statement is an implication: if prop_1 then (next (prop_2 until prop_3)) or globally prop_2."}
{"id": 1314, "sentence": ["Whenever", "take", "a", "video", "of", "safe", "civilian", "and", "provide", "assistance", "to", "the", "injured", "victim", "are", "equal,", "provide", "assistance", "to", "the", "injured", "victim", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_civilian)", "double_implies", "deliver_aid(injured_victim)", ")", "implies", "(", "deliver_aid(injured_victim)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_civilian)", "deliver_aid(injured_victim)", "go_home"]], "bad_trace": [["record(safe_civilian)", "deliver_aid(injured_victim)"]], "prediction": "(prop_1 double_implies prop_2). The phrase \"provide assistance to the injured victim and go back to base are equal as well\" indicates that \"provide assistance to the injured victim\" (prop_2) and \"go back to base\" (prop_3) are also equivalent. The entire command is a \"Whenever\" statement, which corresponds to globally (G) in LTL, meaning that whenever the first equivalence holds, the second equivalence must also hold.\n\n2. *Explanation dictionary* \u2013\n{\n  \"take a video of safe civilian\": \"prop_1\",\n  \"provide assistance to the injured victim\": \"prop_2\",\n  \"go back to base\": \"prop_3\",\n  \"take a video of safe civilian and provide assistance to the injured victim are equal\": \"(prop_1 double_implies prop_2)"}
{"id": 5212, "sentence": ["If", "every", "take", "a", "picture", "of", "injured", "person", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "talk", "to", "the", "safe", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(injured_person)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(safe_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["photo(injured_person)"], ["go_home", "communicate(safe_hostile)"]], "bad_trace": [["photo(injured_person)"], ["go_home"]], "prediction": "Putting it all together: if globally (prop_1 implies finally prop_2), then globally finally prop_3."}
{"id": 3654, "sentence": ["If", "every", "request", "assistance", "is", "eventually", "followed", "by", "delivering", "aid", "to", "the", "injured", "rescuer,", "then", "stay", "away", "from", "the", "inactive", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "deliver_aid(injured_rescuer)", ")", "implies", "globally", "finally", "avoid(inactive_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_rescuer)", "avoid(inactive_unstable_beam)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_rescuer)"]], "prediction": "(request assistance) occurs, then eventually prop_2 (delivering aid) happens. This is expressed as G (prop_1 \u2192 F prop_2). The phrase \"stay away from the inactive unstable beam must occur infinitely often\" means that prop_3 (stay away from the inactive unstable beam) happens infinitely often, which is expressed as G F prop_3. The entire command is an implication: if the first condition holds, then the second must hold, so the full formula is (G (prop_1 \u2192 F prop_2)) \u2192 (G F prop_3).\n\n2. *Explanation dictionary* \u2013\n{\n  \"every request assistance is eventually followed by delivering aid to the injured rescuer\": \"G (prop_1 -> F prop_2)\",\n  \"stay away from the inactive unstable beam must occur infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* (G (prop_1 -> F prop_2)) -> (G F prop_3)"}
{"id": 2148, "sentence": ["The", "robot", "must", "always", "have", "either", "return", "to", "base", "or", "communicate", "with", "the", "injured", "hostile."], "tl": ["globally", "(", "go_home", "or", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["go_home"]], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (prop_1 or prop_2) FINISH"}
{"id": 5712, "sentence": ["The", "system", "must", "always", "avoid", "doing", "not", "go", "near", "the", "inactive", "debris."], "tl": ["globally", "(", "not", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(inactive_debris)"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 9964, "sentence": ["The", "system", "must", "always", "maintain", "both", "go", "home", "and", "communicate", "with", "the", "safe", "rescuer."], "tl": ["globally", "(", "go_home", "and", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home", "communicate(safe_rescuer)"], ["go_home", "communicate(safe_rescuer)"], ["go_home", "communicate(safe_rescuer)"]], "bad_trace": [["go_home"], ["go_home"], ["communicate(safe_rescuer)"]], "prediction": "(G). The phrase \"both go home and communicate with the safe rescuer\" indicates a conjunction (and) of two propositions: \"go home\" and \"communicate with the safe rescuer.\" We assign prop_1 to \"go home\" and prop_2 to \"communicate with the safe rescuer.\" Therefore, the formula is G (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"must always maintain\": \"G\", \"go home\": \"prop_1\", \"communicate with the safe rescuer\": \"prop_2\", \"both ... and ...\": \"and\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4246, "sentence": ["Globally,", "if", "call", "for", "help", "occurs", "then", "finally", "take", "a", "picture", "of", "unsafe", "victim", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["get_help"], [], ["photo(unsafe_victim)"]], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies finally prop_2) \u2192 G (prop_1 implies F prop_2) FINISH"}
{"id": 4089, "sentence": ["Globally,", "if", "establish", "communication", "with", "the", "injured", "rescuer", "occurs", "then", "finally", "stay", "away", "from", "the", "active", "unstable", "beam", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["avoid(active_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "(establish communication). The phrase \"then finally stay away from the active unstable beam happens\" is the consequent, represented by finally (F) applied to prop_2 (stay away from the active unstable beam). The entire formula is an implication inside the globally operator.\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"if establish communication with the injured rescuer occurs\": \"prop_1\", \"finally stay away from the active unstable beam happens\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 8747, "sentence": ["The", "system", "must", "always", "avoid", "returning", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 5083, "sentence": ["Globally,", "if", "take", "a", "photo", "of", "flood", "occurs", "then", "finally", "go", "back", "to", "base", "happens."], "tl": ["globally", "(", "photo(flood)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], [], ["go_home"]], "bad_trace": [["photo(flood)"], [], []], "prediction": "(take a photo of flood) occurs, then eventually (finally) prop_2 (go back to base) happens. So the inner formula is prop_1 implies F prop_2, and the whole formula is G (prop_1 implies F prop_2).\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"take a photo of flood occurs\": \"prop_1\", \"finally go back to base happens\": \"F prop_2\", \"if ... then ...\": \"implies\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 4011, "sentence": ["Globally,", "if", "do", "not", "go", "near", "the", "impending", "flood", "occurs", "then", "finally", "talk", "to", "the", "injured", "victim", "happens."], "tl": ["globally", "(", "avoid(impending_flood)", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(impending_flood)"], [], ["communicate(injured_victim)"]], "bad_trace": [["avoid(impending_flood)"], [], []], "prediction": "3. *FINAL:* G (implies (not prop_1) (F prop_2)) FINISH"}
{"id": 4271, "sentence": ["If", "request", "assistance", "happens", "infinitely", "often,", "then", "so", "does", "return", "to", "base."], "tl": ["globally", "finally", "get_help", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["get_help"]], "prediction": "3. *FINAL:* (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 3956, "sentence": ["If", "every", "do", "not", "go", "near", "the", "nearest", "fire", "source", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "nearest", "unstable", "beam,", "then", "record", "unsafe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "implies", "finally", "avoid(nearest_unstable_beam)", ")", "implies", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_unstable_beam)", "record(unsafe_victim)"]], "bad_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_unstable_beam)"]], "prediction": "(G) (prop_1 implies finally (F) prop_2), where prop_1 = \"do not go near the nearest fire source\" and prop_2 = \"do not go near the nearest unstable beam\".\n- \"then record unsafe victim must occur infinitely often\" means that prop_3 (\"record unsafe victim\") holds infinitely often, which is expressed as globally finally (G F prop_3).\n\nThe entire formula is an implication: if the first condition holds globally, then the second condition holds globally.\n\n2. Explanation dictionary:\n{\n  \"do not go near the nearest fire source\": \"prop_1\",\n  \"doing not go near the nearest unstable beam\": \"prop_2\",\n  \"record unsafe victim\": \"prop_3\",\n  \"every do not go near the nearest fire source is eventually followed by doing not go near the nearest unstable beam\": \"G (prop_1 implies F prop_2)"}
{"id": 8262, "sentence": ["You", "must", "eventually,", "avoid", "returning", "to", "base."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "3. *FINAL:* (F (G (not prop_1))) FINISH"}
{"id": 6491, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "rescuer", "nor", "take", "a", "picture", "of", "unstable", "beam", "holds,", "record", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_rescuer)", "and", "photo(unstable_beam)", ")", "implies", "finally", "record(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "photo(unstable_beam)"]], "bad_trace": [[]], "prediction": "  \"whenever ...\": \"globally ( ... implies ... )\","}
{"id": 1096, "sentence": ["At", "every", "step,", "give", "aid", "to", "the", "injured", "hostile", "equals", "the", "value", "of", "take", "a", "picture", "of", "flood", "in", "the", "next", "step."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "double_implies", "next", "photo(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["photo(flood)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "3. FINAL: globally (prop_1 double_implies next prop_2) FINISH"}
{"id": 9586, "sentence": ["This", "controller", "must", "always", "have", "either", "take", "a", "picture", "of", "safe", "victim", "or", "establish", "communication", "with", "the", "injured", "victim."], "tl": ["globally", "(", "photo(safe_victim)", "or", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(safe_victim)"], ["communicate(injured_victim)"], ["photo(safe_victim)"]], "bad_trace": [["photo(safe_victim)"], [], []], "prediction": "(G), indicating the condition must hold at all times.\n- \"either ... or ...\" maps to a disjunction (or).\n- \"take a picture of safe victim\" is represented by prop_1.\n- \"establish communication with the injured victim\" is represented by prop_2.\n- The entire sentence means: globally, prop_1 or prop_2 must hold.\n\n2. Explanation dictionary:\n{\"take a picture of safe victim\": \"prop_1\", \"establish communication with the injured victim\": \"prop_2\", \"always have either ... or ...\": \"G (prop_1 or prop_2)\"}\n\n3. FINAL: G (prop_1 or prop_2)"}
{"id": 5762, "sentence": ["If", "establish", "communication", "with", "the", "injured", "victim", "holds,", "then", "in", "the", "next", "step", "get", "help", "persists", "until", "going", "home", "holds,", "or", "else", "get", "help", "holds", "forever."], "tl": ["communicate(injured_victim)", "implies", "next", "(", "(", "get_help", "until", "go_home", ")", "or", "globally", "get_help", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_victim)"], ["get_help"], ["get_help"], ["go_home"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. FINAL: (prop_1 implies next (prop_2 until prop_3)) and (not prop_1 implies globally prop_2) FINISH"}
{"id": 4773, "sentence": ["Record", "unsafe", "victim", "and", "deliver", "aid", "to", "the", "safe", "hostile", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(unsafe_victim)", "and", "deliver_aid(safe_hostile)", ")", ")", "and", "globally", "(", "record(unsafe_victim)", "or", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(unsafe_victim)"], ["deliver_aid(safe_hostile)"], ["record(unsafe_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (globally (not (prop_1 and prop_2)) and globally (prop_1 or prop_2)) FINISH"}
{"id": 64, "sentence": ["The", "system", "must", "Eventually,", "both", "deliver", "aid", "to", "the", "safe", "rescuer", "and", "give", "aid", "to", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["finally", "(", "deliver_aid(safe_rescuer)", "and", "deliver_aid(safe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "deliver_aid(safe_victim)"]], "bad_trace": [[], [], []], "prediction": "finally (and(prop_1, prop_2)) FINISH"}
{"id": 9702, "sentence": ["This", "controller", "must", "always", "have", "either", "take", "a", "photo", "of", "fire", "source", "or", "take", "a", "picture", "of", "safe", "victim."], "tl": ["globally", "(", "photo(fire_source)", "or", "photo(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(fire_source)"], ["photo(safe_victim)"], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], []], "prediction": "(G), indicating the condition must hold at all times.\n- \"either ... or ...\" maps to a disjunction (or).\n- \"take a photo of fire source\" and \"take a picture of safe victim\" are represented by propositions prop_1 and prop_2 respectively.\n- The entire sentence means: globally, either prop_1 or prop_2 holds.\n\n2. Explanation dictionary:\n{\"always\": \"G\", \"either ... or ...\": \"or\", \"take a photo of fire source\": \"prop_1\", \"take a picture of safe victim\": \"prop_2\"}\n\n3. FINAL: G (prop_1 or prop_2)"}
{"id": 8389, "sentence": ["From", "some", "point", "onwards,", "deliver", "aid", "to", "the", "safe", "hostile", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "deliver_aid(safe_hostile)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], ["deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* F (prop_1 and G (not prop_2)) FINISH"}
{"id": 7900, "sentence": ["Whenever", "request", "assistance", "holds,", "stay", "away", "from", "the", "inactive", "flood", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "get_help", "implies", "next", "(", "next", "(", "next", "avoid(inactive_flood)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["get_help"], [], [], ["avoid(inactive_flood)"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 implies (next next next (not prop_2))) FINISH"}
{"id": 7575, "sentence": ["When", "communicate", "with", "the", "injured", "rescuer", "happens,", "communicate", "with", "the", "injured", "hostile", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "(", "communicate(injured_hostile)", "or", "next", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["communicate(injured_rescuer)", "communicate(injured_hostile)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "- The conditional is expressed as: prop_1 implies (prop_2 or next prop_2)."}
{"id": 1435, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "call", "for", "help", "holds,", "take", "a", "video", "of", "unsafe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "get_help", ")", "implies", "finally", "record(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["go_home", "get_help"]], "bad_trace": [[]], "prediction": "3. FINAL: G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 9143, "sentence": ["Globally,", "if", "establish", "communication", "with", "the", "safe", "rescuer", "occurs", "then", "finally", "go", "back", "to", "base", "happens."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_rescuer)"], [], ["go_home"]], "bad_trace": [["communicate(safe_rescuer)"], [], []], "prediction": "(establish communication) occurs, then eventually (finally) another event (go back to base) must happen. We represent \"establish communication with the safe rescuer occurs\" as prop_1, and \"go back to base happens\" as prop_2. The conditional is expressed as implies. The \"finally\" maps to F.\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"establish communication with the safe rescuer occurs\": \"prop_1\", \"finally go back to base happens\": \"F prop_2\", \"if ... then ...\": \"implies\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 9778, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "and", "do", "not", "go", "near", "the", "impending", "debris", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "avoid(impending_debris)", ")", ")", "and", "globally", "(", "deliver_aid(injured_victim)", "or", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [["deliver_aid(injured_victim)"], ["avoid(impending_debris)"], ["deliver_aid(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. FINAL: (globally not (prop_1 and prop_2)) and (globally (prop_1 or prop_2)) FINISH"}
{"id": 6975, "sentence": ["The", "system", "must", "always", "avoid", "requesting", "assistance."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 8781, "sentence": ["Either", "do", "not", "go", "near", "the", "active", "flood", "or", "take", "a", "video", "of", "injured", "rescuer", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_flood)", "or", "globally", "finally", "record(injured_rescuer)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_flood"], "args_ref": ["active flood"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(active_flood)"]], "bad_trace": [[]], "prediction": "  \"Either ... or ...\": \"(not prop_1) or (globally finally prop_2)\""}
{"id": 556, "sentence": ["Once", "photograph", "debris", "has", "occurred,", "provide", "assistance", "to", "the", "injured", "rescuer", "will", "never", "occur", "again."], "tl": ["globally", "(", "photo(debris)", "implies", "next", "globally", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["photo(debris)"], [], []], "bad_trace": [["photo(debris)"], [], ["deliver_aid(injured_rescuer)"]], "prediction": "(photograph debris) becomes true, the rest of the property should hold globally. The phrase \"provide assistance to the injured rescuer will never occur again\" means that prop_2 (assistance to injured rescuer) should never happen again after prop_1 has occurred. This can be expressed as: globally, if prop_1 has happened in the past (or at the current step), then prop_2 is always false from that point on. Since past operators are not allowed, we can express this as: once prop_1 occurs, then globally prop_2 is false. This is captured by: G (prop_1 \u2192 G (not prop_2)).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Once photograph debris has occurred\": \"prop_1\",\n  \"provide assistance to the injured rescuer will never occur again\": \"G (not prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 \u2192 G (not prop_2))"}
{"id": 7610, "sentence": ["Every", "communicate", "with", "the", "injured", "hostile", "is", "directly", "followed", "by", "photographing", "flood", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "next", "photo(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["communicate(injured_hostile)"], ["photo(flood)"]], "bad_trace": [["communicate(injured_hostile)"], []], "prediction": "3. *FINAL:* G (prop_1 implies next prop_2) FINISH"}
{"id": 5247, "sentence": ["The", "system", "must", "eventually,", "avoid", "establishing", "communication", "with", "the", "safe", "hostile."], "tl": ["finally", "(", "not", "communicate(safe_hostile)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(safe_hostile)"], [], []], "bad_trace": [["communicate(safe_hostile)"], ["communicate(safe_hostile)"], ["communicate(safe_hostile)"]], "prediction": "3. *FINAL:* finally (not prop_1) FINISH"}
{"id": 6065, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "active", "gas", "leak", "must", "hold", "until", "calling", "for", "help", "does,", "or", "else", "do", "not", "go", "near", "the", "active", "gas", "leak", "holds", "forever."], "tl": ["(", "avoid(active_gas_leak)", "until", "get_help", ")", "or", "globally", "avoid(active_gas_leak)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["This", "controller", "must", "prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(active_gas_leak)"], ["avoid(active_gas_leak)"], ["get_help"]], "bad_trace": [[], []], "prediction": "(negated as \"not prop_1\"). The phrase \"calling for help does\" is represented by prop_2. The phrase \"do not go near the active gas leak holds forever\" means \"not prop_1\" holds globally (G not prop_1). The phrase \"must hold until calling for help does\" translates to \"(not prop_1) U prop_2\". The entire command says that either \"(not prop_1) U prop_2\" holds, or \"G not prop_1\" holds.\n\n2. *Explanation dictionary* \u2013\n{\n  \"do not go near the active gas leak\": \"not prop_1\",\n  \"calling for help does\": \"prop_2\",\n  \"do not go near the active gas leak must hold until calling for help does\": \"(not prop_1) until prop_2\",\n  \"do not go near the active gas leak holds forever\": \"globally not prop_1\",\n  \"must hold until calling for help does, or else do not go near the active gas leak holds forever\": \"((not prop_1) until prop_2)"}
{"id": 6902, "sentence": ["Whenever", "neither", "take", "a", "video", "of", "debris", "nor", "begin", "recording", "unstable", "beam", "holds,", "take", "a", "picture", "of", "unsafe", "person", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(debris)", "and", "record(unstable_beam)", ")", "implies", "finally", "photo(unsafe_person)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(debris)", "record(unstable_beam)"]], "bad_trace": [[]], "prediction": "3. FINAL: G ( (not (prop_1 or prop_2)) implies F prop_3 ) FINISH"}
{"id": 9495, "sentence": ["You", "must", "always", "maintain", "both", "give", "aid", "to", "the", "injured", "rescuer", "and", "record", "fire", "source."], "tl": ["globally", "(", "deliver_aid(injured_rescuer)", "and", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "record(fire_source)"], ["deliver_aid(injured_rescuer)", "record(fire_source)"], ["deliver_aid(injured_rescuer)", "record(fire_source)"]], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["record(fire_source)"]], "prediction": "(and) of two propositions: \"give aid to the injured rescuer\" and \"record fire source.\" We assign prop_1 to \"give aid to the injured rescuer\" and prop_2 to \"record fire source.\" Thus, the formula is G (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"always maintain\": \"G\", \"give aid to the injured rescuer\": \"prop_1\", \"record fire source\": \"prop_2\", \"both ... and ...\": \"and\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 8128, "sentence": ["If", "every", "take", "a", "picture", "of", "debris", "is", "eventually", "followed", "by", "staying", "away", "from", "the", "impending", "unstable", "beam,", "then", "provide", "assistance", "to", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(debris)", "implies", "finally", "avoid(impending_unstable_beam)", ")", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(debris)"], ["avoid(impending_unstable_beam)", "deliver_aid(injured_victim)"]], "bad_trace": [["photo(debris)"], ["avoid(impending_unstable_beam)"]], "prediction": "3. *FINAL:* (G (prop_1 implies F prop_2)) implies (G F prop_3"}
{"id": 7996, "sentence": ["This", "controller", "must", "eventually,", "avoid", "recording", "safe", "civilian."], "tl": ["finally", "(", "not", "record(safe_civilian)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(safe_civilian)"], [], []], "bad_trace": [["record(safe_civilian)"], ["record(safe_civilian)"], ["record(safe_civilian)"]], "prediction": "(F). The phrase \"avoid recording safe civilian\" means that the proposition \"recording safe civilian\" should never be true, so we use \"not prop_1\" where prop_1 represents \"recording safe civilian\". Combining these, the formula states that eventually, it is always the case that \"recording safe civilian\" does not occur.\n\n2. *Explanation dictionary* \u2013 {\"eventually\": \"F\", \"avoid recording safe civilian\": \"not prop_1\"}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 4560, "sentence": ["Take", "a", "photo", "of", "unsafe", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unsafe_victim)", "and", "next", "photo(unsafe_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unsafe_victim)"], [], ["photo(unsafe_victim)"]], "bad_trace": [["photo(unsafe_victim)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 implies (prop_2 or next prop_2 or next next prop_2)) FINISH"}
{"id": 945, "sentence": ["If", "return", "to", "base", "holds", "and", "do", "not", "go", "near", "the", "nearest", "gas", "leak", "holds", "next,", "then", "give", "aid", "to", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "avoid(nearest_gas_leak)", "implies", "next", "next", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home"], ["avoid(nearest_gas_leak)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["go_home"], ["avoid(nearest_gas_leak)"], []], "prediction": "3. FINAL: (prop_1 and not next prop_2) implies next next prop_3 FINISH"}
{"id": 6367, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "deliver", "aid", "to", "the", "safe", "hostile", "and", "avoid", "the", "impending", "fire", "source."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "and", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"], ["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"], ["deliver_aid(safe_hostile)", "avoid(impending_fire_source)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["avoid(impending_fire_source)"]], "prediction": "(prop_1 and prop_2)"}
{"id": 9791, "sentence": ["Whenever", "avoid", "the", "impending", "flood", "holds,", "from", "the", "next", "step", "onwards", "record", "safe", "person", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(impending_flood)", "implies", "next", "finally", "record(safe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["avoid(impending_flood)"], [], ["record(safe_person)"]], "bad_trace": [["avoid(impending_flood)"], [], []], "prediction": "(prop_1). The phrase \"from the next step onwards\" means the consequent applies starting from the next state, so we use the \"next\" operator. The phrase \"record safe person will eventually hold\" means that eventually (finally) \"record safe person\" (prop_2) will be true. Putting it all together: globally, if prop_1 holds, then from the next step onwards, eventually prop_2 holds.\n\n2. *Explanation dictionary* \u2013\n{\n  \"avoid the impending flood\": \"prop_1\",\n  \"record safe person\": \"prop_2\",\n  \"Whenever avoid the impending flood holds\": \"prop_1\",\n  \"from the next step onwards\": \"next\",\n  \"will eventually hold\": \"finally prop_2\"\n}\n\n3. *FINAL:* G (prop_1 implies X (F prop_2))"}
{"id": 2635, "sentence": ["Establish", "communication", "with", "the", "injured", "hostile", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "deliver", "aid", "to", "the", "safe", "hostile", "holds", "infinitely", "often."], "tl": ["communicate(injured_hostile)", "until", "(", "globally", "(", "finally", "deliver_aid(safe_hostile)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["communicate(injured_hostile)"]], "prediction": "3. *FINAL:* (prop_1 until (F (G F prop_2))) FINISH"}
{"id": 8309, "sentence": ["Whenever", "photograph", "fire", "source", "and", "get", "help", "are", "equal,", "get", "help", "and", "begin", "recording", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(fire_source)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "record(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(fire_source)", "get_help", "record(unstable_beam)"]], "bad_trace": [["photo(fire_source)", "get_help"]], "prediction": "- So the formula is: globally ( (prop_1 and prop_2) implies (prop_2 and prop_3) )"}
{"id": 21, "sentence": ["In", "this", "task,", "return", "home,", "then", "begin", "recording", "gas", "leak."], "tl": ["(", "go_home", "until", "record(gas_leak)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home", "record(gas_leak)"]], "bad_trace": [[], [], []], "prediction": "- But since \"return home\" is an event, not a state, we can model it as"}
{"id": 8679, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "begin", "recording", "safe", "victim", "holds", "infinitely", "often."], "tl": ["deliver_aid(injured_victim)", "until", "(", "globally", "(", "finally", "record(safe_victim)", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(safe_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "(prop_1 until prop_2)\",\n  \"from some point on\": \"F\",\n  \"begin recording\": \"prop_2\",\n  \"safe victim holds infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* (prop_1 U prop_2) and (G F prop_3)"}
{"id": 7537, "sentence": ["The", "system", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "unstable", "beam."], "tl": ["finally", "(", "not", "avoid(nearest_unstable_beam)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["avoid(nearest_unstable_beam)"], [], []], "bad_trace": [["avoid(nearest_unstable_beam)"], ["avoid(nearest_unstable_beam)"], ["avoid(nearest_unstable_beam)"]], "prediction": "(F). The phrase \"avoid staying away from\" means the system should not remain in a state where it is away from the nearest unstable beam indefinitely. This can be interpreted as \"it is not globally true that the system is away from the nearest unstable beam,\" or equivalently, \"eventually the system is not away from the nearest unstable beam.\" We represent \"the system is away from the nearest unstable beam\" as prop_1, so \"not away\" is \"not prop_1.\" Therefore, the formula is F (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid staying away from the nearest unstable beam\": \"not prop_1\"}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 2790, "sentence": ["Whenever", "neither", "communicate", "with", "the", "injured", "hostile", "nor", "call", "for", "help", "holds,", "avoid", "the", "probable", "flood", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(injured_hostile)", "and", "get_help", ")", "implies", "finally", "avoid(probable_flood)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["communicate(injured_hostile)", "get_help"]], "bad_trace": [[]], "prediction": "(G), and \"eventually holds\" corresponds to finally (F). So the formula is: globally ((not prop_1 and not prop_2) implies finally prop_3)"}
{"id": 8808, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "probable", "unstable", "beam,", "then", "communicate", "with", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "avoid(probable_unstable_beam)", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["go_home"], ["avoid(probable_unstable_beam)", "communicate(injured_rescuer)"]], "bad_trace": [["go_home"], ["avoid(probable_unstable_beam)"]], "prediction": "3. *FINAL:* (G (prop_1 \u2192 F prop_2)) implies (G F prop_3)"}
{"id": 8828, "sentence": ["Deliver", "aid", "to", "the", "safe", "rescuer", "must", "hold", "until", "go", "home", "does,", "or", "else", "deliver", "aid", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["(", "deliver_aid(safe_rescuer)", "until", "go_home", ")", "or", "globally", "deliver_aid(safe_rescuer)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["go_home"]], "bad_trace": [[], []], "prediction": "So the formula is: (prop_1 until prop_2) or (globally prop_1)."}
{"id": 2845, "sentence": ["Whenever", "request", "assistance", "and", "avoid", "the", "inactive", "debris", "are", "equal,", "avoid", "the", "inactive", "debris", "and", "return", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "avoid(inactive_debris)", ")", "implies", "(", "avoid(inactive_debris)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "avoid(inactive_debris)", "go_home"]], "bad_trace": [["get_help", "avoid(inactive_debris)"]], "prediction": "(prop_1 implies ...)\", where prop_1 represents \"request assistance\".\n- \"and avoid the inactive debris are equal\" means that the propositions \"avoid the inactive debris\" and \"are equal\" hold together; we can represent \"avoid the inactive debris\" as prop_2 and \"are equal\" as prop_3, and their equality means prop_2 double_implies prop_3.\n- \"avoid the inactive debris and return home are equal as well\" means that \"avoid the inactive debris\" (prop_2) and \"return home\" (prop_4) are equal, so prop_2 double_implies prop_4.\n- The entire condition after \"Whenever request assistance\" is that both equalities hold simultaneously, so (prop_2 double_implies prop_3) and (prop_2 double_implies prop_4)"}
{"id": 446, "sentence": ["You", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "gas", "leak."], "tl": ["finally", "(", "not", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["avoid(nearest_gas_leak)"], [], []], "bad_trace": [["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"]], "prediction": "3. *FINAL:* (F (not prop_1)) FINISH"}
{"id": 3384, "sentence": ["Whenever", "record", "unsafe", "civilian", "holds,", "take", "a", "picture", "of", "safe", "victim", "holds", "as", "well."], "tl": ["globally", "(", "record(unsafe_civilian)", "implies", "photo(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(unsafe_civilian)", "photo(safe_victim)"], ["photo(safe_victim)"]], "bad_trace": [["record(unsafe_civilian)"], []], "prediction": "(G) operator with an implication. The antecedent is \"record unsafe civilian holds,\" represented by prop_1. The consequent is \"take a picture of safe victim holds as well,\" represented by prop_2. The phrase \"as well\" implies that whenever the first condition holds, the second must also hold at the same time or immediately after. Since the command is about a reaction whenever the first condition holds, the simplest interpretation is that whenever prop_1 holds, prop_2 must also hold at the same time (or immediately). This is captured by G (prop_1 implies prop_2).\n\n2. *Explanation dictionary* \u2013 {\"record unsafe civilian holds\": \"prop_1\", \"take a picture of safe victim holds\": \"prop_2\", \"Whenever ... holds, ... as well\": \"G (prop_1 implies prop_2)\"}\n\n3. *FINAL:* G (prop_1 implies prop_2)"}
{"id": 430, "sentence": ["You", "must", "eventually,", "avoid", "delivering", "aid", "to", "the", "injured", "victim."], "tl": ["finally", "(", "not", "deliver_aid(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 2098, "sentence": ["From", "some", "point", "onwards,", "do", "not", "go", "near", "the", "nearest", "unstable", "beam", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "avoid(nearest_unstable_beam)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["avoid(nearest_unstable_beam)"], [], []], "bad_trace": [["avoid(nearest_unstable_beam)"], [], ["avoid(nearest_unstable_beam)"]], "prediction": "(assuming prop_1 means \"go near the nearest unstable beam\"). The phrase \"never occurs again\" reinforces that from that point onwards, the condition \"go near the nearest unstable beam\" does not happen. This is captured by \"finally (globally (not prop_1))\" meaning eventually, from some point onwards, always not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F (G ...)\", \"do not go near the nearest unstable beam\": \"not prop_1\", \"never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 2391, "sentence": ["Go", "home", "can", "only", "happen", "after", "delivering", "aid", "to", "the", "injured", "hostile."], "tl": ["not", "go_home", "until", "deliver_aid(injured_hostile)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[], [], ["deliver_aid(injured_hostile)"]], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(prop_1) must not occur until after the event \"delivering aid to the injured hostile\" (prop_2) has happened. This is captured by the temporal operator \"until\" (U), where \"go home\" is allowed only after \"delivering aid\" has occurred. Formally, \"go home\" cannot happen before \"delivering aid\" has happened, so globally, \"go home\" implies that \"delivering aid\" has already occurred or is occurring.\n\n2. *Explanation dictionary* \u2013\n{\n  \"go home\": \"prop_1\",\n  \"delivering aid to the injured hostile\": \"prop_2\",\n  \"go home can only happen after delivering aid to the injured hostile\": \"G (prop_1 implies F prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 6714, "sentence": ["If", "photograph", "safe", "person", "holds,", "then", "in", "the", "next", "step", "deliver", "aid", "to", "the", "injured", "hostile", "persists", "until", "geting", "help", "holds,", "or", "else", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["photo(safe_person)", "implies", "next", "(", "(", "deliver_aid(injured_hostile)", "until", "get_help", ")", "or", "globally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["photo(safe_person)"], ["deliver_aid(injured_hostile)"], ["deliver_aid(injured_hostile)"], ["get_help"]], "bad_trace": [["photo(safe_person)"], []], "prediction": "(prop_1 implies (next (prop_2 until prop_3) or globally prop_2)) FINISH"}
{"id": 692, "sentence": ["Either", "talk", "to", "the", "safe", "hostile", "happens", "infinitely", "often,", "or", "return", "home", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "communicate(safe_hostile)", "or", "next", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_hostile)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (or (globally (finally prop_1)) (next prop_2)) FINISH"}
{"id": 5483, "sentence": ["You", "must", "always", "avoid", "staying", "away", "from", "the", "impending", "debris."], "tl": ["globally", "(", "not", "avoid(impending_debris)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(impending_debris)"], [], []], "prediction": "(G), \"avoid staying away\" means \"not away,\" so \"not prop_1\" where prop_1 represents \"staying away from the impending debris.\"\n\n2. *Explanation dictionary* \u2013 {\"always avoid staying away from the impending debris\": \"globally not prop_1\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 4057, "sentence": ["Record", "safe", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "go", "home", "holds", "infinitely", "often."], "tl": ["record(safe_rescuer)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_rescuer)"], ["record(safe_rescuer)"], ["go_home"]], "bad_trace": [["record(safe_rescuer)"], ["record(safe_rescuer)"], ["record(safe_rescuer)"]], "prediction": "(prop_1) must be true continuously until another condition becomes true. The phrase \"from some point on\" suggests that this behavior starts eventually and continues globally. The phrase \"go home holds infinitely often\" means that \"go home\" (prop_2) holds infinitely often, which in LTL is expressed as \"globally finally prop_2\" (G F prop_2). Combining these, from some point on, \"holding\" holds until \"go home\" holds infinitely often.\n\n2. *Explanation dictionary* \u2013\n{\n  \"holding\": \"prop_1\",\n  \"go home\": \"prop_2\",\n  \"go home holds infinitely often\": \"G F prop_2\",\n  \"must keep holding until\": \"prop_1 U (G F prop_2)\",\n  \"from some point on\": \"F (prop_1 U (G F prop_2))\"\n}\n\n3. *FINAL:* F (prop_1 U (G F prop_2))"}
{"id": 558, "sentence": ["Whenever", "neither", "go", "back", "to", "base", "nor", "take", "a", "picture", "of", "safe", "victim", "holds,", "get", "help", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "photo(safe_victim)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "photo(safe_victim)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G ( (not (prop_1 or prop_2)) implies (F prop_3) ) FINISH"}
{"id": 6451, "sentence": ["Return", "to", "base", "holds", "at", "all", "times."], "tl": ["globally", "go_home"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 4800, "sentence": ["If", "every", "take", "a", "picture", "of", "unsafe", "civilian", "is", "eventually", "followed", "by", "going", "home,", "then", "begin", "recording", "unsafe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(unsafe_civilian)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unsafe_civilian)"], ["go_home", "record(unsafe_victim)"]], "bad_trace": [["photo(unsafe_civilian)"], ["go_home"]], "prediction": "(take a picture of unsafe civilian) occurs, then eventually prop_2 (going home) occurs. This is expressed as G(prop_1 \u2192 F prop_2).\n- \"then begin recording unsafe victim must occur infinitely often\" means that prop_3 (begin recording unsafe victim) happens infinitely often, which in LTL is expressed as G F prop_3 (globally eventually prop_3).\n\n2. Explanation dictionary:\n{\n  \"take a picture of unsafe civilian\": \"prop_1\",\n  \"going home\": \"prop_2\",\n  \"begin recording unsafe victim\": \"prop_3\",\n  \"If every take a picture of unsafe civilian is eventually followed by going home\": \"G(prop_1 \u2192 F prop_2)\",\n  \"begin recording unsafe victim must occur infinitely often\": \"G F prop_3\"\n}\n\n3. FINAL: (G(prop_1 \u2192 F prop_2)) \u2192 (G F prop_3)"}
{"id": 5036, "sentence": ["At", "every", "step,", "go", "home", "equals", "the", "value", "of", "provide", "assistance", "to", "the", "injured", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "go_home", "double_implies", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_victim)"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally (double_implies prop_1 (next prop_2)) FINISH"}
{"id": 3836, "sentence": ["Whenever", "neither", "communicate", "with", "the", "injured", "rescuer", "nor", "begin", "recording", "injured", "civilian", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(injured_rescuer)", "and", "record(injured_civilian)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "record(injured_civilian)"]], "bad_trace": [[]], "prediction": "  \"Whenever ... then ...\": \"G ((not prop_1 and not prop_2 and prop_3) implies (F prop_4))\""}
{"id": 9090, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* (G prop_1) and (G (not prop_1 implies (next prop_1 or next next prop_1))) FINISH"}
{"id": 912, "sentence": ["Whenever", "record", "injured", "civilian", "holds,", "eventually", "provide", "assistance", "to", "the", "safe", "hostile", "will", "hold."], "tl": ["globally", "(", "record(injured_civilian)", "implies", "finally", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(injured_civilian)"], [], ["deliver_aid(safe_hostile)"]], "bad_trace": [["record(injured_civilian)"], [], []], "prediction": "(record injured civilian) is true, then \"eventually provide assistance to the safe hostile will hold\" means that at some future point prop_2 (assistance to the safe hostile) will be true. This is captured by globally (G) stating that if prop_1 holds, then finally (F) prop_2 will hold.\n\n2. *Explanation dictionary* \u2013 {\"Whenever record injured civilian holds\": \"prop_1\", \"eventually provide assistance to the safe hostile will hold\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 462, "sentence": ["If", "take", "a", "picture", "of", "fire", "source", "holds", "and", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "next,", "then", "do", "not", "go", "near", "the", "active", "debris", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "photo(fire_source)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "avoid(active_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [["photo(fire_source)"], ["deliver_aid(injured_hostile)"], ["avoid(active_debris)"]], "bad_trace": [["photo(fire_source)"], ["deliver_aid(injured_hostile)"], []], "prediction": "- The entire formula is an implication: (prop_1 and next(prop_2)) implies next(next(not prop_3))."}
{"id": 4212, "sentence": ["Communicate", "with", "the", "injured", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(injured_victim)", "and", "next", "communicate(injured_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["communicate(injured_victim)"], [], ["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_victim)"], [], [], []], "prediction": "  \"with at most a two-step grace period for recovery\": \"prop_1 or (not prop_1 and next prop_1) or (not prop_1 and not next prop_1 and next next prop_1)\""}
{"id": 9395, "sentence": ["Whenever", "record", "flood", "and", "begin", "recording", "safe", "rescuer", "are", "equal,", "begin", "recording", "safe", "rescuer", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(flood)", "double_implies", "record(safe_rescuer)", ")", "implies", "(", "record(safe_rescuer)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(flood)", "record(safe_rescuer)", "go_home"]], "bad_trace": [["record(flood)", "record(safe_rescuer)"]], "prediction": "- So, whenever (prop_1 and prop_2) hold, eventually (prop_2 and prop_3) hold."}
{"id": 2860, "sentence": ["Whenever", "call", "for", "help", "holds,", "return", "home", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help", "go_home"], ["go_home"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1). The phrase \"return home holds as well\" means that whenever the antecedent is true, \"return home\" (prop_2) must also be true at the same time or subsequently. Since the command does not specify timing beyond \"whenever,\" we interpret it as \"always, if call for help holds, then return home holds.\" This is expressed as a globally (G) operator over an implication from prop_1 to prop_2.\n\n2. *Explanation dictionary* \u2013\n{\n  \"call for help holds\": \"prop_1\",\n  \"return home holds\": \"prop_2\",\n  \"Whenever call for help holds, return home holds as well\": \"G (prop_1 implies prop_2)\"\n}\n\n3. *FINAL:* G (prop_1 implies prop_2)"}
{"id": 9425, "sentence": ["Take", "a", "photo", "of", "safe", "person", "and", "establish", "communication", "with", "the", "safe", "victim", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "photo(safe_person)", "and", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(safe_person)"], ["communicate(safe_victim)"], []], "bad_trace": [["photo(safe_person)", "communicate(safe_victim)"]], "prediction": "3. *FINAL:* globally (not (prop_1 and prop_2)) FINISH"}
{"id": 5529, "sentence": ["At", "every", "step,", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "equals", "the", "value", "of", "provide", "assistance", "to", "the", "injured", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(inactive_gas_leak)", "double_implies", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_gas_leak)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_gas_leak)"], []], "prediction": "(G), meaning the property holds at all times.\n- \"do not go near the inactive gas leak\" is a negation of a proposition representing \"go near the inactive gas leak\" (prop_1).\n- \"equals the value of provide assistance to the injured victim in the next step\" means that the truth value of \"go near the inactive gas leak\" is the same as \"provide assistance to the injured victim\" in the next step.\n- We represent \"provide assistance to the injured victim\" as prop_2.\n- The equality of truth values between prop_1 and next prop_2 is expressed as a double implication: prop_1 double_implies next prop_2.\n- Since the command says \"do not go near the inactive gas leak equals the value of provide assistance...\", the negation applies to prop_1, so the formula is: (not prop_1)"}
{"id": 5429, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(F), indicating that starting at some future point. The phrase \"go back to base\" is represented by prop_1 (assuming prop_1 means \"go back to base\"). The phrase \"never occurs again\" means \"globally not\" (G not) for the event \"go back to base\" after that point. Combining these, from some point onwards (F), it is always the case (G) that \"go back to base\" does not occur (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"go back to base\": \"prop_1\", \"never occurs again\": \"G not\"}\n\n3. *FINAL:* F(G(not prop_1))"}
{"id": 1594, "sentence": ["Provide", "assistance", "to", "the", "injured", "victim", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "next", "deliver_aid(injured_victim)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], ["deliver_aid(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 5854, "sentence": ["Whenever", "neither", "get", "help", "nor", "return", "home", "holds,", "deliver", "aid", "to", "the", "safe", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* G ( (not (prop_1 or prop_2)) implies (F prop_3) ) FINISH"}
{"id": 6525, "sentence": ["Globally,", "if", "talk", "to", "the", "injured", "rescuer", "occurs", "then", "finally", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["communicate(injured_rescuer)"], [], ["avoid(impending_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "3. *FINAL:* G (prop_1 implies F (not prop_2)) FINISH"}
{"id": 9772, "sentence": ["In", "this", "task,", "give", "aid", "to", "the", "safe", "hostile,", "then", "begin", "recording", "fire", "source."], "tl": ["(", "deliver_aid(safe_hostile)", "until", "record(fire_source)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(fire_source)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (prop_1 until prop_2) and finally prop_2 FINISH"}
{"id": 7918, "sentence": ["Whenever", "call", "for", "help", "and", "take", "a", "picture", "of", "unstable", "beam", "are", "equal,", "take", "a", "picture", "of", "unstable", "beam", "and", "stay", "away", "from", "the", "inactive", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "photo(unstable_beam)", ")", "implies", "(", "photo(unstable_beam)", "double_implies", "avoid(inactive_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["get_help", "photo(unstable_beam)", "avoid(inactive_flood)"]], "bad_trace": [["get_help", "photo(unstable_beam)"]], "prediction": "- This is captured by globally (G) stating that (prop_1 and prop_2) implies (prop_2 and prop_3)."}
{"id": 3592, "sentence": ["If", "take", "a", "video", "of", "gas", "leak", "holds", "and", "take", "a", "picture", "of", "unstable", "beam", "holds", "next,", "then", "return", "to", "base", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(gas_leak)", "and", "next", "photo(unstable_beam)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)"], ["photo(unstable_beam)"], ["go_home"]], "bad_trace": [["record(gas_leak)"], ["photo(unstable_beam)"], []], "prediction": " \"If ... and ... next, then ... in the step after that\": \"(prop_1 and next prop_2) implies next prop_3\"}"}
{"id": 7877, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "take", "a", "picture", "of", "unstable", "beam", "and", "take", "a", "photo", "of", "unsafe", "victim."], "tl": ["globally", "(", "photo(unstable_beam)", "and", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(unstable_beam)", "photo(unsafe_victim)"], ["photo(unstable_beam)", "photo(unsafe_victim)"], ["photo(unstable_beam)", "photo(unsafe_victim)"]], "bad_trace": [["photo(unstable_beam)"], ["photo(unstable_beam)"], ["photo(unsafe_victim)"]], "prediction": "(G).\n- \"both take a picture of unstable beam and take a photo of unsafe victim\" means both propositions must hold simultaneously at all times.\n- Assign prop_1 to \"take a picture of unstable beam\" and prop_2 to \"take a photo of unsafe victim\".\n- The conjunction of prop_1 and prop_2 is maintained globally.\n\n2. Explanation dictionary:\n{\"take a picture of unstable beam\": \"prop_1\", \"take a photo of unsafe victim\": \"prop_2\", \"always maintain both ... and ...\": \"G (prop_1 and prop_2)\"}\n\n3. FINAL: G (prop_1 and prop_2)"}
{"id": 1394, "sentence": ["If", "every", "stay", "away", "from", "the", "nearest", "fire", "source", "is", "eventually", "followed", "by", "requesting", "assistance,", "then", "return", "home", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_fire_source)"], ["get_help", "go_home"]], "bad_trace": [["avoid(nearest_fire_source)"], ["get_help"]], "prediction": "(G) whenever prop_1 (stay away from fire) occurs, then eventually (F) prop_2 (requesting assistance) occurs. This is expressed as G (prop_1 \u2192 F prop_2).\n- \"then return home must occur infinitely often\" means that prop_3 (return home) happens infinitely often, which is expressed as G F prop_3 (globally eventually prop_3).\n\nCombining these with implication: (G (prop_1 \u2192 F prop_2)) \u2192 (G F prop_3).\n\n2. Explanation dictionary:\n{\n  \"every stay away from the nearest fire source is eventually followed by requesting assistance\": \"G (prop_1 \u2192 F prop_2)\",\n  \"return home must occur infinitely often\": \"G F prop_3\"\n}\n\n3. FINAL: (G (prop_1 \u2192 F prop_2)) implies (G F prop_3)"}
{"id": 726, "sentence": ["If", "every", "do", "not", "go", "near", "the", "active", "gas", "leak", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "rescuer,", "then", "provide", "assistance", "to", "the", "safe", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "avoid(active_gas_leak)", "implies", "finally", "communicate(injured_rescuer)", ")", "implies", "globally", "finally", "deliver_aid(safe_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["avoid(active_gas_leak)"], ["communicate(injured_rescuer)", "deliver_aid(safe_hostile)"]], "bad_trace": [["avoid(active_gas_leak)"], ["communicate(injured_rescuer)"]], "prediction": "The entire formula is: (globally (not prop_1 implies finally prop_2)) implies (globally finally prop_3)."}
{"id": 4514, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(finally, F), indicating that starting at some future point. The phrase \"go back to base never occurs again\" means that once we reach that point, \"go back to base\" (prop_1) does not occur anymore, i.e., globally not prop_1 from that point onwards. Combining these, we say: eventually (F) from that point onwards, globally (G) not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"go back to base never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 6424, "sentence": ["Once", "give", "aid", "to", "the", "injured", "victim", "has", "occurred,", "record", "injured", "victim", "will", "never", "occur", "again."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "globally", "not", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], [], ["record(injured_victim)"]], "prediction": "3. *FINAL:* (F prop_1) implies (G (not prop_2)) FINISH"}
{"id": 6550, "sentence": ["The", "system", "must", "Eventually,", "both", "return", "home", "and", "give", "aid", "to", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "deliver_aid(safe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_victim)"]], "bad_trace": [[], [], []], "prediction": "(F). The phrase \"both return home and give aid to the safe victim hold simultaneously\" indicates a conjunction (and) of two propositions that must hold at the same time. We assign \"return home\" to prop_1 and \"give aid to the safe victim hold\" to prop_2. The entire formula states that eventually, both prop_1 and prop_2 hold simultaneously.\n\n2. *Explanation dictionary* \u2013 {\"Eventually\": \"F\", \"return home\": \"prop_1\", \"give aid to the safe victim hold\": \"prop_2\", \"both ... and ... simultaneously\": \"(prop_1 and prop_2)\"}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 5846, "sentence": ["Whenever", "talk", "to", "the", "safe", "hostile", "and", "avoid", "the", "nearest", "flood", "are", "equal,", "avoid", "the", "nearest", "flood", "and", "give", "aid", "to", "the", "injured", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "communicate(safe_hostile)", "double_implies", "avoid(nearest_flood)", ")", "implies", "(", "avoid(nearest_flood)", "double_implies", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_hostile)", "avoid(nearest_flood)", "deliver_aid(injured_rescuer)"]], "bad_trace": [["communicate(safe_hostile)", "avoid(nearest_flood)"]], "prediction": "- This is expressed as: G((prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3))."}
{"id": 4750, "sentence": ["Record", "unstable", "beam", "holds", "at", "all", "times."], "tl": ["globally", "record(unstable_beam)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"]], "bad_trace": [["record(unstable_beam)"], []], "prediction": "(prop_1) is always true. The phrase \"at all times\" corresponds to the globally operator G, so the formula is G(prop_1).\n\n2. *Explanation dictionary* \u2013 {\"unstable beam holds\": \"prop_1\", \"at all times\": \"globally (G)\"}\n\n3. *FINAL:* globally(prop_1)"}
{"id": 3065, "sentence": ["Whenever", "establish", "communication", "with", "the", "injured", "hostile", "holds,", "eventually", "request", "assistance", "will", "hold."], "tl": ["globally", "(", "communicate(injured_hostile)", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_hostile)"], [], ["get_help"]], "bad_trace": [["communicate(injured_hostile)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies finally prop_2) FINISH"}
{"id": 4504, "sentence": ["Record", "debris", "must", "hold", "until", "go", "home", "does,", "or", "else", "record", "debris", "holds", "forever."], "tl": ["(", "record(debris)", "until", "go_home", ")", "or", "globally", "record(debris)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(debris)"], ["record(debris)"], ["go_home"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* ((prop_1 until prop_2) or (globally prop_1)) FINISH"}
{"id": 9987, "sentence": ["If", "provide", "assistance", "to", "the", "injured", "hostile", "holds", "and", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "holds", "next,", "then", "deliver", "aid", "to", "the", "safe", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "and", "next", "avoid(inactive_gas_leak)", "implies", "next", "next", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["avoid(inactive_gas_leak)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["deliver_aid(injured_hostile)"], ["avoid(inactive_gas_leak)"], []], "prediction": "- So the implication is: (prop_1 and next (not prop_2)) implies next next prop_3."}
{"id": 1143, "sentence": ["From", "some", "point", "onwards,", "call", "for", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "(represented by prop_1) is always false. This can be expressed as \"finally (globally not prop_1)\".\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\" : \"F\", \"call for help never occurs again\" : \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 1125, "sentence": ["At", "every", "step,", "photograph", "injured", "person", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(injured_person)", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["photo(injured_person)"], ["photo(unsafe_victim)"]], "bad_trace": [["photo(injured_person)"], []], "prediction": "3. *FINAL:* globally (prop_1 double_implies next prop_2) FINISH"}
{"id": 1212, "sentence": ["The", "robot", "must", "eventually", "return", "home", "or", "request", "assistance."], "tl": ["finally", "(", "go_home", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (F (prop_1 or prop_2)) FINISH"}
{"id": 2421, "sentence": ["Whenever", "return", "home", "holds,", "from", "the", "next", "step", "onwards", "begin", "recording", "unsafe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "go_home", "implies", "next", "finally", "record(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["go_home"], [], ["record(unsafe_rescuer)"]], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies next (finally prop_2)) FINISH"}
{"id": 7558, "sentence": ["This", "controller", "must", "eventually,", "avoid", "talking", "to", "the", "safe", "victim."], "tl": ["finally", "(", "not", "communicate(safe_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"], [], []], "bad_trace": [["communicate(safe_victim)"], ["communicate(safe_victim)"], ["communicate(safe_victim)"]], "prediction": "(F). The phrase \"avoid talking to the safe victim\" means that the proposition representing \"talking to the safe victim\" (prop_1) should never be true. To express \"avoid,\" we use \"not prop_1.\" Combining these, \"must eventually avoid\" means that from some point onward, \"not prop_1\" holds globally. However, since \"avoid\" is about never doing it, the correct interpretation is that \"talking to the safe victim\" never happens, i.e., globally not prop_1. But the command says \"must eventually avoid,\" which suggests that after some point, the controller stops talking to the safe victim. So, the formula is: finally globally not prop_1, i.e., F G (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid talking to the safe victim\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 6122, "sentence": ["Both", "photograph", "unstable", "beam", "and", "return", "to", "base", "hold", "at", "every", "step."], "tl": ["globally", "(", "photo(unstable_beam)", "and", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unstable_beam)", "go_home"]], "bad_trace": [["photo(unstable_beam)"], []], "prediction": "(and). \"At every step\" corresponds to globally (G).\n\n2. *Explanation dictionary* \u2013 {\"photograph unstable beam\": \"prop_1\", \"return to base hold\": \"prop_2\", \"both ... and ...\": \"and\", \"at every step\": \"globally\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4034, "sentence": ["If", "talk", "to", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "begin", "recording", "unsafe", "person", "persists", "until", "talking", "to", "the", "injured", "victim", "holds,", "or", "else", "begin", "recording", "unsafe", "person", "holds", "forever."], "tl": ["communicate(injured_rescuer)", "implies", "next", "(", "(", "record(unsafe_person)", "until", "communicate(injured_victim)", ")", "or", "globally", "record(unsafe_person)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["communicate(injured_rescuer)"], ["record(unsafe_person)"], ["record(unsafe_person)"], ["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "- The entire sentence is: (prop_1) implies (next (prop_2 until prop_3)) or else (globally prop_2)."}
{"id": 7450, "sentence": ["Take", "a", "video", "of", "unstable", "beam", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "record(unstable_beam)", "and", "next", "record(unstable_beam)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unstable_beam)"], [], ["record(unstable_beam)"]], "bad_trace": [["record(unstable_beam)"], [], [], []], "prediction": "  \"at most a two-step grace period for recovery\": \"globally (not prop_1 implies (next prop_1 or next next prop_1))\""}
{"id": 472, "sentence": ["Whenever", "go", "home", "holds,", "provide", "assistance", "to", "the", "safe", "hostile", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home", "deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], []], "prediction": "(go home) is true at a time point.\n- \"provide assistance to the safe hostile holds as well\" means that proposition prop_2 (assistance to safe hostile holds) should also hold whenever prop_1 holds.\n- This is a typical \"whenever P then Q\" pattern, which can be expressed as globally (G) (prop_1 implies prop_2).\n\n2. Explanation dictionary:\n{\"Whenever go home holds\": \"prop_1\", \"provide assistance to the safe hostile holds as well\": \"prop_2\", \"Whenever ... then ...\": \"G (prop_1 implies prop_2)\"}\n\n3. FINAL: G (prop_1 implies prop_2)"}
{"id": 265, "sentence": ["Get", "help", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "get_help", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"], []], "bad_trace": [["get_help", "communicate(safe_hostile)"]], "prediction": "3. FINAL: globally (not (prop_1 and prop_2)) FINISH"}
{"id": 9379, "sentence": ["From", "some", "point", "onwards,", "go", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 7729, "sentence": ["At", "every", "step,", "begin", "recording", "fire", "source", "equals", "the", "value", "of", "take", "a", "picture", "of", "injured", "rescuer", "in", "the", "next", "step."], "tl": ["globally", "(", "record(fire_source)", "double_implies", "next", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(fire_source)"], ["photo(injured_rescuer)"]], "bad_trace": [["record(fire_source)"], []], "prediction": "(G), meaning the property holds at all times.\n- \"begin recording fire source equals the value of take a picture of injured rescuer in the next step\" means that at the current step, the proposition \"recording fire source equals the value of take a picture of injured rescuer in the next step\" holds.\n- We can represent \"recording fire source equals the value of take a picture of injured rescuer\" as a proposition prop_1.\n- The phrase \"in the next step\" indicates that the value of \"take a picture of injured rescuer\" is observed in the next step, so we use next(prop_2) where prop_2 represents \"take a picture of injured rescuer\".\n- The equality \"recording fire source equals the value of take a picture of injured rescuer in the next step\" can be represented as prop_1 double_implies next(prop_2).\n- Since the command says \"begin recording fire source equals the value of take a picture of injured rescuer in the next step\" at every step, we have globally(prop_1 double_implies next(prop_2))"}
{"id": 2481, "sentence": ["Globally,", "if", "deliver", "aid", "to", "the", "injured", "victim", "occurs", "then", "finally", "do", "not", "go", "near", "the", "inactive", "debris", "happens."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "finally", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], ["avoid(inactive_debris)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], []], "prediction": "(deliver aid) holds, then eventually (finally) another condition (not go near inactive debris) holds. We assign prop_1 to \"deliver aid to the injured victim\" and prop_2 to \"go near the inactive debris.\" The negation applies to prop_2. The implication is inside the globally operator.\n\n2. *Explanation dictionary* \u2013 {\"deliver aid to the injured victim\": \"prop_1\", \"go near the inactive debris\": \"prop_2\", \"do not go near the inactive debris\": \"not prop_2\", \"finally do not go near the inactive debris\": \"F (not prop_2)\", \"if deliver aid to the injured victim occurs then finally do not go near the inactive debris happens\": \"prop_1 implies F (not prop_2)\", \"Globally, if deliver aid to the injured victim occurs then finally do not go near the inactive debris happens\": \"G (prop_1 implies F (not prop_2))"}
{"id": 1617, "sentence": ["You", "must", "eventually", "communicate", "with", "the", "injured", "rescuer", "or", "get", "help."], "tl": ["finally", "(", "communicate(injured_rescuer)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["communicate(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 2220, "sentence": ["Whenever", "deliver", "aid", "to", "the", "injured", "hostile", "and", "go", "back", "to", "base", "are", "equal,", "go", "back", "to", "base", "and", "begin", "recording", "safe", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_hostile)", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "record(safe_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(injured_hostile)", "go_home", "record(safe_rescuer)"]], "bad_trace": [["deliver_aid(injured_hostile)", "go_home"]], "prediction": "(prop_1) and \"go back to base\" (prop_2) have the same truth value (both true or both false), then...\n- \"go back to base and begin recording safe rescuer are equal as well\" means that the propositions representing \"go back to base\" (prop_2) and \"begin recording safe rescuer\" (prop_3) also have the same truth value.\n- Equality of two propositions can be expressed as double_implies (\u2194).\n- So, globally (always), if prop_1 double_implies prop_2, then prop_2 double_implies prop_3.\n\n2. Explanation dictionary:\n{\n  \"deliver aid to the injured hostile and go back to base are equal\": \"(prop_1 double_implies prop_2)\",\n  \"go back to base and begin recording safe rescuer are equal as well\": \"(prop_2 double_implies prop_3)\",\n  \"Whenever ... are equal, ... are equal as well\": \"globally ((prop_1 double_implies prop_2)"}
{"id": 6482, "sentence": ["If", "do", "not", "go", "near", "the", "active", "fire", "source", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "unsafe", "civilian", "persists", "until", "delivering", "aid", "to", "the", "injured", "hostile", "holds,", "or", "else", "take", "a", "picture", "of", "unsafe", "civilian", "holds", "forever."], "tl": ["avoid(active_fire_source)", "implies", "next", "(", "(", "photo(unsafe_civilian)", "until", "deliver_aid(injured_hostile)", ")", "or", "globally", "photo(unsafe_civilian)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["avoid(active_fire_source)"], ["photo(unsafe_civilian)"], ["photo(unsafe_civilian)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["avoid(active_fire_source)"], []], "prediction": " \"if ... then ... else ...\": \"(prop_1 implies next (prop_2 until prop_3)) and (not prop_1 implies globally prop"}
{"id": 5642, "sentence": ["Request", "assistance", "must", "hold", "until", "go", "home", "does,", "or", "else", "request", "assistance", "holds", "forever."], "tl": ["(", "get_help", "until", "go_home", ")", "or", "globally", "get_help"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 2, 2, 0, 0, 0, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], ["get_help"], ["go_home"]], "bad_trace": [[], []], "prediction": "3. FINAL: ((prop_1 until prop_2) or globally prop_1) FINISH"}
{"id": 2732, "sentence": ["Whenever", "return", "home", "and", "do", "not", "go", "near", "the", "probable", "debris", "are", "equal,", "do", "not", "go", "near", "the", "probable", "debris", "and", "photograph", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "avoid(probable_debris)", ")", "implies", "(", "avoid(probable_debris)", "double_implies", "photo(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "avoid(probable_debris)", "photo(safe_victim)"]], "bad_trace": [["go_home", "avoid(probable_debris)"]], "prediction": "3. FINAL: G((prop_1 and not prop_2) double_implies (not prop_2 and prop_3)) FINISH"}
{"id": 4626, "sentence": ["This", "controller", "must", "always", "avoid", "going", "back", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"always avoid going back to base\": \"G (not prop_1)\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 8938, "sentence": ["If", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds", "and", "record", "unsafe", "rescuer", "holds", "next,", "then", "communicate", "with", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(nearest_gas_leak)", "and", "next", "record(unsafe_rescuer)", "implies", "next", "next", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["avoid(nearest_gas_leak)"], ["record(unsafe_rescuer)"], ["communicate(injured_hostile)"]], "bad_trace": [["avoid(nearest_gas_leak)"], ["record(unsafe_rescuer)"], []], "prediction": "- The entire sentence is an implication: ( (prop_1 and next prop_2) implies next next prop_3 )"}
{"id": 120, "sentence": ["Provide", "assistance", "to", "the", "safe", "hostile", "and", "request", "assistance", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "deliver_aid(safe_hostile)", "and", "finally", "get_help"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_hostile)"], ["get_help"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 6062, "sentence": ["Whenever", "take", "a", "video", "of", "injured", "rescuer", "holds,", "eventually", "go", "back", "to", "base", "will", "hold."], "tl": ["globally", "(", "record(injured_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(injured_rescuer)"], [], ["go_home"]], "bad_trace": [["record(injured_rescuer)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies finally prop_2) FINISH"}
{"id": 4821, "sentence": ["The", "robot", "must", "always", "avoid", "doing", "not", "go", "near", "the", "probable", "unstable", "beam."], "tl": ["globally", "(", "not", "avoid(probable_unstable_beam)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(probable_unstable_beam)"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 6485, "sentence": ["Our", "agent", "must", "always", "avoid", "delivering", "aid", "to", "the", "safe", "hostile."], "tl": ["globally", "(", "not", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [[], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], []], "prediction": "(globally), the agent must not deliver aid to the safe hostile. We represent \"delivering aid to the safe hostile\" as a proposition, say prop_1. \"Avoid\" means \"not\" delivering aid, so \"not prop_1\". \"Always\" corresponds to the globally operator G.\n\n2. *Explanation dictionary* \u2013 {\"always avoid delivering aid to the safe hostile\": \"G (not prop_1)\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 2496, "sentence": ["Whenever", "talk", "to", "the", "safe", "victim", "holds,", "talk", "to", "the", "safe", "rescuer", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "next", "(", "next", "(", "next", "communicate(safe_rescuer)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_victim)"], [], [], ["communicate(safe_rescuer)"]], "bad_trace": [["communicate(safe_victim)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 implies next next next prop_2) FINISH"}
{"id": 7096, "sentence": ["Take", "a", "picture", "of", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(fire_source)", "and", "next", "photo(fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"], [], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], [], []], "prediction": "3. *FINAL:* (G prop_1) and (G ((not prop_1) implies (next prop_1 or next next prop_1))) FINISH"}
{"id": 2796, "sentence": ["Every", "avoid", "the", "active", "flood", "is", "directly", "followed", "by", "avoid", "the", "nearest", "fire", "source", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(active_flood)", "implies", "next", "avoid(nearest_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_flood"], "args_ref": ["active flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["avoid(active_flood)"], ["avoid(nearest_fire_source)"]], "bad_trace": [["avoid(active_flood)"], []], "prediction": "(representing \"avoid the active flood\") is true, it must be immediately followed in the next step by prop_2 (representing \"avoid the nearest fire source\"). The phrase \"directly followed by ... in the next step\" maps to the next operator (X). The \"Every\" at the start implies a global condition (G).\n\n2. *Explanation dictionary* \u2013 {\"Every avoid the active flood\": \"G (prop_1 \u2192 ...)\", \"directly followed by avoid the nearest fire source in the next step\": \"X prop_2\"}\n\n3. *FINAL:* G (prop_1 \u2192 X prop_2)"}
{"id": 3820, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "rescuer", "is", "eventually", "followed", "by", "doing", "not", "go", "near", "the", "probable", "gas", "leak,", "then", "talk", "to", "the", "injured", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "avoid(probable_gas_leak)", ")", "implies", "globally", "finally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], ["avoid(probable_gas_leak)", "communicate(injured_rescuer)"]], "bad_trace": [["communicate(safe_rescuer)"], ["avoid(probable_gas_leak)"]], "prediction": "3. *FINAL:* (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 6016, "sentence": ["The", "system", "must", "eventually,", "avoid", "begining", "recording", "injured", "civilian."], "tl": ["finally", "(", "not", "record(injured_civilian)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["record(injured_civilian)"], [], []], "bad_trace": [["record(injured_civilian)"], ["record(injured_civilian)"], ["record(injured_civilian)"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 4516, "sentence": ["Whenever", "get", "help", "holds,", "begin", "recording", "fire", "source", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["get_help", "record(fire_source)"], ["record(fire_source)"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 9129, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "fire", "source", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(fire_source)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"], [], []], "bad_trace": [["photo(fire_source)"], [], ["photo(fire_source)"]], "prediction": "(F), indicating that at some future point a condition will hold.\n- \"take a picture of fire source never occurs again\" means that from that point onwards, the proposition \"fire source\" (prop_1) never occurs again, i.e., globally not prop_1 (G not prop_1).\n- Combining these, \"finally globally not prop_1\" means that eventually, from some point onwards, prop_1 never occurs again.\n\n2. Explanation dictionary:\n{\"some point onwards\": \"F\", \"fire source never occurs again\": \"G (not prop_1)\"}\n\n3. FINAL: F (G (not prop_1))"}
{"id": 8705, "sentence": ["From", "some", "point", "onwards,", "go", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(finally, F), indicating that at some future point a condition holds. The phrase \"go home never occurs again\" means that from that point onwards, \"go home\" (prop_1) is always false, i.e., globally not prop_1. Combining these, we get: eventually (globally (not prop_1)).\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"go home never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 1174, "sentence": ["If", "get", "help", "ever", "holds,", "give", "aid", "to", "the", "safe", "victim", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "get_help", ")", "implies", "(", "not", "get_help", "until", "(", "deliver_aid(safe_victim)", "and", "not", "get_help", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_victim)"], ["get_help"]], "bad_trace": [["get_help"]], "prediction": "  \"If ... then ...\": \"finally prop_1 implies (prop_3 until prop_2)\""}
{"id": 5043, "sentence": ["The", "system", "must", "Eventually,", "both", "call", "for", "help", "and", "take", "a", "picture", "of", "unsafe", "rescuer", "hold", "simultaneously."], "tl": ["finally", "(", "get_help", "and", "photo(unsafe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["get_help", "photo(unsafe_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(F). The phrase \"both call for help and take a picture of unsafe rescuer hold simultaneously\" means that at some point in the future, both actions happen at the same time, so we use \"and\" inside the scope of finally. We assign prop_1 to \"call for help\" and prop_2 to \"take a picture of unsafe rescuer hold\". Thus, the formula is finally (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"Eventually\": \"F\", \"call for help\": \"prop_1\", \"take a picture of unsafe rescuer hold\": \"prop_2\", \"both ... and ... simultaneously\": \"and\"}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 7762, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "safe", "rescuer,", "then", "stay", "away", "from", "the", "probable", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "deliver_aid(safe_rescuer)", ")", "implies", "globally", "finally", "avoid(probable_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["go_home"], ["deliver_aid(safe_rescuer)", "avoid(probable_gas_leak)"]], "bad_trace": [["go_home"], ["deliver_aid(safe_rescuer)"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 5192, "sentence": ["If", "take", "a", "photo", "of", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "avoid", "the", "probable", "flood", "persists", "until", "going", "back", "to", "base", "holds,", "or", "else", "avoid", "the", "probable", "flood", "holds", "forever."], "tl": ["photo(safe_victim)", "implies", "next", "(", "(", "avoid(probable_flood)", "until", "go_home", ")", "or", "globally", "avoid(probable_flood)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["photo(safe_victim)"], ["avoid(probable_flood)"], ["avoid(probable_flood)"], ["go_home"]], "bad_trace": [["photo(safe_victim)"], []], "prediction": " \"if ... then ... else ...\": \"prop_1 implies (next (prop_2 until prop_3)) or (not prop_1 implies globally prop_2)\"}"}
{"id": 1088, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "establish", "communication", "with", "the", "injured", "hostile", "and", "return", "to", "base", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "communicate(injured_hostile)", "and", "go_home", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_hostile)"], ["go_home"], []], "bad_trace": [["communicate(injured_hostile)", "go_home"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 2431, "sentence": ["If", "return", "to", "base", "holds", "and", "talk", "to", "the", "safe", "victim", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "communicate(safe_victim)", "implies", "next", "next", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["go_home"], ["communicate(safe_victim)"], []], "prediction": "- The entire sentence is an implication: (prop_1 and next(prop_2)) implies next(next(prop_3))."}
{"id": 5421, "sentence": ["The", "system", "must", "Please", "give", "aid", "to", "the", "safe", "hostile", "and", "then", "record", "fire", "source."], "tl": ["(", "deliver_aid(safe_hostile)", "until", "record(fire_source)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(fire_source)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* G (F prop_1 and F prop_2) and (prop_1 implies F prop_2) FINISH"}
{"id": 4906, "sentence": ["Take", "a", "picture", "of", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "photo(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(safe_victim)"]], "bad_trace": [["photo(safe_victim)"], []], "prediction": "(prop_1) is always true. The phrase \"at all times\" corresponds to the globally operator G. The command \"Take a picture of\" is an instruction and does not affect the temporal logic formula directly, so the formula focuses on the condition \"safe victim holds at all times.\"\n\n2. *Explanation dictionary* \u2013 {\"safe victim holds at all times\": \"globally prop_1\"}\n\n3. *FINAL:* (globally prop_1)"}
{"id": 9505, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "unstable", "beam", "nor", "take", "a", "picture", "of", "gas", "leak", "holds,", "communicate", "with", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "photo(gas_leak)", ")", "implies", "finally", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(unstable_beam)", "photo(gas_leak)"]], "bad_trace": [[]], "prediction": "3. FINAL: G ((not prop_1 and not prop_2) implies F prop_3) FINISH"}
{"id": 7142, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "record", "unsafe", "civilian", "and", "call", "for", "help", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "record(unsafe_civilian)", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["record(unsafe_civilian)"], ["get_help"], []], "bad_trace": [["record(unsafe_civilian)", "get_help"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 7346, "sentence": ["Either", "call", "for", "help", "or", "return", "home", "happens", "infinitely", "often."], "tl": ["globally", "finally", "get_help", "or", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [[]], "prediction": "(or) of two propositions: prop_1 (call for help) and prop_2 (return home). The phrase \"happens infinitely often\" means that this disjunction occurs infinitely often, which in LTL is expressed as \"globally finally\" (G F) applied to the disjunction.\n\n2. *Explanation dictionary* \u2013 {\"Either call for help or return home\" : \"(prop_1 or prop_2)\", \"happens infinitely often\" : \"G F\"}\n\n3. *FINAL:* G F (prop_1 or prop_2)"}
{"id": 6885, "sentence": ["If", "take", "a", "photo", "of", "unstable", "beam", "holds,", "then", "in", "the", "next", "step", "take", "a", "picture", "of", "injured", "rescuer", "persists", "until", "talking", "to", "the", "injured", "victim", "holds,", "or", "else", "take", "a", "picture", "of", "injured", "rescuer", "holds", "forever."], "tl": ["photo(unstable_beam)", "implies", "next", "(", "(", "photo(injured_rescuer)", "until", "communicate(injured_victim)", ")", "or", "globally", "photo(injured_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["photo(unstable_beam)"], ["photo(injured_rescuer)"], ["photo(injured_rescuer)"], ["communicate(injured_victim)"]], "bad_trace": [["photo(unstable_beam)"], []], "prediction": "  \"if ... then ... else ...\": \"prop_1 implies (next (prop_2 until prop_3)) and not prop_1 implies globally prop_2\""}
{"id": 7590, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "taking", "a", "video", "of", "injured", "victim,", "then", "take", "a", "photo", "of", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "record(injured_victim)", ")", "implies", "globally", "finally", "photo(unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], ["record(injured_victim)", "photo(unstable_beam)"]], "bad_trace": [["get_help"], ["record(injured_victim)"]], "prediction": "In operator vocabulary: (G (prop_1 implies F prop_2)) implies (G F prop_3)"}
{"id": 1567, "sentence": ["If", "every", "request", "assistance", "is", "eventually", "followed", "by", "going", "home,", "then", "talk", "to", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["go_home", "communicate(injured_hostile)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "(prop_1) occurs, it is eventually followed by going home (prop_2). This can be expressed as G (prop_1 \u2192 F prop_2). The phrase \"then talk to the injured hostile must occur infinitely often\" means that talk to the injured hostile (prop_3) happens infinitely often, which is expressed as G F prop_3. The entire command is an implication from the first condition to the second: (G (prop_1 \u2192 F prop_2)) \u2192 (G F prop_3).\n\n2. *Explanation dictionary* \u2013\n{\n  \"every request assistance is eventually followed by going home\": \"G (prop_1 \u2192 F prop_2)\",\n  \"talk to the injured hostile must occur infinitely often\": \"G F prop_3\"\n}\n\n3. *FINAL:* (G (prop_1 \u2192 F prop_2)) implies (G F prop_3)"}
{"id": 9603, "sentence": ["Globally,", "if", "stay", "away", "from", "the", "active", "fire", "source", "occurs", "then", "finally", "do", "not", "go", "near", "the", "active", "gas", "leak", "happens."], "tl": ["globally", "(", "avoid(active_fire_source)", "implies", "finally", "avoid(active_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["avoid(active_fire_source)"], [], ["avoid(active_gas_leak)"]], "bad_trace": [["avoid(active_fire_source)"], [], []], "prediction": "  \"if ... then ...\": \"(prop_1 implies F (not prop_2))\""}
{"id": 2901, "sentence": ["Go", "home", "holds", "at", "all", "times."], "tl": ["globally", "go_home"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 9575, "sentence": ["If", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds,", "then", "in", "the", "next", "step", "return", "to", "base", "persists", "until", "delivering", "aid", "to", "the", "safe", "victim", "holds,", "or", "else", "return", "to", "base", "holds", "forever."], "tl": ["avoid(impending_fire_source)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(safe_victim)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_fire_source)"], ["go_home"], ["go_home"], ["deliver_aid(safe_victim)"]], "bad_trace": [["avoid(impending_fire_source)"], []], "prediction": "- This is expressed as a double implication: (not prop_1) implies next (prop_2 until prop_3), and prop_1 implies globally prop_2."}
{"id": 2780, "sentence": ["The", "system", "must", "Eventually,", "both", "establish", "communication", "with", "the", "injured", "rescuer", "and", "go", "home", "hold", "simultaneously."], "tl": ["finally", "(", "communicate(injured_rescuer)", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "go_home"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (and (prop_1, prop_2)) FINISH"}
{"id": 7205, "sentence": ["If", "return", "to", "base", "happens", "infinitely", "often,", "then", "so", "does", "do", "not", "go", "near", "the", "active", "fire", "source."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "avoid(active_fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "3. FINAL: (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 9176, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "go", "back", "to", "base", "holds,", "provide", "assistance", "to", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "  \"Whenever ... holds\": \"G ((not (prop_1 or prop_2)) implies (F prop_3))\""}
{"id": 9718, "sentence": ["If", "call", "for", "help", "holds,", "then", "in", "the", "next", "step", "give", "aid", "to", "the", "safe", "rescuer", "persists", "until", "photographing", "gas", "leak", "holds,", "or", "else", "give", "aid", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "deliver_aid(safe_rescuer)", "until", "photo(gas_leak)", ")", "or", "globally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["deliver_aid(safe_rescuer)"], ["deliver_aid(safe_rescuer)"], ["photo(gas_leak)"]], "bad_trace": [["get_help"], []], "prediction": "- The entire sentence is an implication: if prop_1 then (next (prop_2 until prop_3) or globally prop_2)."}
{"id": 4935, "sentence": ["Deliver", "aid", "to", "the", "injured", "victim", "holds", "at", "all", "times."], "tl": ["globally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 6154, "sentence": ["Call", "for", "help", "and", "talk", "to", "the", "safe", "hostile", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "get_help", "and", "finally", "communicate(safe_hostile)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 6448, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "and", "establish", "communication", "with", "the", "safe", "hostile", "holds", "next,", "then", "avoid", "the", "nearest", "gas", "leak", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "and", "next", "communicate(safe_hostile)", "implies", "next", "next", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["communicate(safe_hostile)"], ["avoid(nearest_gas_leak)"]], "bad_trace": [["deliver_aid(injured_hostile)"], ["communicate(safe_hostile)"], []], "prediction": "(prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 7706, "sentence": ["If", "request", "assistance", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "safe", "rescuer", "persists", "until", "give", "aid", "to", "the", "injured", "hostile", "holds,", "or", "else", "talk", "to", "the", "safe", "rescuer", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "communicate(safe_rescuer)", "until", "deliver_aid(injured_hostile)", ")", "or", "globally", "communicate(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["communicate(safe_rescuer)"], ["communicate(safe_rescuer)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["get_help"], []], "prediction": "(prop_1 implies (next (prop_2 until prop_3"}
{"id": 2691, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "unstable", "beam", "nor", "stay", "away", "from", "the", "active", "fire", "source", "holds,", "get", "help", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "avoid(active_fire_source)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unstable_beam)", "avoid(active_fire_source)"]], "bad_trace": [[]], "prediction": "G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 3718, "sentence": ["Call", "for", "help", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* G (prop_1) and G (not prop_1 implies next (prop_1 or next prop_1)) FINISH"}
{"id": 1535, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "safe", "hostile."], "tl": ["finally", "(", "not", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"]], "prediction": "(F), indicating that something should happen at some point in the future. The phrase \"avoid give aid to the safe hostile\" means that the robot should never give aid to the safe hostile, which can be represented as \"not prop_1\" where prop_1 stands for \"give aid to the safe hostile\". Combining these, the robot must eventually avoid giving aid, which means that eventually, the robot is in a state where it does not give aid to the safe hostile.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid give aid to the safe hostile\": \"not prop_1\"}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 8325, "sentence": ["If", "call", "for", "help", "holds", "and", "deliver", "aid", "to", "the", "injured", "rescuer", "holds", "next,", "then", "record", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "deliver_aid(injured_rescuer)", "implies", "next", "next", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_rescuer)"], ["record(injured_victim)"]], "bad_trace": [["get_help"], ["deliver_aid(injured_rescuer)"], []], "prediction": "3. FINAL: (prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 6191, "sentence": ["Photograph", "unsafe", "rescuer", "holds", "at", "all", "times."], "tl": ["globally", "photo(unsafe_rescuer)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(unsafe_rescuer)"]], "bad_trace": [["photo(unsafe_rescuer)"], []], "prediction": "(prop_1)"}
{"id": 458, "sentence": ["Whenever", "neither", "begin", "recording", "injured", "victim", "nor", "go", "back", "to", "base", "holds,", "take", "a", "picture", "of", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(injured_victim)", "and", "go_home", ")", "implies", "finally", "photo(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(injured_victim)", "go_home"]], "bad_trace": [[]], "prediction": "  \"whenever ... holds, eventually ...\": \"G (not (prop_1 or prop_2) implies F prop_3)\""}
{"id": 9378, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "inactive", "flood", "holds", "at", "all", "times."], "tl": ["globally", "avoid(inactive_flood)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}}, "good_trace": [["avoid(inactive_flood)"]], "bad_trace": [["avoid(inactive_flood)"], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 8586, "sentence": ["At", "every", "step,", "do", "not", "go", "near", "the", "active", "debris", "equals", "the", "value", "of", "take", "a", "video", "of", "fire", "source", "in", "the", "next", "step."], "tl": ["globally", "(", "avoid(active_debris)", "double_implies", "next", "record(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["avoid(active_debris)"], ["record(fire_source)"]], "bad_trace": [["avoid(active_debris)"], []], "prediction": "(G), meaning the property holds at all times.\n- \"do not go near the active debris\" is a negation of a proposition representing \"go near the active debris\" (prop_1), so \"not prop_1\".\n- \"equals the value of take a video of fire source in the next step\" means that the truth value of \"go near the active debris\" at the current step is the same as the truth value of \"take a video of fire source\" at the next step.\n- We represent \"take a video of fire source\" as prop_2.\n- The equality of truth values can be expressed as a double implication (double_implies) between \"not prop_1\" and \"next prop_2\".\n- Wrapping all in globally (G) to enforce at every step.\n\n2. Explanation dictionary:\n{\n  \"At every step\": \"globally (G)"}
{"id": 2996, "sentence": ["At", "every", "step,", "begin", "recording", "safe", "victim", "equals", "the", "value", "of", "deliver", "aid", "to", "the", "safe", "hostile", "in", "the", "next", "step."], "tl": ["globally", "(", "record(safe_victim)", "double_implies", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["record(safe_victim)"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["record(safe_victim)"], []], "prediction": "3. FINAL: globally (prop_1 double_implies next prop_2) FINISH"}
{"id": 6509, "sentence": ["Once", "take", "a", "picture", "of", "unsafe", "victim", "has", "occurred,", "take", "a", "video", "of", "flood", "will", "never", "occur", "again."], "tl": ["globally", "(", "photo(unsafe_victim)", "implies", "next", "globally", "not", "record(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(unsafe_victim)"], [], []], "bad_trace": [["photo(unsafe_victim)"], [], ["record(flood)"]], "prediction": "3. *FINAL:* (F prop_1) and G (prop_1 \u2192 G not prop_2) FINISH"}
{"id": 7034, "sentence": ["Whenever", "give", "aid", "to", "the", "injured", "victim", "holds,", "get", "help", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "(", "next", "(", "next", "get_help", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], [], [], ["get_help"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies next next next prop_2) FINISH"}
{"id": 2125, "sentence": ["Call", "for", "help", "can", "only", "happen", "after", "returning", "home."], "tl": ["not", "get_help", "until", "go_home"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["go_home"]], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "3. *FINAL:* G (not prop_1 until prop_2) FINISH"}
{"id": 9858, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "talking", "to", "the", "safe", "hostile,", "then", "stay", "away", "from", "the", "probable", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(safe_hostile)", ")", "implies", "globally", "finally", "avoid(probable_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["get_help"], ["communicate(safe_hostile)", "avoid(probable_unstable_beam)"]], "bad_trace": [["get_help"], ["communicate(safe_hostile)"]], "prediction": "3. *FINAL:* (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 9820, "sentence": ["Either", "provide", "assistance", "to", "the", "injured", "hostile", "or", "begin", "recording", "safe", "civilian", "happens", "infinitely", "often."], "tl": ["globally", "finally", "deliver_aid(injured_hostile)", "or", "globally", "finally", "record(safe_civilian)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["deliver_aid(injured_hostile)"]], "bad_trace": [[]], "prediction": "  \"Either ... or ...\": \"(prop_1 or G F prop_2)\""}
{"id": 8276, "sentence": ["If", "return", "to", "base", "holds,", "then", "in", "the", "next", "step", "do", "not", "go", "near", "the", "impending", "fire", "source", "persists", "until", "photographing", "injured", "rescuer", "holds,", "or", "else", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds", "forever."], "tl": ["go_home", "implies", "next", "(", "(", "avoid(impending_fire_source)", "until", "photo(injured_rescuer)", ")", "or", "globally", "avoid(impending_fire_source)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["go_home"], ["avoid(impending_fire_source)"], ["avoid(impending_fire_source)"], ["photo(injured_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "- The entire formula is an implication: prop_1 implies (next (not prop_2 U prop_3) or G (not prop_2))."}
{"id": 4697, "sentence": ["Whenever", "neither", "get", "help", "nor", "talk", "to", "the", "safe", "hostile", "holds,", "record", "injured", "civilian", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "communicate(safe_hostile)", ")", "implies", "finally", "record(injured_civilian)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help", "communicate(safe_hostile)"]], "bad_trace": [[]], "prediction": "3. FINAL: G (not (prop_1 or prop_2) implies F prop_3) FINISH"}
{"id": 9887, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(finally, F), indicating that starting at some future point. The phrase \"go back to base never occurs again\" means that once we reach that point, \"go back to base\" (prop_1) does not occur anymore, i.e., globally not prop_1 from that point onwards. Combining these, we say: eventually (F) from that point onwards, globally (G) not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"go back to base never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 8109, "sentence": ["Our", "agent", "must", "always", "avoid", "establishing", "communication", "with", "the", "injured", "victim."], "tl": ["globally", "(", "not", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[], [], []], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "(globally), the proposition representing \"establishing communication with the injured victim\" should not be true. We represent \"establishing communication with the injured victim\" as prop_1. The word \"always\" maps to the globally operator G, and \"avoid\" maps to negation not.\n\n2. *Explanation dictionary* \u2013 {\"always avoid establishing communication with the injured victim\": \"G (not prop_1)\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 4760, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "(prop_1) should be true globally (always). The phrase \"with at most a two-step grace period for recovery\" means that if \"go home\" becomes false, it must become true again within two steps. This can be expressed as: whenever not prop_1 holds, prop_1 must hold within the next two steps. Using temporal operators, this is: globally, prop_1 holds or prop_1 holds within the next two steps after a violation. This can be captured by: G (prop_1 or X prop_1 or X X prop_1).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Go home\": \"prop_1\",\n  \"should always hold\": \"G prop_1\",\n  \"at most a two-step grace period for recovery\": \"G (prop_1 or X prop_1 or X X prop_1)\"\n}\n\n3. *FINAL:* G (prop_1 or X prop_1 or X X prop_1)"}
{"id": 6321, "sentence": ["Whenever", "neither", "communicate", "with", "the", "safe", "hostile", "nor", "request", "assistance", "holds,", "begin", "recording", "debris", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "communicate(safe_hostile)", "and", "get_help", ")", "implies", "finally", "record(debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["communicate(safe_hostile)", "get_help"]], "bad_trace": [[]], "prediction": "3. FINAL: G ((not prop_1 and not prop_2) implies (F prop_3)) FINISH"}
{"id": 2686, "sentence": ["The", "system", "must", "eventually", "avoid", "the", "active", "unstable", "beam", "and", "take", "a", "video", "of", "unsafe", "rescuer."], "tl": ["finally", "(", "avoid(active_unstable_beam)", "and", "record(unsafe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [[], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)", "record(unsafe_rescuer)"]], "bad_trace": [[], ["avoid(active_unstable_beam)"], []], "prediction": "(not prop_1). The phrase \"and take a video of unsafe rescuer\" means that the system must also eventually take a video of the unsafe rescuer, represented as prop_2. Since both must happen eventually, we combine them with \"and\" inside the scope of \"eventually\" or as separate eventualities. The safest is to require both eventually: F (not prop_1) and F (prop_2).\n\n2. *Explanation dictionary* \u2013\n{\n  \"active unstable beam\": \"prop_1\",\n  \"avoid the active unstable beam\": \"not prop_1\",\n  \"eventually avoid the active unstable beam\": \"F (not prop_1)\",\n  \"take a video of unsafe rescuer\": \"prop_2\",\n  \"eventually take a video of unsafe rescuer\": \"F (prop_2)"}
{"id": 6269, "sentence": ["When", "talk", "to", "the", "injured", "victim", "happens,", "photograph", "injured", "civilian", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "(", "photo(injured_civilian)", "or", "next", "photo(injured_civilian)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["communicate(injured_victim)", "photo(injured_civilian)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "3. *FINAL:* (prop_1 implies (prop_2 or next prop_2)) FINISH"}
{"id": 3102, "sentence": ["Whenever", "neither", "provide", "assistance", "to", "the", "safe", "hostile", "nor", "establish", "communication", "with", "the", "injured", "rescuer", "holds,", "talk", "to", "the", "injured", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "communicate(injured_rescuer)", ")", "implies", "finally", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(safe_hostile)", "communicate(injured_rescuer)"]], "bad_trace": [[]], "prediction": "3. FINAL: G ((not prop_1 and not prop_2) implies (F prop_3)) FINISH"}
{"id": 4307, "sentence": ["If", "get", "help", "holds,", "then", "in", "the", "next", "step", "begin", "recording", "unstable", "beam", "persists", "until", "returning", "home", "holds,", "or", "else", "begin", "recording", "unstable", "beam", "holds", "forever."], "tl": ["get_help", "implies", "next", "(", "(", "record(unstable_beam)", "until", "go_home", ")", "or", "globally", "record(unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], ["record(unstable_beam)"], ["record(unstable_beam)"], ["go_home"]], "bad_trace": [["get_help"], []], "prediction": "3. FINAL: (prop_1 implies next (prop_2 until prop_3)) and ("}
{"id": 3031, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "injured", "rescuer."], "tl": ["finally", "(", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], [], []], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"]], "prediction": "(F), indicating that something should happen at some point in the future. The phrase \"avoid give aid to the injured rescuer\" means that the robot should never give aid to the injured rescuer. We represent \"give aid to the injured rescuer\" as prop_1. To \"avoid\" this means \"not prop_1\" globally (always). Combining these, the robot must eventually ensure that it always avoids giving aid, i.e., eventually, from that point on, it never gives aid.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid give aid to the injured rescuer\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 2662, "sentence": ["Take", "a", "video", "of", "debris", "holds", "at", "all", "times."], "tl": ["globally", "record(debris)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(debris)"]], "bad_trace": [["record(debris)"], []], "prediction": "(prop_1)"}
{"id": 1895, "sentence": ["Whenever", "begin", "recording", "injured", "civilian", "and", "do", "not", "go", "near", "the", "inactive", "flood", "are", "equal,", "do", "not", "go", "near", "the", "inactive", "flood", "and", "go", "back", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(injured_civilian)", "double_implies", "avoid(inactive_flood)", ")", "implies", "(", "avoid(inactive_flood)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(injured_civilian)", "avoid(inactive_flood)", "go_home"]], "bad_trace": [["record(injured_civilian)", "avoid(inactive_flood)"]], "prediction": "  \"Whenever ... are equal, ... are equal as well\": \"globally ( (prop_1 and prop_2) implies (prop_2 and prop_3) )\""}
{"id": 1269, "sentence": ["If", "every", "begin", "recording", "fire", "source", "is", "eventually", "followed", "by", "photographing", "flood,", "then", "take", "a", "photo", "of", "injured", "person", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(fire_source)", "implies", "finally", "photo(flood)", ")", "implies", "globally", "finally", "photo(injured_person)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}}, "good_trace": [["record(fire_source)"], ["photo(flood)", "photo(injured_person)"]], "bad_trace": [["record(fire_source)"], ["photo(flood)"]], "prediction": "3. FINAL: (globally (prop_1 implies finally prop_2)) implies (globally finally prop_3) FINISH"}
{"id": 1109, "sentence": ["Whenever", "get", "help", "and", "return", "home", "are", "equal,", "return", "home", "and", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "avoid(impending_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["get_help", "go_home", "avoid(impending_unstable_beam)"]], "bad_trace": [["get_help", "go_home"]], "prediction": "globally ((prop_1 double_implies prop_2) implies (prop_2 double_implies (prop_3 and"}
{"id": 2074, "sentence": ["Take", "a", "picture", "of", "fire", "source", "holds", "at", "all", "times."], "tl": ["globally", "photo(fire_source)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], []], "prediction": "(prop_1)"}
{"id": 426, "sentence": ["Whenever", "begin", "recording", "injured", "person", "and", "stay", "away", "from", "the", "active", "fire", "source", "are", "equal,", "stay", "away", "from", "the", "active", "fire", "source", "and", "record", "unsafe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(injured_person)", "double_implies", "avoid(active_fire_source)", ")", "implies", "(", "avoid(active_fire_source)", "double_implies", "record(unsafe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["record(injured_person)", "avoid(active_fire_source)", "record(unsafe_civilian)"]], "bad_trace": [["record(injured_person)", "avoid(active_fire_source)"]], "prediction": "- This is a global implication: globally, if (prop_1 and prop_2) then (prop_2 and prop_3)."}
{"id": 1496, "sentence": ["This", "controller", "must", "eventually,", "avoid", "recording", "injured", "victim."], "tl": ["finally", "(", "not", "record(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(injured_victim)"], [], []], "bad_trace": [["record(injured_victim)"], ["record(injured_victim)"], ["record(injured_victim)"]], "prediction": "(F), indicating that something should happen at some point in the future. The phrase \"avoid recording injured victim\" means that the proposition representing \"recording injured victim\" (prop_1) should never be true. To express \"avoid,\" we use negation (not). Combining these, \"must eventually avoid recording injured victim\" means that eventually, it will always be the case that \"recording injured victim\" does not occur. This is expressed as \"finally globally not prop_1\" or F G \u00acprop_1.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid recording injured victim\": \"G not prop_1\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 42, "sentence": ["Globally,", "if", "communicate", "with", "the", "injured", "rescuer", "occurs", "then", "finally", "return", "to", "base", "happens."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)"], [], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], [], []], "prediction": "(prop_1) is true, then eventually (finally) the proposition representing \"return to base\" (prop_2) will be true. So the inner formula is prop_1 implies finally prop_2. Wrapping this with globally gives G (prop_1 implies F prop_2).\n\n2. *Explanation dictionary* \u2013 {\"communicate with the injured rescuer occurs\" : \"prop_1\", \"finally return to base happens\" : \"F prop_2\", \"if ... then ...\" : \"prop_1 implies F prop_2\", \"Globally,\" : \"G (prop_1 implies F prop_2)\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 7104, "sentence": ["The", "system", "must", "eventually", "return", "to", "base", "or", "talk", "to", "the", "safe", "rescuer."], "tl": ["finally", "(", "go_home", "or", "communicate(safe_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 966, "sentence": ["Either", "establish", "communication", "with", "the", "safe", "rescuer", "happens", "infinitely", "often,", "or", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "communicate(safe_rescuer)", "or", "next", "avoid(inactive_unstable_beam)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["communicate(safe_rescuer)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (globally finally prop_1) or (next not prop_2) FINISH"}
{"id": 5370, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "hostile", "and", "do", "not", "go", "near", "the", "probable", "fire", "source", "are", "equal,", "do", "not", "go", "near", "the", "probable", "fire", "source", "and", "return", "to", "base", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_hostile)", "double_implies", "avoid(probable_fire_source)", ")", "implies", "(", "avoid(probable_fire_source)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_hostile)", "avoid(probable_fire_source)", "go_home"]], "bad_trace": [["deliver_aid(injured_hostile)", "avoid(probable_fire_source)"]], "prediction": "  \"Whenever\": \"globally (G)\","}
{"id": 4339, "sentence": ["From", "some", "point", "onwards,", "give", "aid", "to", "the", "safe", "hostile", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "deliver_aid(safe_hostile)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["deliver_aid(safe_hostile)"], [], []], "bad_trace": [["deliver_aid(safe_hostile)"], [], ["deliver_aid(safe_hostile)"]], "prediction": "3. *FINAL:* F (prop_1 and G (not prop_2)) FINISH"}
{"id": 3799, "sentence": ["If", "every", "call", "for", "help", "is", "eventually", "followed", "by", "returning", "home,", "then", "stay", "away", "from", "the", "active", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "avoid(active_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["go_home", "avoid(active_gas_leak)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "3. FINAL: (globally (prop_1 implies finally prop_2)) implies (globally finally prop_3) FINISH"}
{"id": 6394, "sentence": ["At", "every", "step,", "request", "assistance", "equals", "the", "value", "of", "do", "not", "go", "near", "the", "active", "gas", "leak", "in", "the", "next", "step."], "tl": ["globally", "(", "get_help", "double_implies", "next", "avoid(active_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["avoid(active_gas_leak)"]], "bad_trace": [["get_help"], []], "prediction": "(G), meaning the property holds at all times.\n- \"request assistance equals the value of do not go near the active gas leak in the next step\" means that at every step, the proposition representing \"request assistance\" (prop_1) is equivalent to the value of the proposition representing \"do not go near the active gas leak\" (prop_2) in the next step.\n- \"equals\" corresponds to \"double_implies\" (\u2194).\n- \"in the next step\" corresponds to \"next\" (X).\n\n2. Explanation dictionary:\n{\n  \"At every step\": \"G\",\n  \"request assistance\": \"prop_1\",\n  \"do not go near the active gas leak\": \"prop_2\",\n  \"equals\": \"double_implies\",\n  \"in the next step\": \"next\"\n}\n\n3. FINAL: G (prop_1 double_implies next prop_2)"}
{"id": 2878, "sentence": ["If", "go", "back", "to", "base", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "injured", "hostile", "persists", "until", "provide", "assistance", "to", "the", "safe", "rescuer", "holds,", "or", "else", "talk", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["go_home", "implies", "next", "(", "(", "communicate(injured_hostile)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "communicate(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["communicate(injured_hostile)"], ["communicate(injured_hostile)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "(go back to base) as the antecedent of an implication.\n- \"then in the next step talk to the injured hostile persists until provide assistance to the safe rescuer holds,\" means that starting from the next step (next), prop_2 (talk to the injured hostile) holds until prop_3 (provide assistance to the safe rescuer) holds.\n- \"or else talk to the injured hostile holds forever.\" means if the antecedent is false, then globally prop_2 holds.\n- The entire sentence is an implication: if prop_1 then next (prop_2 until prop_3), else globally prop_2.\n\n2. *Explanation dictionary* \u2013\n{\"go back to base\": \"prop_1\",\n \"talk to the injured hostile\": \"prop_2\",\n \"provide assistance to the safe rescuer\": \"prop_3\",\n \"in the next step talk to the injured hostile persists until provide assistance to the safe rescuer holds\": \"next (prop_2 until prop_3)"}
{"id": 1172, "sentence": ["Deliver", "aid", "to", "the", "injured", "rescuer", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "return", "home", "holds", "infinitely", "often."], "tl": ["deliver_aid(injured_rescuer)", "until", "(", "globally", "(", "finally", "go_home", ")", ")"], "masked_tl": ["prop_1", "until", "(", "globally", "(", "finally", "prop_2", ")", ")"], "grounded_sentence": ["prop_1", "must", "keep", "holding", "until,", "from", "some", "point", "on,", "prop_2", "holds", "infinitely", "often."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["go_home"]], "bad_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_rescuer)"]], "prediction": "3. *FINAL:* (prop_1) until (finally globally prop_2) FINISH"}
{"id": 1233, "sentence": ["Whenever", "photograph", "safe", "rescuer", "and", "give", "aid", "to", "the", "safe", "rescuer", "are", "equal,", "give", "aid", "to", "the", "safe", "rescuer", "and", "photograph", "safe", "civilian", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(safe_rescuer)", "double_implies", "deliver_aid(safe_rescuer)", ")", "implies", "(", "deliver_aid(safe_rescuer)", "double_implies", "photo(safe_civilian)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["photo(safe_rescuer)", "deliver_aid(safe_rescuer)", "photo(safe_civilian)"]], "bad_trace": [["photo(safe_rescuer)", "deliver_aid(safe_rescuer)"]], "prediction": "(\"photograph safe rescuer\") and prop_2 (\"give aid to the safe rescuer\") are the same (both true or both false). Equality of two propositions can be expressed as (prop_1 and prop_2) or (not prop_1 and not prop_2), which is logically equivalent to double_implies: prop_1 double_implies prop_2.\n- \"give aid to the safe rescuer and photograph safe civilian are equal as well\" means: prop_2 (\"give aid to the safe rescuer\") and prop_3 (\"photograph safe civilian\") are equal, i.e., prop_2 double_implies prop_3.\n- \"Whenever ... are equal, ... are equal as well\" means globally (always), if the first equality holds, then the second equality holds as well. So: globally ( (prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3) )"}
{"id": 5500, "sentence": ["The", "system", "must", "always", "avoid", "returning", "to", "base."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 7827, "sentence": ["If", "every", "take", "a", "photo", "of", "safe", "victim", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "communicate", "with", "the", "safe", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(safe_victim)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(safe_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["photo(safe_victim)"], ["go_home", "communicate(safe_rescuer)"]], "bad_trace": [["photo(safe_victim)"], ["go_home"]], "prediction": "  \"if ... then ...\": \"(G (prop_1 \u2192 F prop_2)) \u2192 (G F prop_3)\""}
{"id": 2558, "sentence": ["If", "talk", "to", "the", "safe", "victim", "holds", "and", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "next,", "then", "take", "a", "picture", "of", "fire", "source", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "communicate(safe_victim)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"], ["photo(fire_source)"]], "bad_trace": [["communicate(safe_victim)"], ["deliver_aid(injured_hostile)"], []], "prediction": "So the formula is: (prop_1 and next prop_2) implies next next prop_3."}
{"id": 4066, "sentence": ["Either", "go", "back", "to", "base", "or", "take", "a", "video", "of", "gas", "leak", "happens", "infinitely", "often."], "tl": ["globally", "finally", "go_home", "or", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home"]], "bad_trace": [[]], "prediction": "Thus, the formula is: prop_1 or (G F (prop_2 and prop_3))"}
{"id": 8608, "sentence": ["Whenever", "neither", "deliver", "aid", "to", "the", "injured", "victim", "nor", "talk", "to", "the", "safe", "hostile", "holds,", "establish", "communication", "with", "the", "injured", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "communicate(safe_hostile)", ")", "implies", "finally", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_victim)", "communicate(safe_hostile)"]], "bad_trace": [[]], "prediction": "So the formula is: globally (if not (prop_1 or prop_2) then finally prop_3)"}
{"id": 784, "sentence": ["Either", "get", "help", "or", "take", "a", "video", "of", "unsafe", "victim", "happens", "infinitely", "often."], "tl": ["globally", "finally", "get_help", "or", "globally", "finally", "record(unsafe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["get_help"]], "bad_trace": [[]], "prediction": "(or) between two propositions: prop_1 for \"get help\" and prop_2 for \"take a video of unsafe victim.\" The phrase \"happens infinitely often\" means that one of these two actions occurs infinitely often, which in LTL is expressed as \"globally finally\" (G F) applied to the disjunction.\n\n2. *Explanation dictionary* \u2013 {\"get help\": \"prop_1\", \"take a video of unsafe victim\": \"prop_2\", \"Either get help or take a video of unsafe victim\": \"(prop_1 or prop_2)\", \"happens infinitely often\": \"G F ( ... )\"}\n\n3. *FINAL:* G F (prop_1 or prop_2)"}
{"id": 8558, "sentence": ["Whenever", "neither", "take", "a", "picture", "of", "safe", "rescuer", "nor", "provide", "assistance", "to", "the", "safe", "hostile", "holds,", "photograph", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "photo(safe_rescuer)", "and", "deliver_aid(safe_hostile)", ")", "implies", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["photo(safe_rescuer)", "deliver_aid(safe_hostile)"]], "bad_trace": [[]], "prediction": "3. FINAL: globally ((not prop_1 and not prop_2) implies finally prop_3) FINISH"}
{"id": 9021, "sentence": ["Once", "call", "for", "help", "has", "occurred,", "stay", "away", "from", "the", "probable", "flood", "will", "never", "occur", "again."], "tl": ["globally", "(", "get_help", "implies", "next", "globally", "not", "avoid(probable_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["avoid(probable_flood)"]], "prediction": "3. *FINAL:* (F prop_1) implies (G (not prop_2"}
{"id": 5696, "sentence": ["Both", "communicate", "with", "the", "safe", "rescuer", "and", "return", "home", "hold", "at", "every", "step."], "tl": ["globally", "(", "communicate(safe_rescuer)", "and", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_rescuer)", "go_home"]], "bad_trace": [["communicate(safe_rescuer)"], []], "prediction": "(and) of these two propositions. The phrase \"hold at every step\" means globally (G) in temporal logic.\n\n2. *Explanation dictionary* \u2013 {\"communicate with the safe rescuer\": \"prop_1\", \"return home\": \"prop_2\", \"both ... and ...\": \"(prop_1 and prop_2)\", \"hold at every step\": \"G(...)\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 4822, "sentence": ["Globally,", "if", "request", "assistance", "occurs", "then", "finally", "take", "a", "picture", "of", "unstable", "beam", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help"], [], ["photo(unstable_beam)"]], "bad_trace": [["get_help"], [], []], "prediction": "(prop_1) is true, then eventually (finally, F) the proposition representing \"take a picture of unstable beam\" (prop_2) will be true.\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"request assistance occurs\": \"prop_1\", \"finally take a picture of unstable beam happens\": \"F prop_2\", \"if ... then ...\": \"implies\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 4116, "sentence": ["Either", "get", "help", "happens", "infinitely", "often,", "or", "avoid", "the", "nearest", "gas", "leak", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "get_help", "or", "next", "avoid(nearest_gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["get_help"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* ( (globally (finally prop_1)) or (next prop_2) ) FINISH"}
{"id": 2593, "sentence": ["Every", "record", "flood", "is", "directly", "followed", "by", "give", "aid", "to", "the", "safe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "record(flood)", "implies", "next", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(flood)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["record(flood)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies next prop_2) FINISH"}
{"id": 5240, "sentence": ["The", "robot", "must", "eventually,", "avoid", "give", "aid", "to", "the", "injured", "victim."], "tl": ["finally", "(", "not", "deliver_aid(injured_victim)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"]], "prediction": "(F), indicating that something should happen at some point in the future. The phrase \"avoid give aid to the injured victim\" means that the robot should never give aid to the injured victim, which is represented by \"not prop_1\" where prop_1 stands for \"give aid to the injured victim\". Combining these, the robot must eventually avoid giving aid means that eventually, the robot is in a state where it does not give aid to the injured victim.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid give aid to the injured victim\": \"not prop_1\"}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 8508, "sentence": ["If", "every", "deliver", "aid", "to", "the", "safe", "hostile", "is", "eventually", "followed", "by", "geting", "help,", "then", "avoid", "the", "impending", "unstable", "beam", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "avoid(impending_unstable_beam)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["deliver_aid(safe_hostile)"], ["get_help", "avoid(impending_unstable_beam)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["get_help"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 5136, "sentence": ["Whenever", "communicate", "with", "the", "safe", "rescuer", "holds,", "eventually", "stay", "away", "from", "the", "inactive", "debris", "will", "hold."], "tl": ["globally", "(", "communicate(safe_rescuer)", "implies", "finally", "avoid(inactive_debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}}, "good_trace": [["communicate(safe_rescuer)"], [], ["avoid(inactive_debris)"]], "bad_trace": [["communicate(safe_rescuer)"], [], []], "prediction": "(prop_1 represents \"communicate with the safe rescuer\"),\n- \"eventually stay away from the inactive debris will hold\" means: eventually prop_2 is true (prop_2 represents \"stay away from the inactive debris\").\n- The entire sentence expresses a temporal implication: globally, if prop_1 holds, then eventually prop_2 will hold.\n\n2. Explanation dictionary:\n{\"communicate with the safe rescuer holds\": \"prop_1\", \"eventually stay away from the inactive debris will hold\": \"F prop_2\", \"Whenever ... holds, eventually ... will hold\": \"G (prop_1 implies F prop_2)\"}\n\n3. FINAL: G (prop_1 implies F prop_2)"}
{"id": 8983, "sentence": ["Whenever", "establish", "communication", "with", "the", "injured", "rescuer", "holds,", "go", "back", "to", "base", "holds", "as", "well."], "tl": ["globally", "(", "communicate(injured_rescuer)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)", "go_home"], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "(prop_1). The phrase \"go back to base holds as well\" is the consequent (prop_2). Since the command is about whenever the first holds, the second should hold as well, this is expressed as globally (G) the implication from prop_1 to prop_2.\n\n2. *Explanation dictionary* \u2013 {\"Whenever establish communication with the injured rescuer holds\": \"prop_1\", \"go back to base holds as well\": \"prop_2\"}\n\n3. *FINAL:* G (prop_1 implies prop_2)"}
{"id": 2449, "sentence": ["The", "robot", "must", "always", "avoid", "go", "home."], "tl": ["globally", "(", "not", "go_home", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["go_home"], [], []], "prediction": "(not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"always\": \"G\", \"avoid go home\": \"not prop_1\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 6095, "sentence": ["Our", "agent", "must", "eventually", "take", "a", "picture", "of", "unstable", "beam", "or", "call", "for", "help."], "tl": ["finally", "(", "photo(unstable_beam)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["photo(unstable_beam)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 5559, "sentence": ["Either", "request", "assistance", "happens", "infinitely", "often,", "or", "return", "to", "base", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "get_help", "or", "next", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (globally finally prop_1) or (next prop_2) FINISH"}
{"id": 7230, "sentence": ["This", "controller", "must", "eventually,", "avoid", "going", "back", "to", "base."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F). The phrase \"avoid going back to base\" means that \"going back to base\" should never happen, which is expressed as \"not prop_1\" globally (G not prop_1). Combining these, \"must eventually avoid going back to base\" means that from now on, it is always the case that the controller does not go back to base.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"G\", \"avoid going back to base\": \"not prop_1\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 9881, "sentence": ["If", "communicate", "with", "the", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "talk", "to", "the", "injured", "rescuer", "persists", "until", "establishing", "communication", "with", "the", "safe", "hostile", "holds,", "or", "else", "talk", "to", "the", "injured", "rescuer", "holds", "forever."], "tl": ["communicate(safe_victim)", "implies", "next", "(", "(", "communicate(injured_rescuer)", "until", "communicate(safe_hostile)", ")", "or", "globally", "communicate(injured_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(safe_victim)"], ["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"], ["communicate(safe_hostile)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "- The entire formula is an implication: if prop_1 then (next (prop_2 until prop_3) or globally prop_2)."}
{"id": 3618, "sentence": ["Stay", "away", "from", "the", "active", "unstable", "beam", "can", "only", "happen", "after", "doing", "not", "go", "near", "the", "probable", "flood."], "tl": ["not", "avoid(active_unstable_beam)", "until", "avoid(probable_flood)"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}}, "good_trace": [[], [], ["avoid(probable_flood)"]], "bad_trace": [["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"]], "prediction": "(where prop_2 represents \"go near the probable flood\"). The phrase \"can only happen after\" indicates that prop_1 is true only after prop_2 is false, i.e., prop_1 can occur only after globally not prop_2 has held. In temporal logic, this is expressed as: prop_1 implies that previously (or until now) prop_2 has not occurred. Since we only have future operators, we express this as: prop_1 implies that prop_2 has never been true before prop_1. Using future operators, this is captured by: prop_1 \u2192 (not prop_2)"}
{"id": 6164, "sentence": ["Whenever", "provide", "assistance", "to", "the", "safe", "victim", "and", "take", "a", "picture", "of", "unsafe", "civilian", "are", "equal,", "take", "a", "picture", "of", "unsafe", "civilian", "and", "take", "a", "video", "of", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_victim)", "double_implies", "photo(unsafe_civilian)", ")", "implies", "(", "photo(unsafe_civilian)", "double_implies", "record(flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["deliver_aid(safe_victim)", "photo(unsafe_civilian)", "record(flood)"]], "bad_trace": [["deliver_aid(safe_victim)", "photo(unsafe_civilian)"]], "prediction": "(representing \"provide assistance to the safe victim\").\n- \"and take a picture of unsafe civilian are equal\" means the proposition \"take a picture of unsafe civilian\" (prop_2) is equivalent to prop_1. So, prop_1 double_implies prop_2.\n- \"take a picture of unsafe civilian and take a video of flood are equal as well\" means prop_2 double_implies prop_3 (where prop_3 represents \"take a video of flood\").\n- The entire sentence is a conditional: whenever the first equivalence holds (prop_1 double_implies prop_2), then the second equivalence (prop_2 double_implies prop_3) also holds.\n- Since \"whenever\" indicates a global condition, we use globally (G)"}
{"id": 1211, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "rescuer", "and", "communicate", "with", "the", "injured", "hostile", "are", "equal,", "communicate", "with", "the", "injured", "hostile", "and", "do", "not", "go", "near", "the", "inactive", "fire", "source", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_rescuer)", "double_implies", "communicate(injured_hostile)", ")", "implies", "(", "communicate(injured_hostile)", "double_implies", "avoid(inactive_fire_source)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "communicate(injured_hostile)", "avoid(inactive_fire_source)"]], "bad_trace": [["deliver_aid(injured_rescuer)", "communicate(injured_hostile)"]], "prediction": "(assistance to injured rescuer).\n- \"and communicate with the injured hostile are equal\" means prop_2 (communicate with injured hostile) is equivalent to prop_1.\n- \"communicate with the injured hostile and do not go near the inactive fire source are equal as well\" means prop_2 is equivalent to not prop_3 (near inactive fire source).\n- The entire statement is a \"whenever\" condition, so globally (G), if prop_1 holds, then prop_2 is equivalent to prop_1, and prop_2 is equivalent to not prop_3.\n\n2. Explanation dictionary:\n{\n  \"provide assistance to the injured rescuer\": \"prop_1\",\n  \"communicate with the injured hostile\": \"prop_2\",\n  \"go near the inactive fire source\": \"prop_3\",\n  \"communicate with the injured hostile are equal\": \"double_implies(prop_2, prop_1)\",\n  \"communicate with the injured hostile and do not go near the inactive fire source are equal as well\": \"double_implies(prop_2, not prop_3)"}
{"id": 4256, "sentence": ["If", "communicate", "with", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "return", "home", "persists", "until", "doing", "not", "go", "near", "the", "probable", "unstable", "beam", "holds,", "or", "else", "return", "home", "holds", "forever."], "tl": ["communicate(injured_rescuer)", "implies", "next", "(", "(", "go_home", "until", "avoid(probable_unstable_beam)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_rescuer)"], ["go_home"], ["go_home"], ["avoid(probable_unstable_beam)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "(representing \"communicate with the injured rescuer\").\n- \"then in the next step return home persists until doing not go near the probable unstable beam holds\" means: next (prop_2 until prop_3), where prop_2 = \"return home\" and prop_3 = \"not go near the probable unstable beam\".\n- \"or else return home holds forever\" means: or prop_2 holds globally (G prop_2).\n- The entire formula is an implication: if prop_1 then (next (prop_2 U prop_3) or G prop_2).\n\n2. *Explanation dictionary* \u2013\n{\"communicate with the injured rescuer\": \"prop_1\",\n \"return home\": \"prop_2\",\n \"not go near the probable unstable beam\": \"prop_3\",\n \"in the next step return home persists until doing not go near the probable unstable beam\": \"next (prop_2 until prop_3)"}
{"id": 8694, "sentence": ["Give", "aid", "to", "the", "safe", "hostile", "and", "take", "a", "video", "of", "safe", "rescuer", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "deliver_aid(safe_hostile)", "and", "finally", "record(safe_rescuer)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_hostile)"], ["record(safe_rescuer)"]], "bad_trace": [[], [], []], "prediction": "(giving aid to the safe hostile).\n- \"Take a video of safe rescuer\" is represented as prop_2 (taking a video of the safe rescuer).\n- \"will each happen at some point\" means both prop_1 and prop_2 will eventually occur, so we use finally (F) for both and combine with and.\n\n2. Explanation dictionary:\n{\"Give aid to the safe hostile\": \"prop_1\", \"Take a video of safe rescuer\": \"prop_2\", \"will each happen at some point\": \"F prop_1 and F prop_2\"}\n\n3. FINAL: (F prop_1) and (F prop_2)"}
{"id": 4804, "sentence": ["If", "take", "a", "photo", "of", "safe", "civilian", "holds,", "then", "in", "the", "next", "step", "take", "a", "photo", "of", "safe", "rescuer", "persists", "until", "establishing", "communication", "with", "the", "injured", "rescuer", "holds,", "or", "else", "take", "a", "photo", "of", "safe", "rescuer", "holds", "forever."], "tl": ["photo(safe_civilian)", "implies", "next", "(", "(", "photo(safe_rescuer)", "until", "communicate(injured_rescuer)", ")", "or", "globally", "photo(safe_rescuer)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["photo(safe_civilian)"], ["photo(safe_rescuer)"], ["photo(safe_rescuer)"], ["communicate(injured_rescuer)"]], "bad_trace": [["photo(safe_civilian)"], []], "prediction": "(the condition).\n- \"then in the next step take a photo of safe rescuer persists until establishing communication with the injured rescuer holds\" maps to next (X) of (prop_2 U prop_3). Here, prop_2 = \"take a photo of safe rescuer\" and prop_3 = \"establishing communication with the injured rescuer holds\".\n- \"or else take a photo of safe rescuer holds forever\" maps to globally (G) prop_2.\n- The entire sentence is an implication: if prop_1 then (X (prop_2 U prop_3)) or else G prop_2.\n\n2. *Explanation dictionary* \u2013\n{\"take a photo of safe civilian holds\": \"prop_1\",\n \"take a photo of safe rescuer\": \"prop_2\",\n \"establishing communication with the injured rescuer holds\": \"prop_3\",\n \"in the next step take a photo of safe rescuer persists until establishing communication with the injured rescuer holds\": \"X (prop_2 U prop_3)"}
{"id": 7750, "sentence": ["Whenever", "begin", "recording", "unsafe", "person", "holds,", "eventually", "do", "not", "go", "near", "the", "nearest", "unstable", "beam", "will", "hold."], "tl": ["globally", "(", "record(unsafe_person)", "implies", "finally", "avoid(nearest_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_unstable_beam"], "args_ref": ["nearest unstable beam"]}}, "good_trace": [["record(unsafe_person)"], [], ["avoid(nearest_unstable_beam)"]], "bad_trace": [["record(unsafe_person)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies finally (not prop_2)) FINISH"}
{"id": 1748, "sentence": ["Globally,", "if", "stay", "away", "from", "the", "probable", "debris", "occurs", "then", "finally", "return", "home", "happens."], "tl": ["globally", "(", "avoid(probable_debris)", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_debris)"], [], ["go_home"]], "bad_trace": [["avoid(probable_debris)"], [], []], "prediction": "(prop_1 implies F prop_2).\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"if stay away from the probable debris occurs\": \"prop_1\", \"finally return home happens\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 5531, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 1046, "sentence": ["From", "some", "point", "onwards,", "communicate", "with", "the", "safe", "rescuer", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "communicate(safe_rescuer)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], [], []], "bad_trace": [["communicate(safe_rescuer)"], [], ["communicate(safe_rescuer)"]], "prediction": "3. *FINAL:* (F (G (not prop_1))) FINISH"}
{"id": 7358, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "establish", "communication", "with", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["go_home", "communicate(injured_hostile)"]], "bad_trace": [["get_help"], ["go_home"]], "prediction": "3. FINAL: (globally (prop_1 implies finally prop_2)) implies (globally finally prop_3)"}
{"id": 9088, "sentence": ["When", "get", "help", "happens,", "deliver", "aid", "to", "the", "injured", "hostile", "must", "hold", "now", "or", "in", "the", "next", "step."], "tl": ["globally", "(", "get_help", "implies", "(", "deliver_aid(injured_hostile)", "or", "next", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "(", "prop_2", "or", "next", "prop_2", ")", ")"], "grounded_sentence": ["When", "prop_1", "happens,", "prop_2", "must", "hold", "now", "or", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help", "deliver_aid(injured_hostile)"]], "bad_trace": [["get_help"], []], "prediction": "3. FINAL: (prop_1 implies (prop_2 or next prop_2)) FINISH"}
{"id": 2400, "sentence": ["The", "system", "must", "avoid", "the", "active", "gas", "leak", "and", "take", "a", "photo", "of", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(active_gas_leak)", "and", "photo(fire_source)", ")", ")", "and", "globally", "(", "avoid(active_gas_leak)", "or", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["avoid(active_gas_leak)"], ["photo(fire_source)"], ["avoid(active_gas_leak)"]], "bad_trace": [[], []], "prediction": "- Globally, prop_1 and prop_2 never coincide: G not (prop_1 and prop_2)"}
{"id": 8832, "sentence": ["Whenever", "neither", "deliver", "aid", "to", "the", "injured", "victim", "nor", "stay", "away", "from", "the", "active", "gas", "leak", "holds,", "request", "assistance", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(injured_victim)", "and", "avoid(active_gas_leak)", ")", "implies", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_3": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)", "avoid(active_gas_leak)"]], "bad_trace": [[]], "prediction": "3. FINAL: G ((not prop_1 and not prop_2) implies F prop_3) FINISH"}
{"id": 2535, "sentence": ["Get", "help", "and", "provide", "assistance", "to", "the", "injured", "victim", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "get_help", "and", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_victim)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 8837, "sentence": ["Whenever", "neither", "stay", "away", "from", "the", "nearest", "fire", "source", "nor", "talk", "to", "the", "injured", "hostile", "holds,", "establish", "communication", "with", "the", "injured", "rescuer", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(nearest_fire_source)", "and", "communicate(injured_hostile)", ")", "implies", "finally", "communicate(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(nearest_fire_source)", "communicate(injured_hostile)"]], "bad_trace": [[]], "prediction": "( (not prop_1 and not prop_2) implies F prop_3 )"}
{"id": 9258, "sentence": ["You", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 3325, "sentence": ["From", "some", "point", "onwards,", "avoid", "the", "nearest", "debris", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "avoid(nearest_debris)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}}, "good_trace": [["avoid(nearest_debris)"], [], []], "bad_trace": [["avoid(nearest_debris)"], [], ["avoid(nearest_debris)"]], "prediction": "(F), indicating that from some future point the property holds. \"Avoid the nearest debris never occurs again\" means that from that point onwards, the proposition representing \"nearest debris\" (prop_1) never occurs again, which is \"globally not prop_1\" (G not prop_1). Combining these, we get: eventually (from some point) globally (never again) not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\" : \"F\", \"avoid the nearest debris never occurs again\" : \"G not prop_1\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 3446, "sentence": ["This", "controller", "must", "eventually,", "avoid", "staying", "away", "from", "the", "nearest", "fire", "source."], "tl": ["finally", "(", "not", "avoid(nearest_fire_source)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["avoid(nearest_fire_source)"], [], []], "bad_trace": [["avoid(nearest_fire_source)"], ["avoid(nearest_fire_source)"], ["avoid(nearest_fire_source)"]], "prediction": "3. *FINAL:* (finally (not prop_1)) FINISH"}
{"id": 130, "sentence": ["This", "controller", "must", "always", "avoid", "staying", "away", "from", "the", "inactive", "gas", "leak."], "tl": ["globally", "(", "not", "avoid(inactive_gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}}, "good_trace": [[], [], []], "bad_trace": [["avoid(inactive_gas_leak)"], [], []], "prediction": "(not prop_1)"}
{"id": 6968, "sentence": ["Whenever", "take", "a", "video", "of", "gas", "leak", "holds,", "go", "home", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "record(gas_leak)", "implies", "next", "(", "next", "(", "next", "go_home", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)"], [], [], ["go_home"]], "bad_trace": [["record(gas_leak)"], [], [], []], "prediction": "  \"Whenever ... holds\": \"G (prop_1 implies next next next prop_2)\""}
{"id": 8001, "sentence": ["Our", "agent", "must", "eventually", "stay", "away", "from", "the", "inactive", "fire", "source", "or", "begin", "recording", "unstable", "beam."], "tl": ["finally", "(", "avoid(inactive_fire_source)", "or", "record(unstable_beam)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [[], ["avoid(inactive_fire_source)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* F((not prop_1) or prop_2) FINISH"}
{"id": 7770, "sentence": ["You", "must", "eventually,", "avoid", "returning", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["You", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 3367, "sentence": ["Record", "unstable", "beam", "and", "establish", "communication", "with", "the", "safe", "rescuer", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(unstable_beam)", "and", "communicate(safe_rescuer)", ")", ")", "and", "globally", "(", "record(unstable_beam)", "or", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["record(unstable_beam)"], ["communicate(safe_rescuer)"], ["record(unstable_beam)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (globally (not (prop_1 and prop_2)) and globally (prop_1 or prop_2)) FINISH"}
{"id": 3952, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "3. *FINAL:* globally (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 7934, "sentence": ["If", "do", "not", "go", "near", "the", "active", "unstable", "beam", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "injured", "hostile."], "tl": ["globally", "finally", "avoid(active_unstable_beam)", "implies", "globally", "finally", "deliver_aid(injured_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[]], "bad_trace": [["avoid(active_unstable_beam)"]], "prediction": "(G F) in temporal logic, meaning \"infinitely often\".\n- \"then so does deliver aid to the injured hostile\" means that \"deliver aid to the injured hostile\" (prop_2) also happens infinitely often, i.e., G F prop_2.\n- The entire sentence is an implication: if G F (not prop_1)"}
{"id": 644, "sentence": ["Whenever", "take", "a", "photo", "of", "injured", "person", "and", "take", "a", "picture", "of", "injured", "civilian", "are", "equal,", "take", "a", "picture", "of", "injured", "civilian", "and", "go", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(injured_person)", "double_implies", "photo(injured_civilian)", ")", "implies", "(", "photo(injured_civilian)", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_person)", "photo(injured_civilian)", "go_home"]], "bad_trace": [["photo(injured_person)", "photo(injured_civilian)"]], "prediction": "globally ((prop_"}
{"id": 1926, "sentence": ["If", "give", "aid", "to", "the", "injured", "rescuer", "holds,", "then", "in", "the", "next", "step", "provide", "assistance", "to", "the", "injured", "victim", "persists", "until", "doing", "not", "go", "near", "the", "impending", "debris", "holds,", "or", "else", "provide", "assistance", "to", "the", "injured", "victim", "holds", "forever."], "tl": ["deliver_aid(injured_rescuer)", "implies", "next", "(", "(", "deliver_aid(injured_victim)", "until", "avoid(impending_debris)", ")", "or", "globally", "deliver_aid(injured_victim)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["avoid(impending_debris)"]], "bad_trace": [["deliver_aid(injured_rescuer)"], []], "prediction": "- The entire statement is an implication: if prop_1 then (next (prop_2 until prop_3) or globally prop_2)."}
{"id": 1790, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 5987, "sentence": ["If", "every", "get", "help", "is", "eventually", "followed", "by", "establishing", "communication", "with", "the", "injured", "victim,", "then", "avoid", "the", "active", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "get_help", "implies", "finally", "communicate(injured_victim)", ")", "implies", "globally", "finally", "avoid(active_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}}, "good_trace": [["get_help"], ["communicate(injured_victim)", "avoid(active_gas_leak)"]], "bad_trace": [["get_help"], ["communicate(injured_victim)"]], "prediction": "- The entire sentence is an implication: if (globally (prop_1 \u2192 finally prop_2)) then (globally finally prop_3)."}
{"id": 8620, "sentence": ["You", "must", "Eventually,", "both", "begin", "recording", "unsafe", "rescuer", "and", "establish", "communication", "with", "the", "injured", "rescuer", "hold", "simultaneously."], "tl": ["finally", "(", "record(unsafe_rescuer)", "and", "communicate(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(unsafe_rescuer)", "communicate(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 and prop_2) FINISH"}
{"id": 1821, "sentence": ["Give", "aid", "to", "the", "safe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "deliver_aid(safe_rescuer)", "and", "next", "deliver_aid(safe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], [], []], "prediction": "G (prop_1 or (not prop_1 and (next prop_1 or next next prop_1))) FINISH"}
{"id": 481, "sentence": ["The", "system", "must", "always", "maintain", "both", "take", "a", "photo", "of", "gas", "leak", "and", "take", "a", "photo", "of", "fire", "source."], "tl": ["globally", "(", "photo(gas_leak)", "and", "photo(fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(gas_leak)", "photo(fire_source)"], ["photo(gas_leak)", "photo(fire_source)"], ["photo(gas_leak)", "photo(fire_source)"]], "bad_trace": [["photo(gas_leak)"], ["photo(gas_leak)"], ["photo(fire_source)"]], "prediction": "G (prop_1 and prop_2) FINISH"}
{"id": 269, "sentence": ["If", "deliver", "aid", "to", "the", "safe", "victim", "holds", "and", "take", "a", "picture", "of", "fire", "source", "holds", "next,", "then", "record", "safe", "person", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(safe_victim)", "and", "next", "photo(fire_source)", "implies", "next", "next", "record(safe_person)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["deliver_aid(safe_victim)"], ["photo(fire_source)"], ["record(safe_person)"]], "bad_trace": [["deliver_aid(safe_victim)"], ["photo(fire_source)"], []], "prediction": "((prop_1 and next prop_2) implies next next prop_3) FINISH"}
{"id": 7984, "sentence": ["Both", "establish", "communication", "with", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "safe", "hostile", "hold", "at", "every", "step."], "tl": ["globally", "(", "communicate(safe_victim)", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["communicate(safe_victim)", "communicate(safe_hostile)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(G)\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 2866, "sentence": ["At", "every", "step,", "go", "back", "to", "base", "equals", "the", "value", "of", "photograph", "unsafe", "victim", "in", "the", "next", "step."], "tl": ["globally", "(", "go_home", "double_implies", "next", "photo(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [["go_home"], ["photo(unsafe_victim)"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally (prop_1 double_implies next prop_2) FINISH"}
{"id": 5798, "sentence": ["Whenever", "talk", "to", "the", "injured", "victim", "holds,", "begin", "recording", "unstable", "beam", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "next", "(", "next", "(", "next", "record(unstable_beam)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["communicate(injured_victim)"], [], [], ["record(unstable_beam)"]], "bad_trace": [["communicate(injured_victim)"], [], [], []], "prediction": "  \"Whenever ... holds, ...\": \"globally (prop_1 implies next next next prop_2)\""}
{"id": 5681, "sentence": ["Either", "go", "back", "to", "base", "happens", "infinitely", "often,", "or", "deliver", "aid", "to", "the", "safe", "victim", "happens", "in", "the", "next", "step."], "tl": ["globally", "finally", "go_home", "or", "next", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "finally", "prop_1", "or", "next", "prop_2"], "grounded_sentence": ["Either", "prop_1", "happens", "infinitely", "often,", "or", "prop_2", "happens", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (or (globally (finally prop_1)) (next prop_2)) FINISH"}
{"id": 856, "sentence": ["Talk", "to", "the", "injured", "rescuer", "and", "stay", "away", "from", "the", "impending", "fire", "source", "will", "each", "happen", "at", "some", "point."], "tl": ["finally", "communicate(injured_rescuer)", "and", "finally", "avoid(impending_fire_source)"], "masked_tl": ["finally", "prop_1", "and", "finally", "prop_2"], "grounded_sentence": ["prop_1", "and", "prop_2", "will", "each", "happen", "at", "some", "point."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["communicate(injured_rescuer)"], ["avoid(impending_fire_source)"]], "bad_trace": [[], [], []], "prediction": "(F prop_1) and (F prop_2).\n\n2. Explanation dictionary:\n{\"Talk to the injured rescuer\": \"prop_1\", \"Stay away from the impending fire source\": \"prop_2\", \"will each happen at some point\": \"(F prop_1) and (F prop_2)\"}\n\n3. FINAL: (F prop_1) and (F prop_2)"}
{"id": 4543, "sentence": ["If", "do", "not", "go", "near", "the", "inactive", "unstable", "beam", "holds", "and", "take", "a", "picture", "of", "flood", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(inactive_unstable_beam)", "and", "next", "photo(flood)", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], ["photo(flood)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_unstable_beam)"], ["photo(flood)"], []], "prediction": "3. FINAL: (not prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 5757, "sentence": ["Request", "assistance", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "get_help", "and", "next", "get_help", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], ["get_help"]], "bad_trace": [["get_help"], [], [], []], "prediction": "3. *FINAL:* G prop_1 and G (not prop_1 \u2192 (next prop_1 or next next prop_1)) FINISH"}
{"id": 9377, "sentence": ["If", "every", "take", "a", "video", "of", "flood", "is", "eventually", "followed", "by", "avoid", "the", "inactive", "debris,", "then", "avoid", "the", "nearest", "debris", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(flood)", "implies", "finally", "avoid(inactive_debris)", ")", "implies", "globally", "finally", "avoid(nearest_debris)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_debris"], "args_ref": ["inactive debris"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}}, "good_trace": [["record(flood)"], ["avoid(inactive_debris)", "avoid(nearest_debris)"]], "bad_trace": [["record(flood)"], ["avoid(inactive_debris)"]], "prediction": "(take a video of flood) occurs, then eventually prop_2 (avoid the inactive debris) happens. This is expressed as G(prop_1 \u2192 F prop_2).\n- \"then avoid the nearest debris must occur infinitely often\" means: prop_3 (avoid the nearest debris) holds infinitely often, which is expressed as G F prop_3.\n- The entire command is an implication: if the first condition holds, then the second must hold.\n\n2. Explanation dictionary:\n{\n  \"every take a video of flood is eventually followed by avoid the inactive debris\": \"G (prop_1 -> F prop_2)\",\n  \"avoid the nearest debris must occur infinitely often\": \"G F prop_3\"\n}\n\n3. FINAL: (G (prop_1 -> F prop_2)) -> (G F prop_3)"}
{"id": 6648, "sentence": ["Whenever", "neither", "record", "fire", "source", "nor", "get", "help", "holds,", "take", "a", "video", "of", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(fire_source)", "and", "get_help", ")", "implies", "finally", "record(gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(fire_source)", "get_help"]], "bad_trace": [[]], "prediction": "3. FINAL: globally (implies (and (not prop_1) (not prop_2)) (finally prop_3)) FINISH"}
{"id": 4265, "sentence": ["Whenever", "take", "a", "photo", "of", "safe", "person", "and", "get", "help", "are", "equal,", "get", "help", "and", "avoid", "the", "probable", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(safe_person)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "avoid(probable_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["photo(safe_person)", "get_help", "avoid(probable_unstable_beam)"]], "bad_trace": [["photo(safe_person)", "get_help"]], "prediction": "(p and q) or (not p and not q), which is logically equivalent to double_implies: p double_implies q.\n- \"get help and avoid the probable unstable beam are equal as well\" means: the propositions \"get help\" and \"avoid the probable unstable beam\" are also equal (have the same truth value)"}
{"id": 7141, "sentence": ["The", "robot", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "robot", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "3. *FINAL:* (globally (not prop_1)) FINISH"}
{"id": 8653, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "get", "help", "and", "avoid", "the", "nearest", "gas", "leak."], "tl": ["globally", "(", "get_help", "and", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["get_help", "avoid(nearest_gas_leak)"], ["get_help", "avoid(nearest_gas_leak)"], ["get_help", "avoid(nearest_gas_leak)"]], "bad_trace": [["get_help"], ["get_help"], ["avoid(nearest_gas_leak)"]], "prediction": "3. *FINAL:* globally (prop_1 and prop_2) FINISH"}
{"id": 3174, "sentence": ["If", "every", "take", "a", "video", "of", "gas", "leak", "is", "eventually", "followed", "by", "going", "home,", "then", "give", "aid", "to", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(gas_leak)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "deliver_aid(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(gas_leak)"], ["go_home", "deliver_aid(injured_victim)"]], "bad_trace": [["record(gas_leak)"], ["go_home"]], "prediction": "  \"if ... then ...\": \"(G (prop_1 \u2192 F prop_2)) implies (G F prop_3)\""}
{"id": 5040, "sentence": ["Every", "provide", "assistance", "to", "the", "injured", "hostile", "is", "directly", "followed", "by", "recording", "debris", "in", "the", "next", "step."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "implies", "next", "record(debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "prop_2", ")"], "grounded_sentence": ["Every", "prop_1", "is", "directly", "followed", "by", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["record(debris)"]], "bad_trace": [["deliver_aid(injured_hostile)"], []], "prediction": "3. *FINAL:* G (prop_1 implies next prop_2) FINISH"}
{"id": 47, "sentence": ["Our", "agent", "must", "eventually", "talk", "to", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "injured", "hostile."], "tl": ["finally", "(", "communicate(safe_victim)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [[], ["communicate(safe_victim)"], ["communicate(safe_victim)", "communicate(injured_hostile)"]], "bad_trace": [[], ["communicate(safe_victim)"], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 3088, "sentence": ["The", "robot", "must", "Eventually,", "both", "go", "back", "to", "base", "and", "record", "debris", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "record(debris)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["go_home", "record(debris)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 and prop_2) FINISH"}
{"id": 8491, "sentence": ["Take", "a", "video", "of", "safe", "rescuer", "and", "do", "not", "go", "near", "the", "impending", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(safe_rescuer)", "and", "avoid(impending_fire_source)", ")", ")", "and", "globally", "(", "record(safe_rescuer)", "or", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["record(safe_rescuer)"], ["avoid(impending_fire_source)"], ["record(safe_rescuer)"]], "bad_trace": [[], []], "prediction": "3. FINAL: (globally (not (prop_1 and prop_2))) and (globally (prop_1 or prop_2)) FINISH"}
{"id": 2187, "sentence": ["Whenever", "neither", "take", "a", "video", "of", "flood", "nor", "take", "a", "video", "of", "safe", "civilian", "holds,", "take", "a", "video", "of", "debris", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(flood)", "and", "record(safe_civilian)", ")", "implies", "finally", "record(debris)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(flood)", "record(safe_civilian)"]], "bad_trace": [[]], "prediction": "3. FINAL: globally (not (prop_1 or prop_2) implies finally prop_3) FINISH"}
{"id": 4079, "sentence": ["Take", "a", "video", "of", "injured", "victim", "and", "deliver", "aid", "to", "the", "injured", "victim", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "record(injured_victim)", "and", "deliver_aid(injured_victim)", ")", ")", "and", "globally", "(", "record(injured_victim)", "or", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(injured_victim)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* (globally (not (prop_1 and prop_2)) and globally (prop_1 or prop_2)) FINISH"}
{"id": 8463, "sentence": ["Get", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 3033, "sentence": ["Whenever", "neither", "avoid", "the", "probable", "gas", "leak", "nor", "take", "a", "photo", "of", "flood", "holds,", "take", "a", "video", "of", "unstable", "beam", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(probable_gas_leak)", "and", "photo(flood)", ")", "implies", "finally", "record(unstable_beam)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["avoid(probable_gas_leak)", "photo(flood)"]], "bad_trace": [[]], "prediction": "  \"Whenever ... holds, ... eventually holds\": \"G ((not prop_1 and not prop_2) implies (F prop_3))\""}
{"id": 3299, "sentence": ["Take", "a", "picture", "of", "debris", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(debris)", "and", "next", "photo(debris)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["photo(debris)"], [], ["photo(debris)"]], "bad_trace": [["photo(debris)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 4675, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "photo", "of", "unstable", "beam", "and", "communicate", "with", "the", "injured", "hostile", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(unstable_beam)", "and", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["photo(unstable_beam)"], ["communicate(injured_hostile)"], []], "bad_trace": [["photo(unstable_beam)", "communicate(injured_hostile)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 9800, "sentence": ["From", "some", "point", "onwards,", "take", "a", "picture", "of", "unsafe", "person", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "photo(unsafe_person)"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["photo(unsafe_person)"], [], []], "bad_trace": [["photo(unsafe_person)"], [], ["photo(unsafe_person)"]], "prediction": "(F) a condition will hold globally (G) from that point on. The condition is \"take a picture of unsafe person never occurs again,\" meaning that from that point onwards, the proposition representing \"take a picture of unsafe person\" (prop_1) never occurs again, i.e., globally not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F (G ...)\", \"take a picture of unsafe person never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 3893, "sentence": ["Whenever", "give", "aid", "to", "the", "safe", "rescuer", "holds,", "eventually", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "will", "hold."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "finally", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["avoid(impending_unstable_beam)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies finally (not prop_2)) FINISH"}
{"id": 8380, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "victim", "holds,", "then", "in", "the", "next", "step", "go", "back", "to", "base", "persists", "until", "calling", "for", "help", "holds,", "or", "else", "go", "back", "to", "base", "holds", "forever."], "tl": ["deliver_aid(injured_victim)", "implies", "next", "(", "(", "go_home", "until", "get_help", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["go_home"], ["go_home"], ["get_help"]], "bad_trace": [["deliver_aid(injured_victim)"], []], "prediction": "- The entire formula is an implication: prop_1 implies next (prop_2 until prop_3), and not prop_1 implies globally prop_2."}
{"id": 1488, "sentence": ["Talk", "to", "the", "safe", "victim", "and", "establish", "communication", "with", "the", "injured", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "communicate(safe_victim)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["communicate(safe_victim)"], ["communicate(injured_hostile)"], []], "bad_trace": [["communicate(safe_victim)", "communicate(injured_hostile)"]], "prediction": "3. *FINAL:* globally (not (prop_1 and prop_2)) FINISH"}
{"id": 6299, "sentence": ["Whenever", "neither", "provide", "assistance", "to", "the", "safe", "victim", "nor", "photograph", "injured", "civilian", "holds,", "give", "aid", "to", "the", "injured", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_victim)", "and", "photo(injured_civilian)", ")", "implies", "finally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(safe_victim)", "photo(injured_civilian)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* globally (not (prop_1 or prop_2) implies finally prop_3) FINISH"}
{"id": 97, "sentence": ["From", "some", "point", "onwards,", "go", "back", "to", "base", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "3. *FINAL:* F (prop_1 and G (not prop_1)) FINISH"}
{"id": 4141, "sentence": ["The", "system", "must", "always", "avoid", "geting", "help."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 96, "sentence": ["Whenever", "take", "a", "photo", "of", "flood", "and", "photograph", "injured", "civilian", "are", "equal,", "photograph", "injured", "civilian", "and", "talk", "to", "the", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(flood)", "double_implies", "photo(injured_civilian)", ")", "implies", "(", "photo(injured_civilian)", "double_implies", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(flood)", "photo(injured_civilian)", "communicate(safe_victim)"]], "bad_trace": [["photo(flood)", "photo(injured_civilian)"]], "prediction": "- This is a globally true implication: globally, if (prop_1 and prop_2) then (prop_2 and prop_3)."}
{"id": 6099, "sentence": ["Whenever", "communicate", "with", "the", "safe", "hostile", "holds,", "give", "aid", "to", "the", "safe", "victim", "holds", "as", "well."], "tl": ["globally", "(", "communicate(safe_hostile)", "implies", "deliver_aid(safe_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_hostile)", "deliver_aid(safe_victim)"], ["deliver_aid(safe_victim)"]], "bad_trace": [["communicate(safe_hostile)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 523, "sentence": ["The", "system", "must", "always", "avoid", "recording", "unsafe", "victim."], "tl": ["globally", "(", "not", "record(unsafe_victim)", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [[], [], []], "bad_trace": [["record(unsafe_victim)"], [], []], "prediction": "(prop_1) must never be true. Therefore, \"avoid recording unsafe victim\" translates to \"not prop_1\". Combining these, the entire sentence translates to \"globally not prop_1\".\n\n2. *Explanation dictionary* \u2013 {\"always\": \"G\", \"avoid recording unsafe victim\": \"not prop_1\"}\n\n3. *FINAL:* G (not prop_1)"}
{"id": 6841, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "do", "not", "go", "near", "the", "probable", "gas", "leak", "and", "establish", "communication", "with", "the", "injured", "victim", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "avoid(probable_gas_leak)", "and", "communicate(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(probable_gas_leak)"], ["communicate(injured_victim)"], []], "bad_trace": [["avoid(probable_gas_leak)", "communicate(injured_victim)"]], "prediction": "(and). The negation \"it is not the case that\" applies to the entire conjunction. So the inner formula is not (and (not prop_1) prop_2). The entire formula is globally (not (and (not prop_1) prop_2)).\n\n2. *Explanation dictionary* \u2013\n{\n  \"Globally\": \"globally\",\n  \"it is not the case that\": \"not\",\n  \"both do not go near the probable gas leak and establish communication with the injured victim hold simultaneously\": \"and (not prop_1)"}
{"id": 4592, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "take", "a", "picture", "of", "flood", "and", "request", "assistance", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "photo(flood)", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(flood)"], ["get_help"], []], "bad_trace": [["photo(flood)", "get_help"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 180, "sentence": ["If", "every", "go", "back", "to", "base", "is", "eventually", "followed", "by", "photographing", "gas", "leak,", "then", "stay", "away", "from", "the", "nearest", "fire", "source", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "photo(gas_leak)", ")", "implies", "globally", "finally", "avoid(nearest_fire_source)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}}, "good_trace": [["go_home"], ["photo(gas_leak)", "avoid(nearest_fire_source)"]], "bad_trace": [["go_home"], ["photo(gas_leak)"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 5573, "sentence": ["This", "controller", "must", "eventually", "do", "not", "go", "near", "the", "probable", "debris", "and", "record", "unsafe", "victim."], "tl": ["finally", "(", "avoid(probable_debris)", "and", "record(unsafe_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}}, "good_trace": [[], ["avoid(probable_debris)"], ["avoid(probable_debris)", "record(unsafe_victim)"]], "bad_trace": [[], ["avoid(probable_debris)"], []], "prediction": "3. *FINAL:* (finally (not prop_1)) and (finally prop_2) FINISH"}
{"id": 2381, "sentence": ["If", "return", "to", "base", "happens", "infinitely", "often,", "then", "so", "does", "call", "for", "help."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "get_help"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "3. *FINAL:* (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 2813, "sentence": ["Whenever", "request", "assistance", "and", "return", "to", "base", "are", "equal,", "return", "to", "base", "and", "avoid", "the", "nearest", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "go_home", ")", "implies", "(", "go_home", "double_implies", "avoid(nearest_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["get_help", "go_home", "avoid(nearest_flood)"]], "bad_trace": [["get_help", "go_home"]], "prediction": "- So, whenever (globally) the equivalence between (prop_1 and prop_2) and (prop_2 and prop_3) holds."}
{"id": 2571, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "begin", "recording", "safe", "person", "and", "stay", "away", "from", "the", "probable", "gas", "leak", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "record(safe_person)", "and", "avoid(probable_gas_leak)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["record(safe_person)"], ["avoid(probable_gas_leak)"], []], "bad_trace": [["record(safe_person)", "avoid(probable_gas_leak)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 3478, "sentence": ["This", "controller", "must", "eventually,", "avoid", "geting", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "(F). The phrase \"avoid getting help\" means that the proposition representing \"getting help\" (prop_1) should never be true, so we use \"not prop_1\". Combining these, \"must eventually avoid getting help\" means that eventually, the system reaches a state where \"getting help\" is avoided. Since \"avoid getting help\" is a state property, and \"must eventually\" applies to it, the formula is F (not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid getting help\": \"not prop_1\"}\n\n3. *FINAL:* F (not prop_1)"}
{"id": 4542, "sentence": ["Either", "go", "back", "to", "base", "or", "communicate", "with", "the", "injured", "hostile", "happens", "infinitely", "often."], "tl": ["globally", "finally", "go_home", "or", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"]], "bad_trace": [[]], "prediction": "3. *FINAL:* (prop_1 or (globally finally prop_2)) FINISH"}
{"id": 2231, "sentence": ["If", "every", "record", "unsafe", "person", "is", "eventually", "followed", "by", "going", "back", "to", "base,", "then", "provide", "assistance", "to", "the", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(unsafe_person)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "deliver_aid(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(unsafe_person)"], ["go_home", "deliver_aid(safe_victim)"]], "bad_trace": [["record(unsafe_person)"], ["go_home"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 3205, "sentence": ["Whenever", "return", "to", "base", "holds,", "eventually", "provide", "assistance", "to", "the", "safe", "hostile", "will", "hold."], "tl": ["globally", "(", "go_home", "implies", "finally", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home"], [], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], [], []], "prediction": "(prop_1). The phrase \"eventually provide assistance to the safe hostile will hold\" means that after the condition, eventually \"provide assistance to the safe hostile\" (prop_2) will be true. So the formula is: globally, if prop_1 holds, then eventually prop_2 holds.\n\n2. *Explanation dictionary* \u2013 {\"Whenever return to base holds\": \"prop_1\", \"eventually provide assistance to the safe hostile will hold\": \"F prop_2\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 8817, "sentence": ["If", "photograph", "unsafe", "civilian", "ever", "holds,", "begin", "recording", "safe", "rescuer", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "photo(unsafe_civilian)", ")", "implies", "(", "not", "photo(unsafe_civilian)", "until", "(", "record(safe_rescuer)", "and", "not", "photo(unsafe_civilian)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["record(safe_rescuer)"], ["photo(unsafe_civilian)"]], "bad_trace": [["photo(unsafe_civilian)"]], "prediction": "G (prop_1 \u2192 (prop_2 U prop_"}
{"id": 7647, "sentence": ["Our", "agent", "must", "Eventually,", "both", "go", "back", "to", "base", "and", "avoid", "the", "nearest", "gas", "leak", "hold", "simultaneously."], "tl": ["finally", "(", "go_home", "and", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["go_home", "avoid(nearest_gas_leak)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 and prop_2) FINISH"}
{"id": 9142, "sentence": ["The", "robot", "must", "always", "have", "either", "deliver", "aid", "to", "the", "injured", "hostile", "or", "stay", "away", "from", "the", "probable", "unstable", "beam."], "tl": ["globally", "(", "deliver_aid(injured_hostile)", "or", "avoid(probable_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_unstable_beam"], "args_ref": ["probable unstable beam"]}}, "good_trace": [["deliver_aid(injured_hostile)"], ["avoid(probable_unstable_beam)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"], [], []], "prediction": "(globally), one of two conditions must hold: either the robot delivers aid to the injured hostile, or it stays away from the probable unstable beam. We represent \"deliver aid to the injured hostile\" as prop_1 and \"stay away from the probable unstable beam\" as prop_2. The word \"either ... or ...\" corresponds to a logical \"or\". The word \"always\" corresponds to the globally operator G.\n\n2. *Explanation dictionary* \u2013 {\"deliver aid to the injured hostile\": \"prop_1\", \"stay away from the probable unstable beam\": \"prop_2\", \"either ... or ...\": \"(prop_1 or prop_2)\", \"always\": \"G\"}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 827, "sentence": ["You", "must", "always", "have", "either", "photograph", "injured", "victim", "or", "photograph", "unstable", "beam."], "tl": ["globally", "(", "photo(injured_victim)", "or", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["photo(injured_victim)"], ["photo(unstable_beam)"], ["photo(injured_victim)"]], "bad_trace": [["photo(injured_victim)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 or prop_2) FINISH"}
{"id": 3831, "sentence": ["If", "take", "a", "video", "of", "unsafe", "person", "holds,", "then", "in", "the", "next", "step", "deliver", "aid", "to", "the", "injured", "hostile", "persists", "until", "calling", "for", "help", "holds,", "or", "else", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "forever."], "tl": ["record(unsafe_person)", "implies", "next", "(", "(", "deliver_aid(injured_hostile)", "until", "get_help", ")", "or", "globally", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["record(unsafe_person)"], ["deliver_aid(injured_hostile)"], ["deliver_aid(injured_hostile)"], ["get_help"]], "bad_trace": [["record(unsafe_person)"], []], "prediction": "3. *FINAL:* (prop_1 implies (next (prop_2 until prop_3) or globally prop_2)) FINISH"}
{"id": 5414, "sentence": ["The", "robot", "must", "Please", "photograph", "debris", "and", "then", "take", "a", "photo", "of", "safe", "person."], "tl": ["(", "photo(debris)", "until", "photo(safe_person)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["photo(debris)", "photo(safe_person)"]], "bad_trace": [[], [], []], "prediction": "(photograph debris). The phrase \"and then take a photo of safe person\" corresponds to prop_2 (take photo of safe person). The word \"and then\" indicates a temporal ordering: first prop_1 must happen, and then prop_2 must happen afterward. This is captured by the \"until\" operator or by \"prop_1 until prop_2\" or \"prop_1 and then eventually prop_2\". Since the command says \"must\", it implies that eventually prop_1 happens and then eventually prop_2 happens after that. A suitable formula is: \"prop_1 until prop_2\" or \"F(prop_1 and F prop_2)\". But to ensure the order, we can say: \"prop_1 holds until prop_2 holds\", meaning prop_2 happens after prop_1. Alternatively, \"F prop_1 and F (prop_2 and after prop_1)"}
{"id": 9610, "sentence": ["Whenever", "establish", "communication", "with", "the", "safe", "victim", "holds,", "eventually", "begin", "recording", "flood", "will", "hold."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "record(flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["communicate(safe_victim)"], [], ["record(flood)"]], "bad_trace": [["communicate(safe_victim)"], [], []], "prediction": "(representing \"establish communication with the safe victim\") is true.\n- \"eventually begin recording flood will hold\" means that proposition prop_2 (representing \"begin recording flood\") will eventually be true.\n- The phrase \"whenever ... holds, eventually ...\" corresponds to the temporal logic formula: globally (if prop_1 then finally prop_2).\n\n2. Explanation dictionary:\n{\"establish communication with the safe victim holds\": \"prop_1\", \"begin recording flood will hold\": \"prop_2\", \"whenever ... holds, eventually ...\": \"G (prop_1 implies F prop_2)\"}\n\n3. FINAL: G (prop_1 implies F prop_2)"}
{"id": 2117, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "calling", "for", "help."], "tl": ["finally", "(", "not", "get_help", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], ["get_help"], ["get_help"]], "prediction": "3. *FINAL:* (finally (globally (not prop_1))) FINISH"}
{"id": 1192, "sentence": ["If", "every", "deliver", "aid", "to", "the", "injured", "victim", "is", "eventually", "followed", "by", "requesting", "assistance,", "then", "return", "home", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(injured_victim)"], ["get_help", "go_home"]], "bad_trace": [["deliver_aid(injured_victim)"], ["get_help"]], "prediction": "(G) whenever prop_1 (deliver aid) occurs, it is eventually (F) followed by prop_2 (requesting assistance). This is expressed as G (prop_1 \u2192 F prop_2).\n- \"then return home must occur infinitely often\" means that prop_3 (return home) happens infinitely often, which in LTL is expressed as G F prop_3 (globally eventually prop_3).\n\n2. Explanation dictionary:\n{\n  \"every deliver aid to the injured victim is eventually followed by requesting assistance\": \"G (prop_1 \u2192 F prop_2)\",\n  \"return home must occur infinitely often\": \"G F prop_3\"\n}\n\n3. FINAL: (G (prop_1 \u2192 F prop_2)) implies (G F prop_3)"}
{"id": 3929, "sentence": ["Whenever", "neither", "record", "fire", "source", "nor", "photograph", "fire", "source", "holds,", "avoid", "the", "probable", "fire", "source", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "record(fire_source)", "and", "photo(fire_source)", ")", "implies", "finally", "avoid(probable_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_fire_source"], "args_ref": ["probable fire source"]}}, "good_trace": [["record(fire_source)", "photo(fire_source)"]], "bad_trace": [[]], "prediction": "- In LTL: globally (if not (prop_1 or prop_2) then finally prop_3)."}
{"id": 8699, "sentence": ["If", "deliver", "aid", "to", "the", "injured", "hostile", "ever", "holds,", "request", "assistance", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "deliver_aid(injured_hostile)", ")", "implies", "(", "not", "deliver_aid(injured_hostile)", "until", "(", "get_help", "and", "not", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["get_help"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_hostile)"]], "prediction": "3. *FINAL:* (F prop_1) implies (prop_2 U prop_1) FINISH"}
{"id": 3271, "sentence": ["You", "must", "always", "maintain", "both", "avoid", "the", "active", "fire", "source", "and", "establish", "communication", "with", "the", "injured", "hostile."], "tl": ["globally", "(", "avoid(active_fire_source)", "and", "communicate(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["avoid(active_fire_source)", "communicate(injured_hostile)"], ["avoid(active_fire_source)", "communicate(injured_hostile)"], ["avoid(active_fire_source)", "communicate(injured_hostile)"]], "bad_trace": [["avoid(active_fire_source)"], ["avoid(active_fire_source)"], ["communicate(injured_hostile)"]], "prediction": "(and) of two conditions. We represent \"avoid the active fire source\" as prop_1 and \"establish communication with the injured hostile\" as prop_2. Thus, the formula is G (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"always maintain\": \"G\", \"avoid the active fire source\": \"prop_1\", \"establish communication with the injured hostile\": \"prop_2\", \"both ... and ...\": \"and\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 6963, "sentence": ["If", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds,", "then", "in", "the", "next", "step", "return", "home", "persists", "until", "recording", "injured", "rescuer", "holds,", "or", "else", "return", "home", "holds", "forever."], "tl": ["avoid(nearest_gas_leak)", "implies", "next", "(", "(", "go_home", "until", "record(injured_rescuer)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(nearest_gas_leak)"], ["go_home"], ["go_home"], ["record(injured_rescuer)"]], "bad_trace": [["avoid(nearest_gas_leak)"], []], "prediction": "- The entire sentence is an implication: if prop_1 then (next (prop_2 until prop_3)) or globally prop_2."}
{"id": 6964, "sentence": ["The", "system", "must", "eventually", "take", "a", "photo", "of", "gas", "leak", "or", "request", "assistance."], "tl": ["finally", "(", "photo(gas_leak)", "or", "get_help", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["photo(gas_leak)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 or prop_2) FINISH"}
{"id": 3763, "sentence": ["Whenever", "neither", "go", "home", "nor", "begin", "recording", "safe", "civilian", "holds,", "communicate", "with", "the", "safe", "victim", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(safe_civilian)", ")", "implies", "finally", "communicate(safe_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "record(safe_civilian)"]], "bad_trace": [[]], "prediction": "(neither go home nor begin recording safe civilian) holds, then eventually communicate with the safe victim holds.\n- We represent \"go home\" as prop_1, \"begin recording safe civilian\" as prop_2, and \"communicate with the safe victim\" as prop_3.\n- \"Neither ... nor ...\" translates to \"not prop_1 and not prop_2\".\n- \"Whenever ... holds\" translates to globally (G) the implication.\n- \"Eventually ... holds\" translates to finally (F).\n\n2. Explanation dictionary:\n{\n  \"go home\": \"prop_1\",\n  \"begin recording safe civilian\": \"prop_2\",\n  \"communicate with the safe victim\": \"prop_3\",\n  \"neither go home nor begin recording safe civilian\": \"(not prop_1 and not prop_2)"}
{"id": 8089, "sentence": ["If", "go", "home", "holds", "and", "stay", "away", "from", "the", "inactive", "gas", "leak", "holds", "next,", "then", "stay", "away", "from", "the", "nearest", "flood", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "avoid(inactive_gas_leak)", "implies", "next", "next", "avoid(nearest_flood)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["go_home"], ["avoid(inactive_gas_leak)"], ["avoid(nearest_flood)"]], "bad_trace": [["go_home"], ["avoid(inactive_gas_leak)"], []], "prediction": "((prop_1 and next prop_2) implies next next prop_3) FINISH"}
{"id": 1524, "sentence": ["If", "do", "not", "go", "near", "the", "active", "debris", "holds", "and", "call", "for", "help", "holds", "next,", "then", "take", "a", "video", "of", "injured", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(active_debris)", "and", "next", "get_help", "implies", "next", "next", "record(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["avoid(active_debris)"], ["get_help"], ["record(injured_rescuer)"]], "bad_trace": [["avoid(active_debris)"], ["get_help"], []], "prediction": "3. *FINAL:* ((not prop_1) and (next prop_2)) implies (next next prop_3) FINISH"}
{"id": 9994, "sentence": ["Request", "assistance", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 50, "sentence": ["Photograph", "gas", "leak", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(gas_leak)", "and", "next", "photo(gas_leak)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["photo(gas_leak)"], [], ["photo(gas_leak)"]], "bad_trace": [["photo(gas_leak)"], [], [], []], "prediction": "  \"at most a two-step grace period for recovery\": \"globally (not prop_1 implies (next prop_1 or next next prop_1))\""}
{"id": 1598, "sentence": ["If", "take", "a", "photo", "of", "injured", "civilian", "holds,", "then", "in", "the", "next", "step", "communicate", "with", "the", "safe", "victim", "persists", "until", "delivering", "aid", "to", "the", "safe", "rescuer", "holds,", "or", "else", "communicate", "with", "the", "safe", "victim", "holds", "forever."], "tl": ["photo(injured_civilian)", "implies", "next", "(", "(", "communicate(safe_victim)", "until", "deliver_aid(safe_rescuer)", ")", "or", "globally", "communicate(safe_victim)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["photo(injured_civilian)"], ["communicate(safe_victim)"], ["communicate(safe_victim)"], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["photo(injured_civilian)"], []], "prediction": "3. *FINAL:* (prop_1 implies (next (prop_2 until prop_3))) or (globally prop_2) FINISH"}
{"id": 8819, "sentence": ["From", "some", "point", "onwards,", "call", "for", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "3. *FINAL:* F (globally (not prop_1)) FINISH"}
{"id": 6007, "sentence": ["Talk", "to", "the", "safe", "hostile", "must", "hold", "until", "begin", "recording", "safe", "victim", "does,", "or", "else", "talk", "to", "the", "safe", "hostile", "holds", "forever."], "tl": ["(", "communicate(safe_hostile)", "until", "record(safe_victim)", ")", "or", "globally", "communicate(safe_hostile)"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")", "or", "globally", "prop_1"], "grounded_sentence": ["prop_1", "must", "hold", "until", "prop_2", "does,", "or", "else", "prop_1", "holds", "forever."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 2, 2, 2, 2, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_hostile)"], ["communicate(safe_hostile)"], ["record(safe_victim)"]], "bad_trace": [[], []], "prediction": "(U).\n- \"or else talk to the safe hostile holds forever\" means if the until condition does not happen, then \"talk to the safe hostile\" holds globally (forever).\n- This is a classic until with fallback globally: (prop_1 U prop_2) or G prop_1.\n- But the command says \"must hold until ... or else ... holds forever,\" which means the formula is: (prop_1 U prop_2) or G prop_1.\n- However, in LTL, (p U q) or G p is logically equivalent to G p, so to capture the intended meaning, we write: (prop_1 U prop_2)"}
{"id": 3343, "sentence": ["Whenever", "neither", "give", "aid", "to", "the", "safe", "hostile", "nor", "return", "home", "holds,", "stay", "away", "from", "the", "probable", "gas", "leak", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "deliver_aid(safe_hostile)", "and", "go_home", ")", "implies", "finally", "avoid(probable_gas_leak)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["probable_gas_leak"], "args_ref": ["probable gas leak"]}}, "good_trace": [["deliver_aid(safe_hostile)", "go_home"]], "bad_trace": [[]], "prediction": "3. FINAL: G((not prop_1 and not prop_2) implies F prop_3) FINISH"}
{"id": 5020, "sentence": ["You", "must", "always", "have", "either", "take", "a", "picture", "of", "gas", "leak", "or", "take", "a", "photo", "of", "unsafe", "civilian."], "tl": ["globally", "(", "photo(gas_leak)", "or", "photo(unsafe_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [["photo(gas_leak)"], ["photo(unsafe_civilian)"], ["photo(gas_leak)"]], "bad_trace": [["photo(gas_leak)"], [], []], "prediction": "(G) operator. The phrase \"either take a picture of gas leak or take a photo of unsafe civilian\" is a disjunction (or) between two propositions: \"take a picture of gas leak\" (prop_1) and \"take a photo of unsafe civilian\" (prop_2). So the formula is G (prop_1 or prop_2).\n\n2. *Explanation dictionary* \u2013 {\"You must always have\": \"G\", \"take a picture of gas leak\": \"prop_1\", \"take a photo of unsafe civilian\": \"prop_2\", \"either ... or ...\": \"or\"}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 8888, "sentence": ["If", "go", "home", "holds", "and", "request", "assistance", "holds", "next,", "then", "give", "aid", "to", "the", "safe", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "get_help", "implies", "next", "next", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home"], ["get_help"], ["deliver_aid(safe_hostile)"]], "bad_trace": [["go_home"], ["get_help"], []], "prediction": "3. FINAL: (prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 425, "sentence": ["Our", "agent", "must", "eventually", "request", "assistance", "or", "talk", "to", "the", "injured", "rescuer."], "tl": ["finally", "(", "get_help", "or", "communicate(injured_rescuer)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 9286, "sentence": ["The", "robot", "must", "eventually", "get", "help", "and", "go", "back", "to", "base."], "tl": ["finally", "(", "get_help", "and", "go_home", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], ["get_help"], ["get_help", "go_home"]], "bad_trace": [[], ["get_help"], []], "prediction": "3. *FINAL:* (finally prop_1) and (finally prop_2) FINISH"}
{"id": 2924, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "victim", "is", "eventually", "followed", "by", "photographing", "fire", "source,", "then", "record", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "photo(fire_source)", ")", "implies", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_3": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["communicate(safe_victim)"], ["photo(fire_source)", "record(gas_leak)"]], "bad_trace": [["communicate(safe_victim)"], ["photo(fire_source)"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 9957, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "go", "back", "to", "base", "and", "request", "assistance", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "go_home", "and", "get_help", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], ["get_help"], []], "bad_trace": [["go_home", "get_help"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 4328, "sentence": ["Whenever", "return", "to", "base", "and", "give", "aid", "to", "the", "safe", "hostile", "are", "equal,", "give", "aid", "to", "the", "safe", "hostile", "and", "communicate", "with", "the", "injured", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(safe_hostile)", ")", "implies", "(", "deliver_aid(safe_hostile)", "double_implies", "communicate(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_hostile)", "communicate(injured_victim)"]], "bad_trace": [["go_home", "deliver_aid(safe_hostile)"]], "prediction": "- So the formula is: globally ( (prop_1 and prop_2) implies (prop_2 and prop_3) )"}
{"id": 2773, "sentence": ["Whenever", "return", "to", "base", "holds,", "record", "safe", "rescuer", "holds", "as", "well."], "tl": ["globally", "(", "go_home", "implies", "record(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["go_home", "record(safe_rescuer)"], ["record(safe_rescuer)"]], "bad_trace": [["go_home"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 1341, "sentence": ["Whenever", "record", "debris", "holds,", "communicate", "with", "the", "injured", "victim", "holds", "as", "well."], "tl": ["globally", "(", "record(debris)", "implies", "communicate(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["debris"], "args_ref": ["debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["record(debris)", "communicate(injured_victim)"], ["communicate(injured_victim)"]], "bad_trace": [["record(debris)"], []], "prediction": "(G) operator with an implication. The phrase \"communicate with the injured victim holds as well\" is the consequent condition that must hold whenever the first condition holds. So, the formula is \"globally, if prop_1 (record debris) holds, then prop_2 (communicate with the injured victim) holds.\"\n\n2. *Explanation dictionary* \u2013 {\"Whenever record debris holds\": \"G (prop_1 implies ...)\", \"communicate with the injured victim holds as well\": \"prop_2\"}\n\n3. *FINAL:* G (prop_1 implies prop_2)"}
{"id": 4566, "sentence": ["Whenever", "go", "back", "to", "base", "and", "communicate", "with", "the", "safe", "victim", "are", "equal,", "communicate", "with", "the", "safe", "victim", "and", "provide", "assistance", "to", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "communicate(safe_victim)", ")", "implies", "(", "communicate(safe_victim)", "double_implies", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home", "communicate(safe_victim)", "deliver_aid(injured_hostile)"]], "bad_trace": [["go_home", "communicate(safe_victim)"]], "prediction": "(prop_1 double_implies prop_2).\n\nThe consequent is \"communicate with the safe victim and provide assistance to the injured hostile are equal as well.\" We reuse prop_2 for \"communicate with the safe victim\" and assign prop_3 to \"provide assistance to the injured hostile.\" The phrase \"are equal as well\" means prop_2 double_implies prop_3.\n\nThe entire statement is a \"whenever\" condition, which translates to globally (antecedent implies consequent)"}
{"id": 6143, "sentence": ["Whenever", "begin", "recording", "safe", "person", "and", "take", "a", "photo", "of", "injured", "victim", "are", "equal,", "take", "a", "photo", "of", "injured", "victim", "and", "provide", "assistance", "to", "the", "injured", "rescuer", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "record(safe_person)", "double_implies", "photo(injured_victim)", ")", "implies", "(", "photo(injured_victim)", "double_implies", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_person"], "args_ref": ["safe person"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["record(safe_person)", "photo(injured_victim)", "deliver_aid(injured_rescuer)"]], "bad_trace": [["record(safe_person)", "photo(injured_victim)"]], "prediction": "(prop_2) and \"provide assistance to the injured rescuer\" (prop_3) are also equal, represented as prop_2 double_implies prop_3. The entire statement \"Whenever ... are equal, ... are equal as well\" translates to globally (G) if the first equality holds, then the second equality must also hold, i.e., G((prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3))"}
{"id": 4099, "sentence": ["Whenever", "provide", "assistance", "to", "the", "injured", "victim", "holds,", "avoid", "the", "nearest", "gas", "leak", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "(", "next", "(", "next", "avoid(nearest_gas_leak)", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], [], ["avoid(nearest_gas_leak)"]], "bad_trace": [["deliver_aid(injured_victim)"], [], [], []], "prediction": "  \"Whenever ... holds\": \"globally (prop_1 implies next next next prop_2)\""}
{"id": 741, "sentence": ["Once", "deliver", "aid", "to", "the", "injured", "victim", "has", "occurred,", "deliver", "aid", "to", "the", "injured", "rescuer", "will", "never", "occur", "again."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "implies", "next", "globally", "not", "deliver_aid(injured_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "globally", "not", "prop_2", ")"], "grounded_sentence": ["Once", "prop_1", "has", "occurred,", "prop_2", "will", "never", "occur", "again."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["deliver_aid(injured_victim)"], [], []], "bad_trace": [["deliver_aid(injured_victim)"], [], ["deliver_aid(injured_rescuer)"]], "prediction": "(prop_1) has happened. The phrase \"deliver aid to the injured rescuer will never occur again\" means that after that point, \"deliver aid to the injured rescuer\" (prop_2) will never happen again. This can be expressed as: once prop_1 has happened, globally not prop_2 holds. Since LTL is future-oriented, \"once prop_1 has occurred\" can be represented as \"finally prop_1\" (F prop_1), and \"after that, prop_2 never occurs\" can be expressed as \"globally not prop_2\" (G not prop_2) holds from that point on. Combining these, the formula is: finally (prop_1 and globally not prop_2)"}
{"id": 274, "sentence": ["If", "take", "a", "picture", "of", "unstable", "beam", "happens", "infinitely", "often,", "then", "so", "does", "record", "gas", "leak."], "tl": ["globally", "finally", "photo(unstable_beam)", "implies", "globally", "finally", "record(gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [[]], "bad_trace": [["photo(unstable_beam)"]], "prediction": "3. *FINAL:* (globally finally prop_1) implies (globally finally prop_2)  \u2192 (G F prop_1) implies (G F prop_2) FINISH"}
{"id": 1384, "sentence": ["If", "every", "establish", "communication", "with", "the", "safe", "victim", "is", "eventually", "followed", "by", "give", "aid", "to", "the", "safe", "hostile,", "then", "go", "back", "to", "base", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "communicate(safe_victim)", "implies", "finally", "deliver_aid(safe_hostile)", ")", "implies", "globally", "finally", "go_home"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(safe_victim)"], ["deliver_aid(safe_hostile)", "go_home"]], "bad_trace": [["communicate(safe_victim)"], ["deliver_aid(safe_hostile)"]], "prediction": "3. FINAL: (G(prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 9833, "sentence": ["Record", "gas", "leak", "holds", "at", "all", "times."], "tl": ["globally", "record(gas_leak)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["record(gas_leak)"]], "bad_trace": [["record(gas_leak)"], []], "prediction": "(prop_1)"}
{"id": 9854, "sentence": ["Whenever", "give", "aid", "to", "the", "safe", "rescuer", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "equal,", "establish", "communication", "with", "the", "safe", "hostile", "and", "take", "a", "video", "of", "gas", "leak", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(safe_rescuer)", "double_implies", "communicate(safe_hostile)", ")", "implies", "(", "communicate(safe_hostile)", "double_implies", "record(gas_leak)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)", "communicate(safe_hostile)", "record(gas_leak)"]], "bad_trace": [["deliver_aid(safe_rescuer)", "communicate(safe_hostile)"]], "prediction": "(prop_1 and prop_2). The phrase \"establish communication with the safe hostile and take a video of gas leak are equal as well\" indicates that when the first condition holds, the second condition (prop_2 and prop_3) must also hold, where \"take a video of gas leak\" is prop_3. The \"Whenever\" at the start implies a globally (G) operator, and the implication (implies)"}
{"id": 8626, "sentence": ["You", "must", "do", "not", "go", "near", "the", "active", "unstable", "beam", "holds", "at", "all", "times."], "tl": ["globally", "avoid(active_unstable_beam)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["You", "must", "prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["avoid(active_unstable_beam)"]], "bad_trace": [["avoid(active_unstable_beam)"], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 2320, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "going", "home."], "tl": ["finally", "(", "not", "go_home", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], ["go_home"], ["go_home"]], "prediction": "(F). The phrase \"avoid going home\" means \"not prop_1\" where prop_1 represents \"going home\". Combining these, the agent must eventually be in a state where it avoids going home, so we use F(not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid going home\": \"not prop_1\"}\n\n3. *FINAL:* F(not prop_1)"}
{"id": 4601, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "take", "a", "picture", "of", "injured", "person", "and", "photograph", "injured", "civilian."], "tl": ["globally", "(", "photo(injured_person)", "and", "photo(injured_civilian)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["photo(injured_person)", "photo(injured_civilian)"], ["photo(injured_person)", "photo(injured_civilian)"], ["photo(injured_person)", "photo(injured_civilian)"]], "bad_trace": [["photo(injured_person)"], ["photo(injured_person)"], ["photo(injured_civilian)"]], "prediction": "(and) of two propositions: prop_1 for \"take a picture of injured person\" and prop_2 for \"photograph injured civilian\". Thus, the entire formula is G (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"must always maintain\": \"G\", \"take a picture of injured person\": \"prop_1\", \"photograph injured civilian\": \"prop_2\", \"both ... and ...\": \"and\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 5725, "sentence": ["Our", "agent", "must", "do", "not", "go", "near", "the", "nearest", "flood", "and", "do", "not", "go", "near", "the", "active", "fire", "source", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(nearest_flood)", "and", "avoid(active_fire_source)", ")", ")", "and", "globally", "(", "avoid(nearest_flood)", "or", "avoid(active_fire_source)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [["avoid(nearest_flood)"], ["avoid(active_fire_source)"], ["avoid(nearest_flood)"]], "bad_trace": [[], []], "prediction": "  \"never coincide\": \"not (prop_1 and prop_2)\","}
{"id": 6878, "sentence": ["Whenever", "photograph", "unsafe", "victim", "holds,", "return", "to", "base", "holds", "as", "well."], "tl": ["globally", "(", "photo(unsafe_victim)", "implies", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(unsafe_victim)", "go_home"], ["go_home"]], "bad_trace": [["photo(unsafe_victim)"], []], "prediction": "3. *FINAL:* globally (prop_1 implies prop_2) FINISH"}
{"id": 6810, "sentence": ["If", "every", "take", "a", "video", "of", "gas", "leak", "is", "eventually", "followed", "by", "geting", "help,", "then", "establish", "communication", "with", "the", "safe", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(gas_leak)", "implies", "finally", "get_help", ")", "implies", "globally", "finally", "communicate(safe_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["record(gas_leak)"], ["get_help", "communicate(safe_victim)"]], "bad_trace": [["record(gas_leak)"], ["get_help"]], "prediction": "(G) whenever prop_1 (take a video of gas leak) occurs, then eventually (F) prop_2 (getting help) occurs. This is: G (prop_1 \u2192 F prop_2).\n- \"then establish communication with the safe victim must occur infinitely often\" means that prop_3 (establish communication with the safe victim) happens infinitely often, which in LTL is expressed as: G F prop_3 (globally eventually prop_3).\n- The entire sentence is an implication: if the first condition holds, then the second condition holds.\n\n2. Explanation dictionary:\n{\n  \"every take a video of gas leak is eventually followed by getting help\": \"G (prop_1 \u2192 F prop_2)\",\n  \"establish communication with the safe victim must occur infinitely often\": \"G F prop_3\"\n}\n\n3. FINAL: (G (prop_1 \u2192 F prop_2)) implies (G F prop_3)"}
{"id": 4545, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "give", "aid", "to", "the", "safe", "hostile", "and", "record", "safe", "rescuer."], "tl": ["globally", "(", "deliver_aid(safe_hostile)", "and", "record(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["deliver_aid(safe_hostile)", "record(safe_rescuer)"], ["deliver_aid(safe_hostile)", "record(safe_rescuer)"], ["deliver_aid(safe_hostile)", "record(safe_rescuer)"]], "bad_trace": [["deliver_aid(safe_hostile)"], ["deliver_aid(safe_hostile)"], ["record(safe_rescuer)"]], "prediction": "(G). The phrase \"both give aid to the safe hostile and record safe rescuer\" indicates a conjunction (and) of two propositions: \"give aid to the safe hostile\" and \"record safe rescuer.\" We assign prop_1 to \"give aid to the safe hostile\" and prop_2 to \"record safe rescuer.\" Therefore, the formula is G (prop_1 and prop_2).\n\n2. *Explanation dictionary* \u2013 {\"must always maintain\": \"G\", \"give aid to the safe hostile\": \"prop_1\", \"record safe rescuer\": \"prop_2\", \"both ... and ...\": \"and\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 7210, "sentence": ["Either", "avoid", "the", "probable", "debris", "or", "return", "home", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(probable_debris)", "or", "globally", "finally", "go_home"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_debris"], "args_ref": ["probable debris"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_debris)"]], "bad_trace": [[]], "prediction": "3. *FINAL:* (globally (not prop_1)) or (globally (finally prop_2)) FINISH"}
{"id": 9313, "sentence": ["You", "must", "Eventually,", "both", "take", "a", "photo", "of", "flood", "and", "take", "a", "picture", "of", "fire", "source", "hold", "simultaneously."], "tl": ["finally", "(", "photo(flood)", "and", "photo(fire_source)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["flood"], "args_ref": ["flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [["photo(flood)", "photo(fire_source)"]], "bad_trace": [[], [], []], "prediction": "(F), and \"both ... simultaneously\" means prop_1 and prop_2 hold at the same time.\n\n2. *Explanation dictionary* \u2013 {\"Eventually\": \"F\", \"take a photo of flood\": \"prop_1\", \"take a picture of fire source\": \"prop_2\", \"both ... simultaneously\": \"prop_1 and prop_2\"}\n\n3. *FINAL:* F (prop_1 and prop_2)"}
{"id": 1424, "sentence": ["The", "system", "must", "always", "have", "either", "photograph", "fire", "source", "or", "go", "back", "to", "base."], "tl": ["globally", "(", "photo(fire_source)", "or", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["The", "system", "must", "always", "have", "either", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(fire_source)"], ["go_home"], ["photo(fire_source)"]], "bad_trace": [["photo(fire_source)"], [], []], "prediction": "(globally), one of two conditions must hold: either \"photograph fire source\" or \"go back to base\". We represent \"photograph fire source\" as prop_1 and \"go back to base\" as prop_2. The word \"either ... or ...\" corresponds to a logical \"or\". The word \"always\" corresponds to the globally operator G.\n\n2. *Explanation dictionary* \u2013 {\"photograph fire source\": \"prop_1\", \"go back to base\": \"prop_2\", \"always have either ... or ...\": \"G (prop_1 or prop_2)\"}\n\n3. *FINAL:* G (prop_1 or prop_2)"}
{"id": 6540, "sentence": ["Whenever", "go", "back", "to", "base", "and", "take", "a", "video", "of", "unsafe", "person", "are", "equal,", "take", "a", "video", "of", "unsafe", "person", "and", "deliver", "aid", "to", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "record(unsafe_person)", ")", "implies", "(", "record(unsafe_person)", "double_implies", "deliver_aid(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home", "record(unsafe_person)", "deliver_aid(injured_hostile)"]], "bad_trace": [["go_home", "record(unsafe_person)"]], "prediction": "(G)"}
{"id": 2491, "sentence": ["This", "controller", "must", "always", "maintain", "both", "give", "aid", "to", "the", "injured", "victim", "and", "record", "injured", "victim."], "tl": ["globally", "(", "deliver_aid(injured_victim)", "and", "record(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["deliver_aid(injured_victim)", "record(injured_victim)"], ["deliver_aid(injured_victim)", "record(injured_victim)"], ["deliver_aid(injured_victim)", "record(injured_victim)"]], "bad_trace": [["deliver_aid(injured_victim)"], ["deliver_aid(injured_victim)"], ["record(injured_victim)"]], "prediction": "(prop_1 and prop_2)"}
{"id": 4625, "sentence": ["Whenever", "avoid", "the", "inactive", "unstable", "beam", "holds,", "from", "the", "next", "step", "onwards", "provide", "assistance", "to", "the", "safe", "rescuer", "will", "eventually", "hold."], "tl": ["globally", "(", "avoid(inactive_unstable_beam)", "implies", "next", "finally", "deliver_aid(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["avoid(inactive_unstable_beam)"], [], ["deliver_aid(safe_rescuer)"]], "bad_trace": [["avoid(inactive_unstable_beam)"], [], []], "prediction": "3. FINAL: globally (prop_1 implies next (finally prop_2)) FINISH"}
{"id": 3849, "sentence": ["In", "this", "task,", "avoid", "the", "probable", "flood,", "then", "call", "for", "help."], "tl": ["(", "avoid(probable_flood)", "until", "get_help", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["In", "this", "task,", "prop_1", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["probable_flood"], "args_ref": ["probable flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(probable_flood)", "get_help"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (G (not prop_1)) and (F prop_2) FINISH"}
{"id": 881, "sentence": ["Whenever", "go", "home", "holds,", "from", "the", "next", "step", "onwards", "photograph", "gas", "leak", "will", "eventually", "hold."], "tl": ["globally", "(", "go_home", "implies", "next", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["go_home"], [], ["photo(gas_leak)"]], "bad_trace": [["go_home"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies next (finally prop_2)) FINISH"}
{"id": 4576, "sentence": ["From", "some", "point", "onwards,", "return", "home", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "go_home"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], []], "bad_trace": [["go_home"], [], ["go_home"]], "prediction": "(finally, F), indicating that starting at some future point. The phrase \"return home never occurs again\" means that from that point onwards, \"return home\" is always false, i.e., globally not prop_1. So, \"eventually globally not prop_1\".\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\" : \"F\", \"return home never occurs again\" : \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 8078, "sentence": ["If", "deliver", "aid", "to", "the", "safe", "rescuer", "holds", "and", "provide", "assistance", "to", "the", "injured", "hostile", "holds", "next,", "then", "return", "home", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "and", "next", "deliver_aid(injured_hostile)", "implies", "next", "next", "go_home", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(injured_hostile)"], ["go_home"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["deliver_aid(injured_hostile)"], []], "prediction": "3. FINAL: (prop_1 and next prop_2) implies next next prop_3 FINISH"}
{"id": 6863, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "return", "home", "and", "provide", "assistance", "to", "the", "injured", "rescuer", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "go_home", "and", "deliver_aid(injured_rescuer)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["go_home"], ["deliver_aid(injured_rescuer)"], []], "bad_trace": [["go_home", "deliver_aid(injured_rescuer)"]], "prediction": "3. *FINAL:* G (not (prop_1 and prop_2)) FINISH"}
{"id": 950, "sentence": ["If", "request", "assistance", "happens", "infinitely", "often,", "then", "so", "does", "deliver", "aid", "to", "the", "safe", "hostile."], "tl": ["globally", "finally", "get_help", "implies", "globally", "finally", "deliver_aid(safe_hostile)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [[]], "bad_trace": [["get_help"]], "prediction": "3. FINAL: (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 5254, "sentence": ["If", "take", "a", "picture", "of", "injured", "civilian", "holds,", "then", "in", "the", "next", "step", "stay", "away", "from", "the", "active", "unstable", "beam", "persists", "until", "returning", "home", "holds,", "or", "else", "stay", "away", "from", "the", "active", "unstable", "beam", "holds", "forever."], "tl": ["photo(injured_civilian)", "implies", "next", "(", "(", "avoid(active_unstable_beam)", "until", "go_home", ")", "or", "globally", "avoid(active_unstable_beam)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}}, "good_trace": [["photo(injured_civilian)"], ["avoid(active_unstable_beam)"], ["avoid(active_unstable_beam)"], ["go_home"]], "bad_trace": [["photo(injured_civilian)"], []], "prediction": "3. *FINAL:* (prop_1 implies (next (prop_2 until prop_3))) and (not prop_1 implies globally prop_2) FINISH"}
{"id": 7889, "sentence": ["From", "some", "point", "onwards,", "get", "help", "never", "occurs", "again."], "tl": ["finally", "globally", "not", "get_help"], "masked_tl": ["finally", "globally", "not", "prop_1"], "grounded_sentence": ["From", "some", "point", "onwards,", "prop_1", "never", "occurs", "again."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"], [], []], "bad_trace": [["get_help"], [], ["get_help"]], "prediction": "(finally, F), indicating that from some future point the property holds. The phrase \"get help never occurs again\" means that from that point onwards, \"help\" (prop_1) is always false, i.e., globally not prop_1. Combining these, we say: eventually (from some point) globally (never again) not prop_1.\n\n2. *Explanation dictionary* \u2013 {\"From some point onwards\": \"F\", \"get help never occurs again\": \"G (not prop_1)\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 7929, "sentence": ["Communicate", "with", "the", "safe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "communicate(safe_rescuer)", "and", "next", "communicate(safe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["communicate(safe_rescuer)"], [], ["communicate(safe_rescuer)"]], "bad_trace": [["communicate(safe_rescuer)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or (next prop_1) or (next"}
{"id": 8826, "sentence": ["Whenever", "deliver", "aid", "to", "the", "injured", "rescuer", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "establish", "communication", "with", "the", "injured", "hostile", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "deliver_aid(injured_rescuer)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "communicate(injured_hostile)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["deliver_aid(injured_rescuer)", "get_help", "communicate(injured_hostile)"]], "bad_trace": [["deliver_aid(injured_rescuer)", "get_help"]], "prediction": "(prop_1) and \"call for help\" (prop_2) have the same truth value (both true or both false). Equality can be expressed as (prop_1 and prop_2) or (not prop_1 and not prop_2), which is logically equivalent to double_implies: prop_1 double_implies prop_2.\n- \"call for help and establish communication with the injured hostile are equal as well\" means that the propositions representing \"call for help\" (prop_2) and \"establish communication with the injured hostile\" (prop_3) are also equal (both true or both false), i.e., prop_2 double_implies prop_3.\n- \"Whenever ... are equal, ... are equal as well\" means globally, if the first equality holds, then the second equality must hold as well. So globally (prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3)"}
{"id": 5395, "sentence": ["Go", "home", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 5375, "sentence": ["Both", "do", "not", "go", "near", "the", "nearest", "fire", "source", "and", "do", "not", "go", "near", "the", "impending", "fire", "source", "hold", "at", "every", "step."], "tl": ["globally", "(", "avoid(nearest_fire_source)", "and", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Both", "prop_1", "and", "prop_2", "hold", "at", "every", "step."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_fire_source"], "args_ref": ["nearest fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["avoid(nearest_fire_source)", "avoid(impending_fire_source)"]], "bad_trace": [["avoid(nearest_fire_source)"], []], "prediction": "3. *FINAL:* G (and (not prop_1) (not prop_2)) FINISH"}
{"id": 1389, "sentence": ["Request", "assistance", "and", "take", "a", "video", "of", "injured", "civilian", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "get_help", "and", "record(injured_civilian)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["injured_civilian"], "args_ref": ["injured civilian"]}}, "good_trace": [["get_help"], ["record(injured_civilian)"], []], "bad_trace": [["get_help", "record(injured_civilian)"]], "prediction": "3. *FINAL:* globally (not (prop_1 and prop_2)) FINISH"}
{"id": 29, "sentence": ["The", "robot", "must", "Eventually,", "both", "record", "unstable", "beam", "and", "do", "not", "go", "near", "the", "nearest", "flood", "hold", "simultaneously."], "tl": ["finally", "(", "record(unstable_beam)", "and", "avoid(nearest_flood)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["The", "robot", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_flood"], "args_ref": ["nearest flood"]}}, "good_trace": [["record(unstable_beam)", "avoid(nearest_flood)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 and not prop_2) FINISH"}
{"id": 9168, "sentence": ["If", "talk", "to", "the", "safe", "rescuer", "holds", "and", "talk", "to", "the", "injured", "victim", "holds", "next,", "then", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "communicate(safe_rescuer)", "and", "next", "communicate(injured_victim)", "implies", "next", "next", "avoid(impending_unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}}, "good_trace": [["communicate(safe_rescuer)"], ["communicate(injured_victim)"], ["avoid(impending_unstable_beam)"]], "bad_trace": [["communicate(safe_rescuer)"], ["communicate(injured_victim)"], []], "prediction": "- The entire formula is: (prop_1 and next prop_2) implies next next not prop_3."}
{"id": 6793, "sentence": ["If", "record", "unsafe", "civilian", "happens", "infinitely", "often,", "then", "so", "does", "get", "help."], "tl": ["globally", "finally", "record(unsafe_civilian)", "implies", "globally", "finally", "get_help"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [[]], "bad_trace": [["record(unsafe_civilian)"]], "prediction": "3. *FINAL:* ( (globally (finally prop_1)) implies (globally (finally prop_2)) ) FINISH"}
{"id": 5157, "sentence": ["Whenever", "take", "a", "photo", "of", "unstable", "beam", "holds,", "eventually", "do", "not", "go", "near", "the", "inactive", "gas", "leak", "will", "hold."], "tl": ["globally", "(", "photo(unstable_beam)", "implies", "finally", "avoid(inactive_gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "eventually", "prop_2", "will", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_gas_leak"], "args_ref": ["inactive gas leak"]}}, "good_trace": [["photo(unstable_beam)"], [], ["avoid(inactive_gas_leak)"]], "bad_trace": [["photo(unstable_beam)"], [], []], "prediction": "3. FINAL: globally (prop_1 implies finally (not prop_2)) FINISH"}
{"id": 9275, "sentence": ["If", "communicate", "with", "the", "safe", "victim", "holds,", "then", "in", "the", "next", "step", "stay", "away", "from", "the", "nearest", "gas", "leak", "persists", "until", "staying", "away", "from", "the", "active", "gas", "leak", "holds,", "or", "else", "stay", "away", "from", "the", "nearest", "gas", "leak", "holds", "forever."], "tl": ["communicate(safe_victim)", "implies", "next", "(", "(", "avoid(nearest_gas_leak)", "until", "avoid(active_gas_leak)", ")", "or", "globally", "avoid(nearest_gas_leak)", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["active_gas_leak"], "args_ref": ["active gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["communicate(safe_victim)"], ["avoid(nearest_gas_leak)"], ["avoid(nearest_gas_leak)"], ["avoid(active_gas_leak)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "- The entire sentence is an implication: if prop_1 then (next (prop_2 until prop_3) or globally prop_2)."}
{"id": 6495, "sentence": ["Whenever", "go", "back", "to", "base", "and", "get", "help", "are", "equal,", "get", "help", "and", "stay", "away", "from", "the", "inactive", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "avoid(inactive_unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_unstable_beam"], "args_ref": ["inactive unstable beam"]}}, "good_trace": [["go_home", "get_help", "avoid(inactive_unstable_beam)"]], "bad_trace": [["go_home", "get_help"]], "prediction": "3. FINAL: globally ((prop_1 and prop_2) implies (prop_2 and prop_3)) FINISH"}
{"id": 2829, "sentence": ["You", "must", "eventually", "deliver", "aid", "to", "the", "injured", "rescuer", "or", "take", "a", "picture", "of", "unsafe", "civilian."], "tl": ["finally", "(", "deliver_aid(injured_rescuer)", "or", "photo(unsafe_civilian)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["You", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}}, "good_trace": [[], ["deliver_aid(injured_rescuer)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally prop_1) or prop_2 FINISH"}
{"id": 3225, "sentence": ["Whenever", "go", "home", "and", "give", "aid", "to", "the", "safe", "rescuer", "are", "equal,", "give", "aid", "to", "the", "safe", "rescuer", "and", "establish", "communication", "with", "the", "safe", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(safe_rescuer)", ")", "implies", "(", "deliver_aid(safe_rescuer)", "double_implies", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["go_home", "deliver_aid(safe_rescuer)", "communicate(safe_victim)"]], "bad_trace": [["go_home", "deliver_aid(safe_rescuer)"]], "prediction": "(prop_1 and prop_2) hold simultaneously. The phrase \"give aid to the safe rescuer and establish communication with the safe victim are equal as well\" indicates that when the first condition holds, then the second condition (prop_3 and prop_4) should also hold. This is a temporal implication that whenever the first condition is true, the second condition must also be true at the same time or immediately after. Since the command uses \"Whenever,\" it implies a globally (always) condition that whenever the first condition holds, the second condition holds as well.\n\n2. *Explanation dictionary* \u2013\n{\n  \"go home\": \"prop_1\",\n  \"give aid to the safe rescuer (first occurrence)\": \"prop_2\",\n  \"give aid to the safe rescuer (second occurrence)\": \"prop_3\",\n  \"establish communication with the safe victim\": \"prop_4\",\n  \"go home and give aid to the safe rescuer are equal\": \"(prop_1 and prop_2)"}
{"id": 4534, "sentence": ["This", "controller", "must", "Please", "return", "to", "base", "and", "then", "communicate", "with", "the", "injured", "victim."], "tl": ["(", "go_home", "until", "communicate(injured_victim)", ")"], "masked_tl": ["(", "prop_1", "until", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "Please", "prop_1", "and", "then", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home", "communicate(injured_victim)"]], "bad_trace": [[], [], []], "prediction": "  \"and then\": \"prop_1 U prop_2\""}
{"id": 7116, "sentence": ["This", "controller", "must", "eventually", "go", "home", "and", "take", "a", "video", "of", "gas", "leak."], "tl": ["finally", "(", "go_home", "and", "record(gas_leak)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [[], ["go_home"], ["go_home", "record(gas_leak)"]], "bad_trace": [[], ["go_home"], []], "prediction": "3. *FINAL:* (finally prop_1) and prop_2 FINISH"}
{"id": 2494, "sentence": ["Whenever", "neither", "do", "not", "go", "near", "the", "impending", "flood", "nor", "do", "not", "go", "near", "the", "nearest", "debris", "holds,", "return", "home", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "avoid(impending_flood)", "and", "avoid(nearest_debris)", ")", "implies", "finally", "go_home", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["nearest_debris"], "args_ref": ["nearest debris"]}, "prop_3": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_flood)", "avoid(nearest_debris)"]], "bad_trace": [[]], "prediction": "- This is expressed as: globally (not (prop_1 or prop_2) implies finally prop_3)."}
{"id": 6044, "sentence": ["If", "every", "provide", "assistance", "to", "the", "safe", "rescuer", "is", "eventually", "followed", "by", "recording", "unstable", "beam,", "then", "take", "a", "picture", "of", "unsafe", "rescuer", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "finally", "record(unstable_beam)", ")", "implies", "globally", "finally", "photo(unsafe_rescuer)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], ["record(unstable_beam)", "photo(unsafe_rescuer)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], ["record(unstable_beam)"]], "prediction": "3. FINAL: (G (prop_1 implies F prop_2)) implies (G F prop_3) FINISH"}
{"id": 1499, "sentence": ["If", "every", "take", "a", "picture", "of", "unstable", "beam", "is", "eventually", "followed", "by", "returning", "home,", "then", "establish", "communication", "with", "the", "injured", "victim", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(unstable_beam)", "implies", "finally", "go_home", ")", "implies", "globally", "finally", "communicate(injured_victim)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["photo(unstable_beam)"], ["go_home", "communicate(injured_victim)"]], "bad_trace": [["photo(unstable_beam)"], ["go_home"]], "prediction": "(take picture of unstable beam).\n- \"is eventually followed by returning home\" means that after prop_1, prop_2 (returning home) eventually happens: prop_1 implies F prop_2.\n- \"If ... then establish communication with the injured victim must occur infinitely often\" means that if the above condition holds globally, then prop_3 (establish communication) happens infinitely often.\n- \"infinitely often\" is expressed as \"globally finally\" (G F prop_3).\n- The entire statement is an implication: if globally (prop_1 implies F prop_2), then G F prop_3.\n\n2. Explanation dictionary:\n\n{\n  \"take a picture of unstable beam\": \"prop_1\",\n  \"returning home\": \"prop_2\",\n  \"establish communication with the injured victim\": \"prop_3\",\n  \"every take a picture of unstable beam is eventually followed by returning home\": \"G (prop_1 implies F prop_2)"}
{"id": 5286, "sentence": ["Whenever", "record", "safe", "civilian", "holds,", "go", "back", "to", "base", "holds", "exactly", "three", "steps", "later."], "tl": ["globally", "(", "record(safe_civilian)", "implies", "next", "(", "next", "(", "next", "go_home", ")", ")", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "(", "next", "(", "next", "prop_2", ")", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "exactly", "three", "steps", "later."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["record(safe_civilian)"], [], [], ["go_home"]], "bad_trace": [["record(safe_civilian)"], [], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies next next next prop_2) FINISH"}
{"id": 7231, "sentence": ["This", "controller", "must", "eventually,", "avoid", "doing", "not", "go", "near", "the", "active", "flood."], "tl": ["finally", "(", "not", "avoid(active_flood)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["This", "controller", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_flood"], "args_ref": ["active flood"]}}, "good_trace": [["avoid(active_flood)"], [], []], "bad_trace": [["avoid(active_flood)"], ["avoid(active_flood)"], ["avoid(active_flood)"]], "prediction": "(F). The phrase \"avoid doing not go near the active flood\" means the controller should not be in the state \"not go near the active flood,\" which simplifies to \"go near the active flood\" being false. We represent \"go near the active flood\" as prop_1. So \"avoid doing not go near the active flood\" means \"not (not prop_1)\" which is just prop_1, but since it says \"avoid doing not go near,\" it means \"not (not prop_1)\" = prop_1, but the command is to avoid \"not go near,\" so the controller must eventually avoid \"not go near,\" meaning eventually \"go near\" is true. However, this is contradictory. More likely, \"avoid doing not go near\" means \"avoid not going near,\" i.e., must eventually go near the active flood. So the formula is F prop_1.\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"finally\", \"avoid doing not go near the active flood\": \"prop_1\"}\n\n3. *FINAL:* (finally prop_1)"}
{"id": 7400, "sentence": ["Photograph", "unsafe", "rescuer", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(unsafe_rescuer)", "and", "next", "photo(unsafe_rescuer)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(unsafe_rescuer)"], [], ["photo(unsafe_rescuer)"]], "bad_trace": [["photo(unsafe_rescuer)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 implies (prop_2 or next prop_2 or next next prop_2)) FINISH"}
{"id": 4946, "sentence": ["Call", "for", "help", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "(G)"}
{"id": 1289, "sentence": ["Either", "do", "not", "go", "near", "the", "active", "debris", "or", "avoid", "the", "nearest", "gas", "leak", "happens", "infinitely", "often."], "tl": ["globally", "finally", "avoid(active_debris)", "or", "globally", "finally", "avoid(nearest_gas_leak)"], "masked_tl": ["globally", "finally", "prop_1", "or", "globally", "finally", "prop_2"], "grounded_sentence": ["Either", "prop_1", "or", "prop_2", "happens", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["nearest_gas_leak"], "args_ref": ["nearest gas leak"]}}, "good_trace": [["avoid(active_debris)"]], "bad_trace": [[]], "prediction": "- Putting it together: (not prop_1) or (not G F prop_2)."}
{"id": 313, "sentence": ["Communicate", "with", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(prop_1)"}
{"id": 4537, "sentence": ["The", "system", "must", "always", "avoid", "calling", "for", "help."], "tl": ["globally", "(", "not", "get_help", ")"], "masked_tl": ["globally", "(", "not", "prop_1", ")"], "grounded_sentence": ["The", "system", "must", "always", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], []], "bad_trace": [["get_help"], [], []], "prediction": "3. *FINAL:* globally (not prop_1) FINISH"}
{"id": 9593, "sentence": ["Globally,", "if", "get", "help", "occurs", "then", "finally", "take", "a", "photo", "of", "safe", "rescuer", "happens."], "tl": ["globally", "(", "get_help", "implies", "finally", "photo(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")"], "grounded_sentence": ["Globally,", "if", "prop_1", "occurs", "then", "finally", "prop_2", "happens."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], [], ["photo(safe_rescuer)"]], "bad_trace": [["get_help"], [], []], "prediction": "(get help) occurs, then eventually (finally) prop_2 (take a photo of safe rescuer) happens. So the inner formula is prop_1 implies F prop_2. Wrapping this with G gives the full formula.\n\n2. *Explanation dictionary* \u2013 {\"Globally\": \"G\", \"if get help occurs then finally take a photo of safe rescuer happens\": \"prop_1 implies finally prop_2\", \"get help\": \"prop_1\", \"take a photo of safe rescuer\": \"prop_2\", \"finally\": \"F\"}\n\n3. *FINAL:* G (prop_1 implies F prop_2)"}
{"id": 9401, "sentence": ["At", "every", "step,", "photograph", "injured", "rescuer", "equals", "the", "value", "of", "take", "a", "photo", "of", "unsafe", "rescuer", "in", "the", "next", "step."], "tl": ["globally", "(", "photo(injured_rescuer)", "double_implies", "next", "photo(unsafe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "double_implies", "next", "prop_2", ")"], "grounded_sentence": ["At", "every", "step,", "prop_1", "equals", "the", "value", "of", "prop_2", "in", "the", "next", "step."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unsafe_rescuer"], "args_ref": ["unsafe rescuer"]}}, "good_trace": [["photo(injured_rescuer)"], ["photo(unsafe_rescuer)"]], "bad_trace": [["photo(injured_rescuer)"], []], "prediction": "3. *FINAL:* globally (prop_1 double_implies next (prop_2)) FINISH"}
{"id": 9093, "sentence": ["Whenever", "do", "not", "go", "near", "the", "impending", "unstable", "beam", "and", "deliver", "aid", "to", "the", "injured", "hostile", "are", "equal,", "deliver", "aid", "to", "the", "injured", "hostile", "and", "avoid", "the", "active", "debris", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "avoid(impending_unstable_beam)", "double_implies", "deliver_aid(injured_hostile)", ")", "implies", "(", "deliver_aid(injured_hostile)", "double_implies", "avoid(active_debris)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_debris"], "args_ref": ["active debris"]}}, "good_trace": [["avoid(impending_unstable_beam)", "deliver_aid(injured_hostile)", "avoid(active_debris)"]], "bad_trace": [["avoid(impending_unstable_beam)", "deliver_aid(injured_hostile)"]], "prediction": "- The overall formula is: globally ((prop_1 and prop_2) double_implies (prop_2 and prop_3))."}
{"id": 8468, "sentence": ["Whenever", "call", "for", "help", "holds,", "take", "a", "video", "of", "debris", "holds", "as", "well."], "tl": ["globally", "(", "get_help", "implies", "record(debris)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "prop_2", "holds", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["get_help", "record(debris)"], ["record(debris)"]], "bad_trace": [["get_help"], []], "prediction": "(call for help) is true. The phrase \"take a video of debris holds as well\" means that prop_2 (take a video of debris) should also hold whenever prop_1 holds. This is a typical \"globally, if prop_1 then prop_2\" pattern, which translates to G (prop_1 \u2192 prop_2).\n\n2. *Explanation dictionary* \u2013 {\"Whenever call for help holds\": \"G (prop_1 \u2192 prop_2)\", \"take a video of debris holds as well\": \"prop_2\"}\n\n3. *FINAL:* G (prop_1 implies prop_2)"}
{"id": 763, "sentence": ["If", "take", "a", "picture", "of", "injured", "victim", "happens", "infinitely", "often,", "then", "so", "does", "begin", "recording", "fire", "source."], "tl": ["globally", "finally", "photo(injured_victim)", "implies", "globally", "finally", "record(fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["fire_source"], "args_ref": ["fire source"]}}, "good_trace": [[]], "bad_trace": [["photo(injured_victim)"]], "prediction": "3. FINAL: (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 3700, "sentence": ["Talk", "to", "the", "injured", "rescuer", "holds", "at", "all", "times."], "tl": ["globally", "communicate(injured_rescuer)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}}, "good_trace": [["communicate(injured_rescuer)"]], "bad_trace": [["communicate(injured_rescuer)"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 8652, "sentence": ["If", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds,", "then", "in", "the", "next", "step", "go", "home", "persists", "until", "delivering", "aid", "to", "the", "injured", "rescuer", "holds,", "or", "else", "go", "home", "holds", "forever."], "tl": ["avoid(impending_fire_source)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(injured_rescuer)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_fire_source)"], ["go_home"], ["go_home"], ["deliver_aid(injured_rescuer)"]], "bad_trace": [["avoid(impending_fire_source)"], []], "prediction": "- The entire sentence is an implication: if (not prop_1) then (next (prop_2 until prop_3)) else (globally prop_2)."}
{"id": 4088, "sentence": ["Our", "agent", "must", "always", "maintain", "both", "begin", "recording", "gas", "leak", "and", "request", "assistance."], "tl": ["globally", "(", "record(gas_leak)", "and", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["Our", "agent", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["record(gas_leak)", "get_help"], ["record(gas_leak)", "get_help"], ["record(gas_leak)", "get_help"]], "bad_trace": [["record(gas_leak)"], ["record(gas_leak)"], ["get_help"]], "prediction": "3. *FINAL:* globally (prop_1 and prop_2) FINISH"}
{"id": 6361, "sentence": ["Whenever", "neither", "go", "home", "nor", "begin", "recording", "gas", "leak", "holds,", "communicate", "with", "the", "safe", "hostile", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "go_home", "and", "record(gas_leak)", ")", "implies", "finally", "communicate(safe_hostile)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["go_home", "record(gas_leak)"]], "bad_trace": [[]], "prediction": "  \"whenever ...\": \"G(... implies ...)\","}
{"id": 9154, "sentence": ["If", "every", "record", "injured", "person", "is", "eventually", "followed", "by", "avoid", "the", "active", "unstable", "beam,", "then", "take", "a", "picture", "of", "safe", "civilian", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(injured_person)", "implies", "finally", "avoid(active_unstable_beam)", ")", "implies", "globally", "finally", "photo(safe_civilian)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["injured_person"], "args_ref": ["injured person"]}, "prop_2": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}}, "good_trace": [["record(injured_person)"], ["avoid(active_unstable_beam)", "photo(safe_civilian)"]], "bad_trace": [["record(injured_person)"], ["avoid(active_unstable_beam)"]], "prediction": "(G), whenever prop_1 (record injured person) holds, then eventually (F) prop_2 (avoid the active unstable beam) holds. This is expressed as G(prop_1 implies F prop_2).\n\n- \"then take a picture of safe civilian must occur infinitely often\" means that prop_3 (take a picture of safe civilian) happens infinitely often. In LTL, \"infinitely often\" is expressed as \"globally finally\" (G F prop_3).\n\n- The entire command is an implication: if the first condition holds, then the second must hold. So the full formula is: (G(prop_1 \u2192 F prop_2)) \u2192 (G F prop_3).\n\n2. Explanation dictionary:\n\n{\n  \"every record injured person\": \"G prop_1\",\n  \"eventually followed by avoid the active unstable beam\": \"F prop_2\",\n  \"if every record injured person is eventually followed by avoid the active unstable beam\": \"G(prop_1 implies F prop_2)"}
{"id": 2, "sentence": ["Go", "back", "to", "base", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "go_home", "and", "next", "go_home", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go back to base", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], [], ["go_home"]], "bad_trace": [["go_home"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or next prop_1 or next next prop_1) FINISH"}
{"id": 6808, "sentence": ["Request", "assistance", "holds", "at", "all", "times."], "tl": ["globally", "get_help"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}}, "good_trace": [["get_help"]], "bad_trace": [["get_help"], []], "prediction": "3. *FINAL:* globally prop_1 FINISH"}
{"id": 6433, "sentence": ["You", "must", "always", "maintain", "both", "record", "unsafe", "civilian", "and", "photograph", "unstable", "beam."], "tl": ["globally", "(", "record(unsafe_civilian)", "and", "photo(unstable_beam)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "always", "maintain", "both", "prop_1", "and", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "record", "args_canon": ["unsafe_civilian"], "args_ref": ["unsafe civilian"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["record(unsafe_civilian)", "photo(unstable_beam)"], ["record(unsafe_civilian)", "photo(unstable_beam)"], ["record(unsafe_civilian)", "photo(unstable_beam)"]], "bad_trace": [["record(unsafe_civilian)"], ["record(unsafe_civilian)"], ["photo(unstable_beam)"]], "prediction": "(G) operator. The phrase \"both record unsafe civilian and photograph unstable beam\" means that two propositions must hold simultaneously at all times. We assign prop_1 to \"record unsafe civilian\" and prop_2 to \"photograph unstable beam\". The conjunction of these two propositions is maintained globally.\n\n2. *Explanation dictionary* \u2013 {\"always maintain both record unsafe civilian and photograph unstable beam\": \"G (prop_1 and prop_2)\"}\n\n3. *FINAL:* G (prop_1 and prop_2)"}
{"id": 9044, "sentence": ["Our", "agent", "must", "eventually,", "avoid", "begining", "recording", "debris."], "tl": ["finally", "(", "not", "record(debris)", ")"], "masked_tl": ["finally", "(", "not", "prop_1", ")"], "grounded_sentence": ["Our", "agent", "must", "eventually,", "avoid", "prop_1"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 1, 1, 1], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["debris"], "args_ref": ["debris"]}}, "good_trace": [["record(debris)"], [], []], "bad_trace": [["record(debris)"], ["record(debris)"], ["record(debris)"]], "prediction": "(F), indicating that something will happen at some point in the future. The phrase \"avoid beginning recording debris\" means that the proposition representing \"beginning recording debris\" (prop_1) should never become true. To express \"avoid beginning recording debris eventually,\" we use globally not prop_1 (G not prop_1), meaning \"prop_1 never happens.\" Since the agent must eventually avoid beginning recording debris, it means from some point onward, prop_1 never occurs. This can be expressed as \"finally globally not prop_1\" (F G not prop_1).\n\n2. *Explanation dictionary* \u2013 {\"must eventually\": \"F\", \"avoid beginning recording debris\": \"G not prop_1\"}\n\n3. *FINAL:* F (G (not prop_1))"}
{"id": 7087, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "impending", "flood", "and", "photograph", "injured", "victim", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "avoid(impending_flood)", "and", "photo(injured_victim)", ")", ")", "and", "globally", "(", "avoid(impending_flood)", "or", "photo(injured_victim)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_flood"], "args_ref": ["impending flood"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(impending_flood)"], ["photo(injured_victim)"], ["avoid(impending_flood)"]], "bad_trace": [[], []], "prediction": "3. FINAL: G((not prop_1) and prop_2) and G(not (prop_1 and prop_2)) and G(prop_1 or prop_2) FINISH"}
{"id": 9567, "sentence": ["If", "every", "go", "home", "is", "eventually", "followed", "by", "begining", "recording", "safe", "rescuer,", "then", "establish", "communication", "with", "the", "injured", "hostile", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "go_home", "implies", "finally", "record(safe_rescuer)", ")", "implies", "globally", "finally", "communicate(injured_hostile)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_3": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["go_home"], ["record(safe_rescuer)", "communicate(injured_hostile)"]], "bad_trace": [["go_home"], ["record(safe_rescuer)"]], "prediction": "- The entire sentence is an implication: (globally (prop_1 \u2192 finally prop_2)) \u2192 (globally finally prop_3)."}
{"id": 2914, "sentence": ["Whenever", "deliver", "aid", "to", "the", "safe", "rescuer", "holds,", "from", "the", "next", "step", "onwards", "take", "a", "photo", "of", "gas", "leak", "will", "eventually", "hold."], "tl": ["globally", "(", "deliver_aid(safe_rescuer)", "implies", "next", "finally", "photo(gas_leak)", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}, "prop_2": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}}, "good_trace": [["deliver_aid(safe_rescuer)"], [], ["photo(gas_leak)"]], "bad_trace": [["deliver_aid(safe_rescuer)"], [], []], "prediction": "3. *FINAL:* globally (prop_1 implies next (finally prop_2)) FINISH"}
{"id": 3424, "sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "do", "not", "go", "near", "the", "impending", "debris", "and", "establish", "communication", "with", "the", "safe", "victim", "hold", "simultaneously."], "tl": ["globally", "(", "not", "(", "avoid(impending_debris)", "and", "communicate(safe_victim)", ")", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")"], "grounded_sentence": ["Globally,", "it", "is", "not", "the", "case", "that", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_debris"], "args_ref": ["impending debris"]}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["avoid(impending_debris)"], ["communicate(safe_victim)"], []], "bad_trace": [["avoid(impending_debris)", "communicate(safe_victim)"]], "prediction": "(prop_1 and prop_2). Wrapping this inside globally gives G (not (prop_1 and prop_2))"}
{"id": 7377, "sentence": ["Whenever", "communicate", "with", "the", "injured", "victim", "holds,", "from", "the", "next", "step", "onwards", "get", "help", "will", "eventually", "hold."], "tl": ["globally", "(", "communicate(injured_victim)", "implies", "next", "finally", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "implies", "next", "finally", "prop_2", ")"], "grounded_sentence": ["Whenever", "prop_1", "holds,", "from", "the", "next", "step", "onwards", "prop_2", "will", "eventually", "hold."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["communicate(injured_victim)"], [], ["get_help"]], "bad_trace": [["communicate(injured_victim)"], [], []], "prediction": "  \"Whenever ... holds, ... will eventually hold\": \"globally (prop_1 implies next finally prop_2)\""}
{"id": 3493, "sentence": ["Take", "a", "photo", "of", "safe", "civilian", "and", "get", "help", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "tl": ["globally", "(", "not", "(", "photo(safe_civilian)", "and", "get_help", ")", ")", "and", "globally", "(", "photo(safe_civilian)", "or", "get_help", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", ")", "and", "globally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["prop_1", "and", "prop_2", "never", "coincide,", "yet", "one", "of", "them", "is", "always", "true."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["safe_civilian"], "args_ref": ["safe civilian"]}, "prop_2": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(safe_civilian)"], ["get_help"], ["photo(safe_civilian)"]], "bad_trace": [[], []], "prediction": "3. *FINAL:* globally (not (prop_1 and prop_2)) and globally (prop_1 or prop_2) FINISH"}
{"id": 8083, "sentence": ["If", "begin", "recording", "unsafe", "person", "ever", "holds,", "give", "aid", "to", "the", "injured", "rescuer", "must", "have", "held", "beforehand."], "tl": ["(", "finally", "record(unsafe_person)", ")", "implies", "(", "not", "record(unsafe_person)", "until", "(", "deliver_aid(injured_rescuer)", "and", "not", "record(unsafe_person)", ")", ")"], "masked_tl": ["(", "finally", "prop_2", ")", "implies", "(", "not", "prop_2", "until", "(", "prop_1", "and", "not", "prop_2", ")", ")"], "grounded_sentence": ["If", "prop_2", "ever", "holds,", "prop_1", "must", "have", "held", "beforehand."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["deliver_aid(injured_rescuer)"], ["record(unsafe_person)"]], "bad_trace": [["record(unsafe_person)"]], "prediction": "(begin recording unsafe person) becomes true, then \"give aid to the injured rescuer must have held beforehand\" means that prop_2 (give aid to injured rescuer) can only occur if prop_3 (injured rescuer held)"}
{"id": 5937, "sentence": ["If", "take", "a", "video", "of", "gas", "leak", "holds", "and", "talk", "to", "the", "injured", "victim", "holds", "next,", "then", "do", "not", "go", "near", "the", "impending", "fire", "source", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(gas_leak)", "and", "next", "communicate(injured_victim)", "implies", "next", "next", "avoid(impending_fire_source)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_3": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["impending_fire_source"], "args_ref": ["impending fire source"]}}, "good_trace": [["record(gas_leak)"], ["communicate(injured_victim)"], ["avoid(impending_fire_source)"]], "bad_trace": [["record(gas_leak)"], ["communicate(injured_victim)"], []], "prediction": "- The whole formula is an implication: (prop_1 and next prop_2) implies next next not prop_3."}
{"id": 1433, "sentence": ["This", "controller", "must", "do", "not", "go", "near", "the", "inactive", "flood", "and", "provide", "assistance", "to", "the", "safe", "hostile", "are", "mutually", "exclusive", "at", "all", "times."], "tl": ["globally", "not", "(", "avoid(inactive_flood)", "and", "deliver_aid(safe_hostile)", ")"], "masked_tl": ["globally", "not", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "prop_1", "and", "prop_2", "are", "mutually", "exclusive", "at", "all", "times."], "lifted_sentence_prop_ids": [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["avoid(inactive_flood)"], ["deliver_aid(safe_hostile)"], []], "bad_trace": [["avoid(inactive_flood)", "deliver_aid(safe_hostile)"]], "prediction": "globally (not (prop_1 and prop_2)) FINISH"}
{"id": 2841, "sentence": ["Take", "a", "picture", "of", "safe", "person", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "photo(safe_person)", "and", "next", "photo(safe_person)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["safe_person"], "args_ref": ["safe person"]}}, "good_trace": [["photo(safe_person)"], [], ["photo(safe_person)"]], "bad_trace": [["photo(safe_person)"], [], [], []], "prediction": "3. *FINAL:* G (prop_1 or (not prop_1 and (next prop_1 or next next prop_1))) and"}
{"id": 152, "sentence": ["Take", "a", "picture", "of", "flood", "holds", "at", "all", "times."], "tl": ["globally", "photo(flood)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["flood"], "args_ref": ["flood"]}}, "good_trace": [["photo(flood)"]], "bad_trace": [["photo(flood)"], []], "prediction": "(prop_1)"}
{"id": 2180, "sentence": ["If", "go", "home", "happens", "infinitely", "often,", "then", "so", "does", "do", "not", "go", "near", "the", "active", "fire", "source."], "tl": ["globally", "finally", "go_home", "implies", "globally", "finally", "avoid(active_fire_source)"], "masked_tl": ["globally", "finally", "prop_1", "implies", "globally", "finally", "prop_2"], "grounded_sentence": ["If", "prop_1", "happens", "infinitely", "often,", "then", "so", "does", "prop_2"], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_fire_source"], "args_ref": ["active fire source"]}}, "good_trace": [[]], "bad_trace": [["go_home"]], "prediction": "3. FINAL: (globally (finally prop_1)) implies (globally (finally prop_2)) FINISH"}
{"id": 8308, "sentence": ["If", "take", "a", "video", "of", "fire", "source", "holds", "and", "do", "not", "go", "near", "the", "active", "unstable", "beam", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "hostile", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "record(fire_source)", "and", "next", "avoid(active_unstable_beam)", "implies", "next", "next", "deliver_aid(injured_hostile)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["fire_source"], "args_ref": ["fire source"]}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}}, "good_trace": [["record(fire_source)"], ["avoid(active_unstable_beam)"], ["deliver_aid(injured_hostile)"]], "bad_trace": [["record(fire_source)"], ["avoid(active_unstable_beam)"], []], "prediction": "- So the implication is: (prop_1 and next (not prop_2)) implies next next prop_3."}
{"id": 6769, "sentence": ["You", "must", "Eventually,", "both", "request", "assistance", "and", "communicate", "with", "the", "safe", "hostile", "hold", "simultaneously."], "tl": ["finally", "(", "get_help", "and", "communicate(safe_hostile)", ")"], "masked_tl": ["finally", "(", "prop_1", "and", "prop_2", ")"], "grounded_sentence": ["You", "must", "Eventually,", "both", "prop_1", "and", "prop_2", "hold", "simultaneously."], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}}, "good_trace": [["get_help", "communicate(safe_hostile)"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* finally (prop_1 and prop_2) FINISH"}
{"id": 6980, "sentence": ["Whenever", "return", "to", "base", "and", "give", "aid", "to", "the", "injured", "hostile", "are", "equal,", "give", "aid", "to", "the", "injured", "hostile", "and", "get", "help", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "go_home", "double_implies", "deliver_aid(injured_hostile)", ")", "implies", "(", "deliver_aid(injured_hostile)", "double_implies", "get_help", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_hostile"], "args_ref": ["injured hostile"]}, "prop_3": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home", "deliver_aid(injured_hostile)", "get_help"]], "bad_trace": [["go_home", "deliver_aid(injured_hostile)"]], "prediction": "(prop_1) and \"give aid to the injured hostile\" (prop_2) have the same truth value, i.e., prop_1 \u2194 prop_2.\n- \"give aid to the injured hostile and get help are equal as well\" means that in that situation, \"give aid to the injured hostile\" (prop_2) and \"get help\" (prop_3) are also equal, i.e., prop_2 \u2194 prop_3.\n- \"Whenever ... are equal, ... are equal as well\" means globally, if prop_1 \u2194 prop_2 holds, then prop_2 \u2194 prop_3 also holds, i.e., G((prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3)).\n\n2. Explanation dictionary:\n{\n  \"return to base and give aid to the injured hostile are equal\": \"(prop_1 double_implies prop_2)\",\n  \"give aid to the injured hostile and get help are equal as well\": \"(prop_2 double_implies prop_3)"}
{"id": 9172, "sentence": ["If", "avoid", "the", "active", "unstable", "beam", "holds", "and", "call", "for", "help", "holds", "next,", "then", "deliver", "aid", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "avoid(active_unstable_beam)", "and", "next", "get_help", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_unstable_beam"], "args_ref": ["active unstable beam"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(active_unstable_beam)"], ["get_help"], ["deliver_aid(injured_victim)"]], "bad_trace": [["avoid(active_unstable_beam)"], ["get_help"], []], "prediction": "- The entire statement is an implication: ( (prop_1 and next prop_2) implies next next prop_3 )."}
{"id": 8605, "sentence": ["Whenever", "neither", "request", "assistance", "nor", "return", "home", "holds,", "take", "a", "picture", "of", "injured", "person", "eventually", "holds."], "tl": ["globally", "(", "not", "(", "get_help", "and", "go_home", ")", "implies", "finally", "photo(injured_person)", ")"], "masked_tl": ["globally", "(", "not", "(", "prop_1", "and", "prop_2", ")", "implies", "finally", "prop_3", ")"], "grounded_sentence": ["Whenever", "neither", "prop_1", "nor", "prop_2", "holds,", "prop_3", "eventually", "holds."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 0, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["injured_person"], "args_ref": ["injured person"]}}, "good_trace": [["get_help", "go_home"]], "bad_trace": [[]], "prediction": "3. FINAL: globally (implies (and (not prop_1) (not prop_2)) (finally prop_3)) FINISH"}
{"id": 126, "sentence": ["If", "every", "begin", "recording", "safe", "victim", "is", "eventually", "followed", "by", "photographing", "unsafe", "victim,", "then", "take", "a", "picture", "of", "unsafe", "person", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "record(safe_victim)", "implies", "finally", "photo(unsafe_victim)", ")", "implies", "globally", "finally", "photo(unsafe_person)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "record", "action_ref": "begin recording", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [["record(safe_victim)"], ["photo(unsafe_victim)", "photo(unsafe_person)"]], "bad_trace": [["record(safe_victim)"], ["photo(unsafe_victim)"]], "prediction": "- Combining these: globally, (prop_1 implies F prop_2) implies G F prop_3."}
{"id": 7522, "sentence": ["Whenever", "request", "assistance", "and", "give", "aid", "to", "the", "injured", "rescuer", "are", "equal,", "give", "aid", "to", "the", "injured", "rescuer", "and", "avoid", "the", "active", "flood", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "deliver_aid(injured_rescuer)", ")", "implies", "(", "deliver_aid(injured_rescuer)", "double_implies", "avoid(active_flood)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["active_flood"], "args_ref": ["active flood"]}}, "good_trace": [["get_help", "deliver_aid(injured_rescuer)", "avoid(active_flood)"]], "bad_trace": [["get_help", "deliver_aid(injured_rescuer)"]], "prediction": "(prop_1) and \"give aid to the injured rescuer\" (prop_2) have the same truth value, i.e., prop_1 double_implies prop_2.\n- \"give aid to the injured rescuer and avoid the active flood are equal as well\" means that \"give aid to the injured rescuer\" (prop_2) and \"avoid the active flood\" (prop_3) also have the same truth value, i.e., prop_2 double_implies prop_3.\n- \"Whenever ... are equal, ... are equal as well\" translates to globally (G) if the first equality holds, then the second equality holds as well, i.e., G((prop_1 double_implies prop_2) implies (prop_2 double_implies prop_3)).\n\n2. Explanation dictionary:\n{\n  \"request assistance and give aid to the injured rescuer are equal\": \"(prop_1 double_implies prop_2)"}
{"id": 2649, "sentence": ["Whenever", "get", "help", "and", "establish", "communication", "with", "the", "safe", "hostile", "are", "equal,", "establish", "communication", "with", "the", "safe", "hostile", "and", "take", "a", "photo", "of", "unstable", "beam", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "get_help", "double_implies", "communicate(safe_hostile)", ")", "implies", "(", "communicate(safe_hostile)", "double_implies", "photo(unstable_beam)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 2, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["safe_hostile"], "args_ref": ["safe hostile"]}, "prop_3": {"action_canon": "photo", "action_ref": "take a photo of", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}}, "good_trace": [["get_help", "communicate(safe_hostile)", "photo(unstable_beam)"]], "bad_trace": [["get_help", "communicate(safe_hostile)"]], "prediction": "3. FINAL: globally ( (prop_1 and prop_2) implies (prop_2 and prop_3) ) FINISH"}
{"id": 2678, "sentence": ["This", "controller", "must", "eventually", "get", "help", "or", "take", "a", "video", "of", "unsafe", "person."], "tl": ["finally", "(", "get_help", "or", "record(unsafe_person)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_person"], "args_ref": ["unsafe person"]}}, "good_trace": [[], ["get_help"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 3095, "sentence": ["Stay", "away", "from", "the", "inactive", "fire", "source", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "tl": ["not", "globally", "(", "not", "(", "avoid(inactive_fire_source)", "and", "next", "avoid(inactive_fire_source)", ")", ")"], "masked_tl": ["not", "globally", "(", "not", "(", "prop_1", "and", "next", "prop_1", ")", ")"], "grounded_sentence": ["prop_1", "should", "always", "hold,", "with", "at", "most", "a", "two-step", "grace", "period", "for", "recovery."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_fire_source"], "args_ref": ["inactive fire source"]}}, "good_trace": [["avoid(inactive_fire_source)"], [], ["avoid(inactive_fire_source)"]], "bad_trace": [["avoid(inactive_fire_source)"], [], [], []], "prediction": " \"at most a two-step grace period for recovery\": \"(prop_1 or (not prop_1 and next prop_1) or (not prop_1 and next not prop"}
{"id": 7043, "sentence": ["This", "controller", "must", "eventually", "go", "home", "or", "talk", "to", "the", "injured", "victim."], "tl": ["finally", "(", "go_home", "or", "communicate(injured_victim)", ")"], "masked_tl": ["finally", "(", "prop_1", "or", "prop_2", ")"], "grounded_sentence": ["This", "controller", "must", "eventually", "prop_1", "or", "prop_2"], "lifted_sentence_prop_ids": [0, 0, 0, 0, 1, 1, 0, 2, 2, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [[], ["go_home"]], "bad_trace": [[], [], []], "prediction": "3. *FINAL:* (finally (prop_1 or prop_2)) FINISH"}
{"id": 3008, "sentence": ["If", "return", "home", "holds", "and", "take", "a", "video", "of", "unsafe", "victim", "holds", "next,", "then", "call", "for", "help", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "record(unsafe_victim)", "implies", "next", "next", "get_help", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "record", "action_ref": "take a video of", "args_canon": ["unsafe_victim"], "args_ref": ["unsafe victim"]}, "prop_3": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}}, "good_trace": [["go_home"], ["record(unsafe_victim)"], ["get_help"]], "bad_trace": [["go_home"], ["record(unsafe_victim)"], []], "prediction": "- Combining these with implication: (prop_1 and next prop_2) implies next next prop_3"}
{"id": 9736, "sentence": ["Whenever", "photograph", "injured", "victim", "and", "request", "assistance", "are", "equal,", "request", "assistance", "and", "go", "home", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "photo(injured_victim)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "go_home", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 0, 2, 2, 0, 0, 2, 2, 0, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}, "prop_2": {"action_canon": "get_help", "action_ref": "request assistance", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["photo(injured_victim)", "get_help", "go_home"]], "bad_trace": [["photo(injured_victim)", "get_help"]], "prediction": "  \"Whenever ... are equal ... are equal as well\": \"globally ((prop_1 and prop_2) or (not prop_1 and not prop_2) implies (prop_2 and prop_3) or (not prop_2 and not prop_3))\""}
{"id": 8552, "sentence": ["If", "get", "help", "holds", "and", "do", "not", "go", "near", "the", "active", "debris", "holds", "next,", "then", "communicate", "with", "the", "safe", "rescuer", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "get_help", "and", "next", "avoid(active_debris)", "implies", "next", "next", "communicate(safe_rescuer)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "get_help", "action_ref": "get help", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "avoid", "action_ref": "do not go near", "args_canon": ["active_debris"], "args_ref": ["active debris"]}, "prop_3": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["safe_rescuer"], "args_ref": ["safe rescuer"]}}, "good_trace": [["get_help"], ["avoid(active_debris)"], ["communicate(safe_rescuer)"]], "bad_trace": [["get_help"], ["avoid(active_debris)"], []], "prediction": "- The entire sentence is an implication: ( (prop_1 and next (not prop_2)) implies next next prop_3 )"}
{"id": 9047, "sentence": ["Talk", "to", "the", "safe", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(safe_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "talk to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}}, "good_trace": [["communicate(safe_victim)"]], "bad_trace": [["communicate(safe_victim)"], []], "prediction": "(prop_1)"}
{"id": 3368, "sentence": ["Establish", "communication", "with", "the", "injured", "victim", "holds", "at", "all", "times."], "tl": ["globally", "communicate(injured_victim)"], "masked_tl": ["globally", "prop_1"], "grounded_sentence": ["prop_1", "holds", "at", "all", "times."], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 1, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "establish communication with", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["communicate(injured_victim)"]], "bad_trace": [["communicate(injured_victim)"], []], "prediction": "(prop_1)"}
{"id": 3805, "sentence": ["If", "every", "take", "a", "picture", "of", "gas", "leak", "is", "eventually", "followed", "by", "recording", "unstable", "beam,", "then", "avoid", "the", "impending", "gas", "leak", "must", "occur", "infinitely", "often."], "tl": ["globally", "(", "photo(gas_leak)", "implies", "finally", "record(unstable_beam)", ")", "implies", "globally", "finally", "avoid(impending_gas_leak)"], "masked_tl": ["globally", "(", "prop_1", "implies", "finally", "prop_2", ")", "implies", "globally", "finally", "prop_3"], "grounded_sentence": ["If", "every", "prop_1", "is", "eventually", "followed", "by", "prop_2", "then", "prop_3", "must", "occur", "infinitely", "often."], "lifted_sentence_prop_ids": [0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "photo", "action_ref": "take a picture of", "args_canon": ["gas_leak"], "args_ref": ["gas leak"]}, "prop_2": {"action_canon": "record", "action_ref": "record", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "avoid", "action_ref": "avoid", "args_canon": ["impending_gas_leak"], "args_ref": ["impending gas leak"]}}, "good_trace": [["photo(gas_leak)"], ["record(unstable_beam)", "avoid(impending_gas_leak)"]], "bad_trace": [["photo(gas_leak)"], ["record(unstable_beam)"]], "prediction": "  If (G (prop_1 \u2192 F prop_2)) then (G F prop_3)."}
{"id": 1092, "sentence": ["Communicate", "with", "the", "injured", "rescuer", "can", "only", "happen", "after", "returning", "to", "base."], "tl": ["not", "communicate(injured_rescuer)", "until", "go_home"], "masked_tl": ["not", "prop_1", "until", "prop_2"], "grounded_sentence": ["prop_1", "can", "only", "happen", "after", "prop_2"], "lifted_sentence_prop_ids": [1, 1, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2], "prop_dict": {"prop_1": {"action_canon": "communicate", "action_ref": "communicate with", "args_canon": ["injured_rescuer"], "args_ref": ["injured rescuer"]}, "prop_2": {"action_canon": "go_home", "action_ref": "return to base", "args_canon": [], "args_ref": []}}, "good_trace": [[], [], ["go_home"]], "bad_trace": [["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"], ["communicate(injured_rescuer)"]], "prediction": "3. *FINAL:* globally (not prop_1 until prop_2) FINISH"}
{"id": 6344, "sentence": ["If", "return", "home", "holds", "and", "photograph", "unstable", "beam", "holds", "next,", "then", "provide", "assistance", "to", "the", "injured", "victim", "holds", "in", "the", "step", "after", "that."], "tl": ["globally", "(", "go_home", "and", "next", "photo(unstable_beam)", "implies", "next", "next", "deliver_aid(injured_victim)", ")"], "masked_tl": ["globally", "(", "prop_1", "and", "next", "prop_2", "implies", "next", "next", "prop_3", ")"], "grounded_sentence": ["If", "prop_1", "holds", "and", "prop_2", "holds", "next,", "then", "prop_3", "holds", "in", "the", "step", "after", "that."], "lifted_sentence_prop_ids": [0, 1, 1, 0, 0, 2, 2, 2, 0, 0, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "go_home", "action_ref": "return home", "args_canon": [], "args_ref": []}, "prop_2": {"action_canon": "photo", "action_ref": "photograph", "args_canon": ["unstable_beam"], "args_ref": ["unstable beam"]}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "provide assistance to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["go_home"], ["photo(unstable_beam)"], ["deliver_aid(injured_victim)"]], "bad_trace": [["go_home"], ["photo(unstable_beam)"], []], "prediction": "- The entire sentence is an implication: (prop_1 and next prop_2) implies next next prop_3."}
{"id": 9974, "sentence": ["Whenever", "stay", "away", "from", "the", "inactive", "flood", "and", "call", "for", "help", "are", "equal,", "call", "for", "help", "and", "give", "aid", "to", "the", "injured", "victim", "are", "equal", "as", "well."], "tl": ["globally", "(", "(", "avoid(inactive_flood)", "double_implies", "get_help", ")", "implies", "(", "get_help", "double_implies", "deliver_aid(injured_victim)", ")", ")"], "masked_tl": ["globally", "(", "(", "prop_1", "double_implies", "prop_2", ")", "implies", "(", "prop_2", "double_implies", "prop_3", ")", ")"], "grounded_sentence": ["Whenever", "prop_1", "and", "prop_2", "are", "equal,", "prop_2", "and", "prop_3", "are", "equal", "as", "well."], "lifted_sentence_prop_ids": [0, 1, 1, 1, 1, 1, 1, 0, 2, 2, 2, 0, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 0, 0, 0], "prop_dict": {"prop_1": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["inactive_flood"], "args_ref": ["inactive flood"]}, "prop_2": {"action_canon": "get_help", "action_ref": "call for help", "args_canon": [], "args_ref": []}, "prop_3": {"action_canon": "deliver_aid", "action_ref": "give aid to", "args_canon": ["injured_victim"], "args_ref": ["injured victim"]}}, "good_trace": [["avoid(inactive_flood)", "get_help", "deliver_aid(injured_victim)"]], "bad_trace": [["avoid(inactive_flood)", "get_help"]], "prediction": "3. FINAL: globally ((prop_1 and prop_2) implies (prop_2 and prop_3)) FINISH"}
{"id": 926, "sentence": ["If", "stay", "away", "from", "the", "impending", "unstable", "beam", "holds,", "then", "in", "the", "next", "step", "go", "home", "persists", "until", "delivering", "aid", "to", "the", "safe", "victim", "holds,", "or", "else", "go", "home", "holds", "forever."], "tl": ["avoid(impending_unstable_beam)", "implies", "next", "(", "(", "go_home", "until", "deliver_aid(safe_victim)", ")", "or", "globally", "go_home", ")"], "masked_tl": ["prop_2", "implies", "next", "(", "(", "prop_3", "until", "prop_1", ")", "or", "globally", "prop_3", ")"], "grounded_sentence": ["If", "prop_2", "holds,", "then", "in", "the", "next", "step", "prop_3", "persists", "until", "prop_1", "holds,", "or", "else", "prop_3", "holds", "forever."], "lifted_sentence_prop_ids": [0, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 3, 3, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 3, 0, 0], "prop_dict": {"prop_1": {"action_canon": "deliver_aid", "action_ref": "deliver aid to", "args_canon": ["safe_victim"], "args_ref": ["safe victim"]}, "prop_2": {"action_canon": "avoid", "action_ref": "stay away from", "args_canon": ["impending_unstable_beam"], "args_ref": ["impending unstable beam"]}, "prop_3": {"action_canon": "go_home", "action_ref": "go home", "args_canon": [], "args_ref": []}}, "good_trace": [["avoid(impending_unstable_beam)"], ["go_home"], ["go_home"], ["deliver_aid(safe_victim)"]], "bad_trace": [["avoid(impending_unstable_beam)"], []], "prediction": "3. FINAL: (prop_1 implies ((next (prop_2 until prop_3)) or (globally prop_2))) FINISH"}
